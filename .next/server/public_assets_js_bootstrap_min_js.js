"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "public_assets_js_bootstrap_min_js";
exports.ids = ["public_assets_js_bootstrap_min_js"];
exports.modules = {

/***/ "./public/assets/js/bootstrap.min.js":
/*!*******************************************!*\
  !*** ./public/assets/js/bootstrap.min.js ***!
  \*******************************************/
/***/ ((module) => {

eval("/*!\n  * Bootstrap v5.3.0-alpha2 (https://getbootstrap.com/)\n  * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */ \n!function(t, e) {\n     true ? module.exports = e() : 0;\n}(void 0, function() {\n    \"use strict\";\n    const t = \"transitionend\", e = (t)=>(t && window.CSS && window.CSS.escape && (t = t.replace(/#([^\\s\"#']+)/g, (t, e)=>`#${CSS.escape(e)}`)), t), i = (e)=>{\n        e.dispatchEvent(new Event(t));\n    }, n = (t)=>!(!t || \"object\" != typeof t) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType), s = (t)=>n(t) ? t.jquery ? t[0] : t : \"string\" == typeof t && t.length > 0 ? document.querySelector(e(t)) : null, o = (t)=>{\n        if (!n(t) || 0 === t.getClientRects().length) return !1;\n        const e = \"visible\" === getComputedStyle(t).getPropertyValue(\"visibility\"), i = t.closest(\"details:not([open])\");\n        if (!i) return e;\n        if (i !== t) {\n            const e = t.closest(\"summary\");\n            if (e && e.parentNode !== i) return !1;\n            if (null === e) return !1;\n        }\n        return e;\n    }, r = (t)=>!t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains(\"disabled\") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute(\"disabled\") && \"false\" !== t.getAttribute(\"disabled\")), a = (t)=>{\n        if (!document.documentElement.attachShadow) return null;\n        if (\"function\" == typeof t.getRootNode) {\n            const e = t.getRootNode();\n            return e instanceof ShadowRoot ? e : null;\n        }\n        return t instanceof ShadowRoot ? t : t.parentNode ? a(t.parentNode) : null;\n    }, l = ()=>{}, c = (t)=>{\n        t.offsetHeight;\n    }, h = ()=>window.jQuery && !document.body.hasAttribute(\"data-bs-no-jquery\") ? window.jQuery : null, d = [], u = ()=>\"rtl\" === document.documentElement.dir, f = (t)=>{\n        var e;\n        e = ()=>{\n            const e = h();\n            if (e) {\n                const i = t.NAME, n = e.fn[i];\n                e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = ()=>(e.fn[i] = n, t.jQueryInterface);\n            }\n        }, \"loading\" === document.readyState ? (d.length || document.addEventListener(\"DOMContentLoaded\", ()=>{\n            for (const t of d)t();\n        }), d.push(e)) : e();\n    }, p = (t, e = [], i = t)=>\"function\" == typeof t ? t(...e) : i, m = (e, n, s = !0)=>{\n        if (!s) return void p(e);\n        const o = ((t)=>{\n            if (!t) return 0;\n            let { transitionDuration: e, transitionDelay: i } = window.getComputedStyle(t);\n            const n = Number.parseFloat(e), s = Number.parseFloat(i);\n            return n || s ? (e = e.split(\",\")[0], i = i.split(\",\")[0], 1e3 * (Number.parseFloat(e) + Number.parseFloat(i))) : 0;\n        })(n) + 5;\n        let r = !1;\n        const a = ({ target: i })=>{\n            i === n && (r = !0, n.removeEventListener(t, a), p(e));\n        };\n        n.addEventListener(t, a), setTimeout(()=>{\n            r || i(n);\n        }, o);\n    }, g = (t, e, i, n)=>{\n        const s = t.length;\n        let o = t.indexOf(e);\n        return -1 === o ? !i && n ? t[s - 1] : t[0] : (o += i ? 1 : -1, n && (o = (o + s) % s), t[Math.max(0, Math.min(o, s - 1))]);\n    }, _ = /[^.]*(?=\\..*)\\.|.*/, b = /\\..*/, v = /::\\d+$/, y = {};\n    let w = 1;\n    const A = {\n        mouseenter: \"mouseover\",\n        mouseleave: \"mouseout\"\n    }, E = new Set([\n        \"click\",\n        \"dblclick\",\n        \"mouseup\",\n        \"mousedown\",\n        \"contextmenu\",\n        \"mousewheel\",\n        \"DOMMouseScroll\",\n        \"mouseover\",\n        \"mouseout\",\n        \"mousemove\",\n        \"selectstart\",\n        \"selectend\",\n        \"keydown\",\n        \"keypress\",\n        \"keyup\",\n        \"orientationchange\",\n        \"touchstart\",\n        \"touchmove\",\n        \"touchend\",\n        \"touchcancel\",\n        \"pointerdown\",\n        \"pointermove\",\n        \"pointerup\",\n        \"pointerleave\",\n        \"pointercancel\",\n        \"gesturestart\",\n        \"gesturechange\",\n        \"gestureend\",\n        \"focus\",\n        \"blur\",\n        \"change\",\n        \"reset\",\n        \"select\",\n        \"submit\",\n        \"focusin\",\n        \"focusout\",\n        \"load\",\n        \"unload\",\n        \"beforeunload\",\n        \"resize\",\n        \"move\",\n        \"DOMContentLoaded\",\n        \"readystatechange\",\n        \"error\",\n        \"abort\",\n        \"scroll\"\n    ]);\n    function T(t, e) {\n        return e && `${e}::${w++}` || t.uidEvent || w++;\n    }\n    function C(t) {\n        const e = T(t);\n        return t.uidEvent = e, y[e] = y[e] || {}, y[e];\n    }\n    function O(t, e, i = null) {\n        return Object.values(t).find((t)=>t.callable === e && t.delegationSelector === i);\n    }\n    function x(t, e, i) {\n        const n = \"string\" == typeof e, s = n ? i : e || i;\n        let o = D(t);\n        return E.has(o) || (o = t), [\n            n,\n            s,\n            o\n        ];\n    }\n    function k(t, e, i, n, s) {\n        if (\"string\" != typeof e || !t) return;\n        let [o, r, a] = x(e, i, n);\n        if (e in A) {\n            const t = (t)=>function(e) {\n                    if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return t.call(this, e);\n                };\n            r = t(r);\n        }\n        const l = C(t), c = l[a] || (l[a] = {}), h = O(c, r, o ? i : null);\n        if (h) return void (h.oneOff = h.oneOff && s);\n        const d = T(r, e.replace(_, \"\")), u = o ? function(t, e, i) {\n            return function n(s) {\n                const o = t.querySelectorAll(e);\n                for(let { target: r } = s; r && r !== this; r = r.parentNode)for (const a of o)if (a === r) return N(s, {\n                    delegateTarget: r\n                }), n.oneOff && I.off(t, s.type, e, i), i.apply(r, [\n                    s\n                ]);\n            };\n        }(t, i, r) : function(t, e) {\n            return function i(n) {\n                return N(n, {\n                    delegateTarget: t\n                }), i.oneOff && I.off(t, n.type, e), e.apply(t, [\n                    n\n                ]);\n            };\n        }(t, r);\n        u.delegationSelector = o ? i : null, u.callable = r, u.oneOff = s, u.uidEvent = d, c[d] = u, t.addEventListener(a, u, o);\n    }\n    function L(t, e, i, n, s) {\n        const o = O(e[i], n, s);\n        o && (t.removeEventListener(i, o, Boolean(s)), delete e[i][o.uidEvent]);\n    }\n    function S(t, e, i, n) {\n        const s = e[i] || {};\n        for (const [o, r] of Object.entries(s))o.includes(n) && L(t, e, i, r.callable, r.delegationSelector);\n    }\n    function D(t) {\n        return t = t.replace(b, \"\"), A[t] || t;\n    }\n    const I = {\n        on (t, e, i, n) {\n            k(t, e, i, n, !1);\n        },\n        one (t, e, i, n) {\n            k(t, e, i, n, !0);\n        },\n        off (t, e, i, n) {\n            if (\"string\" != typeof e || !t) return;\n            const [s, o, r] = x(e, i, n), a = r !== e, l = C(t), c = l[r] || {}, h = e.startsWith(\".\");\n            if (void 0 === o) {\n                if (h) for (const i of Object.keys(l))S(t, l, i, e.slice(1));\n                for (const [i, n] of Object.entries(c)){\n                    const s = i.replace(v, \"\");\n                    a && !e.includes(s) || L(t, l, r, n.callable, n.delegationSelector);\n                }\n            } else {\n                if (!Object.keys(c).length) return;\n                L(t, l, r, o, s ? i : null);\n            }\n        },\n        trigger (t, e, i) {\n            if (\"string\" != typeof e || !t) return null;\n            const n = h();\n            let s = null, o = !0, r = !0, a = !1;\n            e !== D(e) && n && (s = n.Event(e, i), n(t).trigger(s), o = !s.isPropagationStopped(), r = !s.isImmediatePropagationStopped(), a = s.isDefaultPrevented());\n            let l = new Event(e, {\n                bubbles: o,\n                cancelable: !0\n            });\n            return l = N(l, i), a && l.preventDefault(), r && t.dispatchEvent(l), l.defaultPrevented && s && s.preventDefault(), l;\n        }\n    };\n    function N(t, e = {}) {\n        for (const [i, n] of Object.entries(e))try {\n            t[i] = n;\n        } catch (e) {\n            Object.defineProperty(t, i, {\n                configurable: !0,\n                get: ()=>n\n            });\n        }\n        return t;\n    }\n    const P = new Map, j = {\n        set (t, e, i) {\n            P.has(t) || P.set(t, new Map);\n            const n = P.get(t);\n            n.has(e) || 0 === n.size ? n.set(e, i) : console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`);\n        },\n        get: (t, e)=>P.has(t) && P.get(t).get(e) || null,\n        remove (t, e) {\n            if (!P.has(t)) return;\n            const i = P.get(t);\n            i.delete(e), 0 === i.size && P.delete(t);\n        }\n    };\n    function M(t) {\n        if (\"true\" === t) return !0;\n        if (\"false\" === t) return !1;\n        if (t === Number(t).toString()) return Number(t);\n        if (\"\" === t || \"null\" === t) return null;\n        if (\"string\" != typeof t) return t;\n        try {\n            return JSON.parse(decodeURIComponent(t));\n        } catch (e) {\n            return t;\n        }\n    }\n    function F(t) {\n        return t.replace(/[A-Z]/g, (t)=>`-${t.toLowerCase()}`);\n    }\n    const H = {\n        setDataAttribute (t, e, i) {\n            t.setAttribute(`data-bs-${F(e)}`, i);\n        },\n        removeDataAttribute (t, e) {\n            t.removeAttribute(`data-bs-${F(e)}`);\n        },\n        getDataAttributes (t) {\n            if (!t) return {};\n            const e = {}, i = Object.keys(t.dataset).filter((t)=>t.startsWith(\"bs\") && !t.startsWith(\"bsConfig\"));\n            for (const n of i){\n                let i = n.replace(/^bs/, \"\");\n                i = i.charAt(0).toLowerCase() + i.slice(1, i.length), e[i] = M(t.dataset[n]);\n            }\n            return e;\n        },\n        getDataAttribute: (t, e)=>M(t.getAttribute(`data-bs-${F(e)}`))\n    };\n    class $ {\n        static get Default() {\n            return {};\n        }\n        static get DefaultType() {\n            return {};\n        }\n        static get NAME() {\n            throw new Error('You have to implement the static method \"NAME\", for each component!');\n        }\n        _getConfig(t) {\n            return t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t;\n        }\n        _configAfterMerge(t) {\n            return t;\n        }\n        _mergeConfigObj(t, e) {\n            const i = n(e) ? H.getDataAttribute(e, \"config\") : {};\n            return {\n                ...this.constructor.Default,\n                ...\"object\" == typeof i ? i : {},\n                ...n(e) ? H.getDataAttributes(e) : {},\n                ...\"object\" == typeof t ? t : {}\n            };\n        }\n        _typeCheckConfig(t, e = this.constructor.DefaultType) {\n            for (const [s, o] of Object.entries(e)){\n                const e = t[s], r = n(e) ? \"element\" : null == (i = e) ? `${i}` : Object.prototype.toString.call(i).match(/\\s([a-z]+)/i)[1].toLowerCase();\n                if (!new RegExp(o).test(r)) throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${s}\" provided type \"${r}\" but expected type \"${o}\".`);\n            }\n            var i;\n        }\n    }\n    class W extends $ {\n        constructor(t, e){\n            super(), (t = s(t)) && (this._element = t, this._config = this._getConfig(e), j.set(this._element, this.constructor.DATA_KEY, this));\n        }\n        dispose() {\n            j.remove(this._element, this.constructor.DATA_KEY), I.off(this._element, this.constructor.EVENT_KEY);\n            for (const t of Object.getOwnPropertyNames(this))this[t] = null;\n        }\n        _queueCallback(t, e, i = !0) {\n            m(t, e, i);\n        }\n        _getConfig(t) {\n            return t = this._mergeConfigObj(t, this._element), t = this._configAfterMerge(t), this._typeCheckConfig(t), t;\n        }\n        static getInstance(t) {\n            return j.get(s(t), this.DATA_KEY);\n        }\n        static getOrCreateInstance(t, e = {}) {\n            return this.getInstance(t) || new this(t, \"object\" == typeof e ? e : null);\n        }\n        static get VERSION() {\n            return \"5.3.0-alpha2\";\n        }\n        static get DATA_KEY() {\n            return `bs.${this.NAME}`;\n        }\n        static get EVENT_KEY() {\n            return `.${this.DATA_KEY}`;\n        }\n        static eventName(t) {\n            return `${t}${this.EVENT_KEY}`;\n        }\n    }\n    const B = (t)=>{\n        let i = t.getAttribute(\"data-bs-target\");\n        if (!i || \"#\" === i) {\n            let e = t.getAttribute(\"href\");\n            if (!e || !e.includes(\"#\") && !e.startsWith(\".\")) return null;\n            e.includes(\"#\") && !e.startsWith(\"#\") && (e = `#${e.split(\"#\")[1]}`), i = e && \"#\" !== e ? e.trim() : null;\n        }\n        return e(i);\n    }, z = {\n        find: (t, e = document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e, t)),\n        findOne: (t, e = document.documentElement)=>Element.prototype.querySelector.call(e, t),\n        children: (t, e)=>[].concat(...t.children).filter((t)=>t.matches(e)),\n        parents (t, e) {\n            const i = [];\n            let n = t.parentNode.closest(e);\n            for(; n;)i.push(n), n = n.parentNode.closest(e);\n            return i;\n        },\n        prev (t, e) {\n            let i = t.previousElementSibling;\n            for(; i;){\n                if (i.matches(e)) return [\n                    i\n                ];\n                i = i.previousElementSibling;\n            }\n            return [];\n        },\n        next (t, e) {\n            let i = t.nextElementSibling;\n            for(; i;){\n                if (i.matches(e)) return [\n                    i\n                ];\n                i = i.nextElementSibling;\n            }\n            return [];\n        },\n        focusableChildren (t) {\n            const e = [\n                \"a\",\n                \"button\",\n                \"input\",\n                \"textarea\",\n                \"select\",\n                \"details\",\n                \"[tabindex]\",\n                '[contenteditable=\"true\"]'\n            ].map((t)=>`${t}:not([tabindex^=\"-\"])`).join(\",\");\n            return this.find(e, t).filter((t)=>!r(t) && o(t));\n        },\n        getSelectorFromElement (t) {\n            const e = B(t);\n            return e && z.findOne(e) ? e : null;\n        },\n        getElementFromSelector (t) {\n            const e = B(t);\n            return e ? z.findOne(e) : null;\n        },\n        getMultipleElementsFromSelector (t) {\n            const e = B(t);\n            return e ? z.find(e) : [];\n        }\n    }, R = (t, e = \"hide\")=>{\n        const i = `click.dismiss${t.EVENT_KEY}`, n = t.NAME;\n        I.on(document, i, `[data-bs-dismiss=\"${n}\"]`, function(i) {\n            if ([\n                \"A\",\n                \"AREA\"\n            ].includes(this.tagName) && i.preventDefault(), r(this)) return;\n            const s = z.getElementFromSelector(this) || this.closest(`.${n}`);\n            t.getOrCreateInstance(s)[e]();\n        });\n    };\n    class q extends W {\n        static get NAME() {\n            return \"alert\";\n        }\n        close() {\n            if (I.trigger(this._element, \"close.bs.alert\").defaultPrevented) return;\n            this._element.classList.remove(\"show\");\n            const t = this._element.classList.contains(\"fade\");\n            this._queueCallback(()=>this._destroyElement(), this._element, t);\n        }\n        _destroyElement() {\n            this._element.remove(), I.trigger(this._element, \"closed.bs.alert\"), this.dispose();\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = q.getOrCreateInstance(this);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw new TypeError(`No method named \"${t}\"`);\n                    e[t](this);\n                }\n            });\n        }\n    }\n    R(q, \"close\"), f(q);\n    const V = '[data-bs-toggle=\"button\"]';\n    class K extends W {\n        static get NAME() {\n            return \"button\";\n        }\n        toggle() {\n            this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(\"active\"));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = K.getOrCreateInstance(this);\n                \"toggle\" === t && e[t]();\n            });\n        }\n    }\n    I.on(document, \"click.bs.button.data-api\", V, (t)=>{\n        t.preventDefault();\n        const e = t.target.closest(V);\n        K.getOrCreateInstance(e).toggle();\n    }), f(K);\n    const Q = {\n        endCallback: null,\n        leftCallback: null,\n        rightCallback: null\n    }, X = {\n        endCallback: \"(function|null)\",\n        leftCallback: \"(function|null)\",\n        rightCallback: \"(function|null)\"\n    };\n    class Y extends $ {\n        constructor(t, e){\n            super(), this._element = t, t && Y.isSupported() && (this._config = this._getConfig(e), this._deltaX = 0, this._supportPointerEvents = Boolean(window.PointerEvent), this._initEvents());\n        }\n        static get Default() {\n            return Q;\n        }\n        static get DefaultType() {\n            return X;\n        }\n        static get NAME() {\n            return \"swipe\";\n        }\n        dispose() {\n            I.off(this._element, \".bs.swipe\");\n        }\n        _start(t) {\n            this._supportPointerEvents ? this._eventIsPointerPenTouch(t) && (this._deltaX = t.clientX) : this._deltaX = t.touches[0].clientX;\n        }\n        _end(t) {\n            this._eventIsPointerPenTouch(t) && (this._deltaX = t.clientX - this._deltaX), this._handleSwipe(), p(this._config.endCallback);\n        }\n        _move(t) {\n            this._deltaX = t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this._deltaX;\n        }\n        _handleSwipe() {\n            const t = Math.abs(this._deltaX);\n            if (t <= 40) return;\n            const e = t / this._deltaX;\n            this._deltaX = 0, e && p(e > 0 ? this._config.rightCallback : this._config.leftCallback);\n        }\n        _initEvents() {\n            this._supportPointerEvents ? (I.on(this._element, \"pointerdown.bs.swipe\", (t)=>this._start(t)), I.on(this._element, \"pointerup.bs.swipe\", (t)=>this._end(t)), this._element.classList.add(\"pointer-event\")) : (I.on(this._element, \"touchstart.bs.swipe\", (t)=>this._start(t)), I.on(this._element, \"touchmove.bs.swipe\", (t)=>this._move(t)), I.on(this._element, \"touchend.bs.swipe\", (t)=>this._end(t)));\n        }\n        _eventIsPointerPenTouch(t) {\n            return this._supportPointerEvents && (\"pen\" === t.pointerType || \"touch\" === t.pointerType);\n        }\n        static isSupported() {\n            return \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0;\n        }\n    }\n    const U = \"next\", G = \"prev\", J = \"left\", Z = \"right\", tt = \"slid.bs.carousel\", et = \"carousel\", it = \"active\", nt = {\n        ArrowLeft: Z,\n        ArrowRight: J\n    }, st = {\n        interval: 5e3,\n        keyboard: !0,\n        pause: \"hover\",\n        ride: !1,\n        touch: !0,\n        wrap: !0\n    }, ot = {\n        interval: \"(number|boolean)\",\n        keyboard: \"boolean\",\n        pause: \"(string|boolean)\",\n        ride: \"(boolean|string)\",\n        touch: \"boolean\",\n        wrap: \"boolean\"\n    };\n    class rt extends W {\n        constructor(t, e){\n            super(t, e), this._interval = null, this._activeElement = null, this._isSliding = !1, this.touchTimeout = null, this._swipeHelper = null, this._indicatorsElement = z.findOne(\".carousel-indicators\", this._element), this._addEventListeners(), this._config.ride === et && this.cycle();\n        }\n        static get Default() {\n            return st;\n        }\n        static get DefaultType() {\n            return ot;\n        }\n        static get NAME() {\n            return \"carousel\";\n        }\n        next() {\n            this._slide(U);\n        }\n        nextWhenVisible() {\n            !document.hidden && o(this._element) && this.next();\n        }\n        prev() {\n            this._slide(G);\n        }\n        pause() {\n            this._isSliding && i(this._element), this._clearInterval();\n        }\n        cycle() {\n            this._clearInterval(), this._updateInterval(), this._interval = setInterval(()=>this.nextWhenVisible(), this._config.interval);\n        }\n        _maybeEnableCycle() {\n            this._config.ride && (this._isSliding ? I.one(this._element, tt, ()=>this.cycle()) : this.cycle());\n        }\n        to(t) {\n            const e = this._getItems();\n            if (t > e.length - 1 || t < 0) return;\n            if (this._isSliding) return void I.one(this._element, tt, ()=>this.to(t));\n            const i = this._getItemIndex(this._getActive());\n            if (i === t) return;\n            const n = t > i ? U : G;\n            this._slide(n, e[t]);\n        }\n        dispose() {\n            this._swipeHelper && this._swipeHelper.dispose(), super.dispose();\n        }\n        _configAfterMerge(t) {\n            return t.defaultInterval = t.interval, t;\n        }\n        _addEventListeners() {\n            this._config.keyboard && I.on(this._element, \"keydown.bs.carousel\", (t)=>this._keydown(t)), \"hover\" === this._config.pause && (I.on(this._element, \"mouseenter.bs.carousel\", ()=>this.pause()), I.on(this._element, \"mouseleave.bs.carousel\", ()=>this._maybeEnableCycle())), this._config.touch && Y.isSupported() && this._addTouchEventListeners();\n        }\n        _addTouchEventListeners() {\n            for (const t of z.find(\".carousel-item img\", this._element))I.on(t, \"dragstart.bs.carousel\", (t)=>t.preventDefault());\n            const t = {\n                leftCallback: ()=>this._slide(this._directionToOrder(J)),\n                rightCallback: ()=>this._slide(this._directionToOrder(Z)),\n                endCallback: ()=>{\n                    \"hover\" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout(()=>this._maybeEnableCycle(), 500 + this._config.interval));\n                }\n            };\n            this._swipeHelper = new Y(this._element, t);\n        }\n        _keydown(t) {\n            if (/input|textarea/i.test(t.target.tagName)) return;\n            const e = nt[t.key];\n            e && (t.preventDefault(), this._slide(this._directionToOrder(e)));\n        }\n        _getItemIndex(t) {\n            return this._getItems().indexOf(t);\n        }\n        _setActiveIndicatorElement(t) {\n            if (!this._indicatorsElement) return;\n            const e = z.findOne(\".active\", this._indicatorsElement);\n            e.classList.remove(it), e.removeAttribute(\"aria-current\");\n            const i = z.findOne(`[data-bs-slide-to=\"${t}\"]`, this._indicatorsElement);\n            i && (i.classList.add(it), i.setAttribute(\"aria-current\", \"true\"));\n        }\n        _updateInterval() {\n            const t = this._activeElement || this._getActive();\n            if (!t) return;\n            const e = Number.parseInt(t.getAttribute(\"data-bs-interval\"), 10);\n            this._config.interval = e || this._config.defaultInterval;\n        }\n        _slide(t, e = null) {\n            if (this._isSliding) return;\n            const i = this._getActive(), n = t === U, s = e || g(this._getItems(), i, n, this._config.wrap);\n            if (s === i) return;\n            const o = this._getItemIndex(s), r = (e)=>I.trigger(this._element, e, {\n                    relatedTarget: s,\n                    direction: this._orderToDirection(t),\n                    from: this._getItemIndex(i),\n                    to: o\n                });\n            if (r(\"slide.bs.carousel\").defaultPrevented) return;\n            if (!i || !s) return;\n            const a = Boolean(this._interval);\n            this.pause(), this._isSliding = !0, this._setActiveIndicatorElement(o), this._activeElement = s;\n            const l = n ? \"carousel-item-start\" : \"carousel-item-end\", h = n ? \"carousel-item-next\" : \"carousel-item-prev\";\n            s.classList.add(h), c(s), i.classList.add(l), s.classList.add(l), this._queueCallback(()=>{\n                s.classList.remove(l, h), s.classList.add(it), i.classList.remove(it, h, l), this._isSliding = !1, r(tt);\n            }, i, this._isAnimated()), a && this.cycle();\n        }\n        _isAnimated() {\n            return this._element.classList.contains(\"slide\");\n        }\n        _getActive() {\n            return z.findOne(\".active.carousel-item\", this._element);\n        }\n        _getItems() {\n            return z.find(\".carousel-item\", this._element);\n        }\n        _clearInterval() {\n            this._interval && (clearInterval(this._interval), this._interval = null);\n        }\n        _directionToOrder(t) {\n            return u() ? t === J ? G : U : t === J ? U : G;\n        }\n        _orderToDirection(t) {\n            return u() ? t === G ? J : Z : t === G ? Z : J;\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = rt.getOrCreateInstance(this, t);\n                if (\"number\" != typeof t) {\n                    if (\"string\" == typeof t) {\n                        if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw new TypeError(`No method named \"${t}\"`);\n                        e[t]();\n                    }\n                } else e.to(t);\n            });\n        }\n    }\n    I.on(document, \"click.bs.carousel.data-api\", \"[data-bs-slide], [data-bs-slide-to]\", function(t) {\n        const e = z.getElementFromSelector(this);\n        if (!e || !e.classList.contains(et)) return;\n        t.preventDefault();\n        const i = rt.getOrCreateInstance(e), n = this.getAttribute(\"data-bs-slide-to\");\n        return n ? (i.to(n), void i._maybeEnableCycle()) : \"next\" === H.getDataAttribute(this, \"slide\") ? (i.next(), void i._maybeEnableCycle()) : (i.prev(), void i._maybeEnableCycle());\n    }), I.on(window, \"load.bs.carousel.data-api\", ()=>{\n        const t = z.find('[data-bs-ride=\"carousel\"]');\n        for (const e of t)rt.getOrCreateInstance(e);\n    }), f(rt);\n    const at = \"show\", lt = \"collapse\", ct = \"collapsing\", ht = '[data-bs-toggle=\"collapse\"]', dt = {\n        parent: null,\n        toggle: !0\n    }, ut = {\n        parent: \"(null|element)\",\n        toggle: \"boolean\"\n    };\n    class ft extends W {\n        constructor(t, e){\n            super(t, e), this._isTransitioning = !1, this._triggerArray = [];\n            const i = z.find(ht);\n            for (const t of i){\n                const e = z.getSelectorFromElement(t), i = z.find(e).filter((t)=>t === this._element);\n                null !== e && i.length && this._triggerArray.push(t);\n            }\n            this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle();\n        }\n        static get Default() {\n            return dt;\n        }\n        static get DefaultType() {\n            return ut;\n        }\n        static get NAME() {\n            return \"collapse\";\n        }\n        toggle() {\n            this._isShown() ? this.hide() : this.show();\n        }\n        show() {\n            if (this._isTransitioning || this._isShown()) return;\n            let t = [];\n            if (this._config.parent && (t = this._getFirstLevelChildren(\".collapse.show, .collapse.collapsing\").filter((t)=>t !== this._element).map((t)=>ft.getOrCreateInstance(t, {\n                    toggle: !1\n                }))), t.length && t[0]._isTransitioning) return;\n            if (I.trigger(this._element, \"show.bs.collapse\").defaultPrevented) return;\n            for (const e of t)e.hide();\n            const e = this._getDimension();\n            this._element.classList.remove(lt), this._element.classList.add(ct), this._element.style[e] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0;\n            const i = `scroll${e[0].toUpperCase() + e.slice(1)}`;\n            this._queueCallback(()=>{\n                this._isTransitioning = !1, this._element.classList.remove(ct), this._element.classList.add(lt, at), this._element.style[e] = \"\", I.trigger(this._element, \"shown.bs.collapse\");\n            }, this._element, !0), this._element.style[e] = `${this._element[i]}px`;\n        }\n        hide() {\n            if (this._isTransitioning || !this._isShown()) return;\n            if (I.trigger(this._element, \"hide.bs.collapse\").defaultPrevented) return;\n            const t = this._getDimension();\n            this._element.style[t] = `${this._element.getBoundingClientRect()[t]}px`, c(this._element), this._element.classList.add(ct), this._element.classList.remove(lt, at);\n            for (const t of this._triggerArray){\n                const e = z.getElementFromSelector(t);\n                e && !this._isShown(e) && this._addAriaAndCollapsedClass([\n                    t\n                ], !1);\n            }\n            this._isTransitioning = !0, this._element.style[t] = \"\", this._queueCallback(()=>{\n                this._isTransitioning = !1, this._element.classList.remove(ct), this._element.classList.add(lt), I.trigger(this._element, \"hidden.bs.collapse\");\n            }, this._element, !0);\n        }\n        _isShown(t = this._element) {\n            return t.classList.contains(at);\n        }\n        _configAfterMerge(t) {\n            return t.toggle = Boolean(t.toggle), t.parent = s(t.parent), t;\n        }\n        _getDimension() {\n            return this._element.classList.contains(\"collapse-horizontal\") ? \"width\" : \"height\";\n        }\n        _initializeChildren() {\n            if (!this._config.parent) return;\n            const t = this._getFirstLevelChildren(ht);\n            for (const e of t){\n                const t = z.getElementFromSelector(e);\n                t && this._addAriaAndCollapsedClass([\n                    e\n                ], this._isShown(t));\n            }\n        }\n        _getFirstLevelChildren(t) {\n            const e = z.find(\":scope .collapse .collapse\", this._config.parent);\n            return z.find(t, this._config.parent).filter((t)=>!e.includes(t));\n        }\n        _addAriaAndCollapsedClass(t, e) {\n            if (t.length) for (const i of t)i.classList.toggle(\"collapsed\", !e), i.setAttribute(\"aria-expanded\", e);\n        }\n        static jQueryInterface(t) {\n            const e = {};\n            return \"string\" == typeof t && /show|hide/.test(t) && (e.toggle = !1), this.each(function() {\n                const i = ft.getOrCreateInstance(this, e);\n                if (\"string\" == typeof t) {\n                    if (void 0 === i[t]) throw new TypeError(`No method named \"${t}\"`);\n                    i[t]();\n                }\n            });\n        }\n    }\n    I.on(document, \"click.bs.collapse.data-api\", ht, function(t) {\n        (\"A\" === t.target.tagName || t.delegateTarget && \"A\" === t.delegateTarget.tagName) && t.preventDefault();\n        for (const t of z.getMultipleElementsFromSelector(this))ft.getOrCreateInstance(t, {\n            toggle: !1\n        }).toggle();\n    }), f(ft);\n    var pt = \"top\", mt = \"bottom\", gt = \"right\", _t = \"left\", bt = \"auto\", vt = [\n        pt,\n        mt,\n        gt,\n        _t\n    ], yt = \"start\", wt = \"end\", At = \"clippingParents\", Et = \"viewport\", Tt = \"popper\", Ct = \"reference\", Ot = vt.reduce(function(t, e) {\n        return t.concat([\n            e + \"-\" + yt,\n            e + \"-\" + wt\n        ]);\n    }, []), xt = [].concat(vt, [\n        bt\n    ]).reduce(function(t, e) {\n        return t.concat([\n            e,\n            e + \"-\" + yt,\n            e + \"-\" + wt\n        ]);\n    }, []), kt = \"beforeRead\", Lt = \"read\", St = \"afterRead\", Dt = \"beforeMain\", It = \"main\", Nt = \"afterMain\", Pt = \"beforeWrite\", jt = \"write\", Mt = \"afterWrite\", Ft = [\n        kt,\n        Lt,\n        St,\n        Dt,\n        It,\n        Nt,\n        Pt,\n        jt,\n        Mt\n    ];\n    function Ht(t) {\n        return t ? (t.nodeName || \"\").toLowerCase() : null;\n    }\n    function $t(t) {\n        if (null == t) return window;\n        if (\"[object Window]\" !== t.toString()) {\n            var e = t.ownerDocument;\n            return e && e.defaultView || window;\n        }\n        return t;\n    }\n    function Wt(t) {\n        return t instanceof $t(t).Element || t instanceof Element;\n    }\n    function Bt(t) {\n        return t instanceof $t(t).HTMLElement || t instanceof HTMLElement;\n    }\n    function zt(t) {\n        return \"undefined\" != typeof ShadowRoot && (t instanceof $t(t).ShadowRoot || t instanceof ShadowRoot);\n    }\n    const Rt = {\n        name: \"applyStyles\",\n        enabled: !0,\n        phase: \"write\",\n        fn: function(t) {\n            var e = t.state;\n            Object.keys(e.elements).forEach(function(t) {\n                var i = e.styles[t] || {}, n = e.attributes[t] || {}, s = e.elements[t];\n                Bt(s) && Ht(s) && (Object.assign(s.style, i), Object.keys(n).forEach(function(t) {\n                    var e = n[t];\n                    !1 === e ? s.removeAttribute(t) : s.setAttribute(t, !0 === e ? \"\" : e);\n                }));\n            });\n        },\n        effect: function(t) {\n            var e = t.state, i = {\n                popper: {\n                    position: e.options.strategy,\n                    left: \"0\",\n                    top: \"0\",\n                    margin: \"0\"\n                },\n                arrow: {\n                    position: \"absolute\"\n                },\n                reference: {}\n            };\n            return Object.assign(e.elements.popper.style, i.popper), e.styles = i, e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow), function() {\n                Object.keys(e.elements).forEach(function(t) {\n                    var n = e.elements[t], s = e.attributes[t] || {}, o = Object.keys(e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]).reduce(function(t, e) {\n                        return t[e] = \"\", t;\n                    }, {});\n                    Bt(n) && Ht(n) && (Object.assign(n.style, o), Object.keys(s).forEach(function(t) {\n                        n.removeAttribute(t);\n                    }));\n                });\n            };\n        },\n        requires: [\n            \"computeStyles\"\n        ]\n    };\n    function qt(t) {\n        return t.split(\"-\")[0];\n    }\n    var Vt = Math.max, Kt = Math.min, Qt = Math.round;\n    function Xt() {\n        var t = navigator.userAgentData;\n        return null != t && t.brands ? t.brands.map(function(t) {\n            return t.brand + \"/\" + t.version;\n        }).join(\" \") : navigator.userAgent;\n    }\n    function Yt() {\n        return !/^((?!chrome|android).)*safari/i.test(Xt());\n    }\n    function Ut(t, e, i) {\n        void 0 === e && (e = !1), void 0 === i && (i = !1);\n        var n = t.getBoundingClientRect(), s = 1, o = 1;\n        e && Bt(t) && (s = t.offsetWidth > 0 && Qt(n.width) / t.offsetWidth || 1, o = t.offsetHeight > 0 && Qt(n.height) / t.offsetHeight || 1);\n        var r = (Wt(t) ? $t(t) : window).visualViewport, a = !Yt() && i, l = (n.left + (a && r ? r.offsetLeft : 0)) / s, c = (n.top + (a && r ? r.offsetTop : 0)) / o, h = n.width / s, d = n.height / o;\n        return {\n            width: h,\n            height: d,\n            top: c,\n            right: l + h,\n            bottom: c + d,\n            left: l,\n            x: l,\n            y: c\n        };\n    }\n    function Gt(t) {\n        var e = Ut(t), i = t.offsetWidth, n = t.offsetHeight;\n        return Math.abs(e.width - i) <= 1 && (i = e.width), Math.abs(e.height - n) <= 1 && (n = e.height), {\n            x: t.offsetLeft,\n            y: t.offsetTop,\n            width: i,\n            height: n\n        };\n    }\n    function Jt(t, e) {\n        var i = e.getRootNode && e.getRootNode();\n        if (t.contains(e)) return !0;\n        if (i && zt(i)) {\n            var n = e;\n            do {\n                if (n && t.isSameNode(n)) return !0;\n                n = n.parentNode || n.host;\n            }while (n);\n        }\n        return !1;\n    }\n    function Zt(t) {\n        return $t(t).getComputedStyle(t);\n    }\n    function te(t) {\n        return [\n            \"table\",\n            \"td\",\n            \"th\"\n        ].indexOf(Ht(t)) >= 0;\n    }\n    function ee(t) {\n        return ((Wt(t) ? t.ownerDocument : t.document) || window.document).documentElement;\n    }\n    function ie(t) {\n        return \"html\" === Ht(t) ? t : t.assignedSlot || t.parentNode || (zt(t) ? t.host : null) || ee(t);\n    }\n    function ne(t) {\n        return Bt(t) && \"fixed\" !== Zt(t).position ? t.offsetParent : null;\n    }\n    function se(t) {\n        for(var e = $t(t), i = ne(t); i && te(i) && \"static\" === Zt(i).position;)i = ne(i);\n        return i && (\"html\" === Ht(i) || \"body\" === Ht(i) && \"static\" === Zt(i).position) ? e : i || function(t) {\n            var e = /firefox/i.test(Xt());\n            if (/Trident/i.test(Xt()) && Bt(t) && \"fixed\" === Zt(t).position) return null;\n            var i = ie(t);\n            for(zt(i) && (i = i.host); Bt(i) && [\n                \"html\",\n                \"body\"\n            ].indexOf(Ht(i)) < 0;){\n                var n = Zt(i);\n                if (\"none\" !== n.transform || \"none\" !== n.perspective || \"paint\" === n.contain || -1 !== [\n                    \"transform\",\n                    \"perspective\"\n                ].indexOf(n.willChange) || e && \"filter\" === n.willChange || e && n.filter && \"none\" !== n.filter) return i;\n                i = i.parentNode;\n            }\n            return null;\n        }(t) || e;\n    }\n    function oe(t) {\n        return [\n            \"top\",\n            \"bottom\"\n        ].indexOf(t) >= 0 ? \"x\" : \"y\";\n    }\n    function re(t, e, i) {\n        return Vt(t, Kt(e, i));\n    }\n    function ae(t) {\n        return Object.assign({}, {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }, t);\n    }\n    function le(t, e) {\n        return e.reduce(function(e, i) {\n            return e[i] = t, e;\n        }, {});\n    }\n    const ce = {\n        name: \"arrow\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e, i = t.state, n = t.name, s = t.options, o = i.elements.arrow, r = i.modifiersData.popperOffsets, a = qt(i.placement), l = oe(a), c = [\n                _t,\n                gt\n            ].indexOf(a) >= 0 ? \"height\" : \"width\";\n            if (o && r) {\n                var h = function(t, e) {\n                    return ae(\"number\" != typeof (t = \"function\" == typeof t ? t(Object.assign({}, e.rects, {\n                        placement: e.placement\n                    })) : t) ? t : le(t, vt));\n                }(s.padding, i), d = Gt(o), u = \"y\" === l ? pt : _t, f = \"y\" === l ? mt : gt, p = i.rects.reference[c] + i.rects.reference[l] - r[l] - i.rects.popper[c], m = r[l] - i.rects.reference[l], g = se(o), _ = g ? \"y\" === l ? g.clientHeight || 0 : g.clientWidth || 0 : 0, b = p / 2 - m / 2, v = h[u], y = _ - d[c] - h[f], w = _ / 2 - d[c] / 2 + b, A = re(v, w, y), E = l;\n                i.modifiersData[n] = ((e = {})[E] = A, e.centerOffset = A - w, e);\n            }\n        },\n        effect: function(t) {\n            var e = t.state, i = t.options.element, n = void 0 === i ? \"[data-popper-arrow]\" : i;\n            null != n && (\"string\" != typeof n || (n = e.elements.popper.querySelector(n))) && Jt(e.elements.popper, n) && (e.elements.arrow = n);\n        },\n        requires: [\n            \"popperOffsets\"\n        ],\n        requiresIfExists: [\n            \"preventOverflow\"\n        ]\n    };\n    function he(t) {\n        return t.split(\"-\")[1];\n    }\n    var de = {\n        top: \"auto\",\n        right: \"auto\",\n        bottom: \"auto\",\n        left: \"auto\"\n    };\n    function ue(t) {\n        var e, i = t.popper, n = t.popperRect, s = t.placement, o = t.variation, r = t.offsets, a = t.position, l = t.gpuAcceleration, c = t.adaptive, h = t.roundOffsets, d = t.isFixed, u = r.x, f = void 0 === u ? 0 : u, p = r.y, m = void 0 === p ? 0 : p, g = \"function\" == typeof h ? h({\n            x: f,\n            y: m\n        }) : {\n            x: f,\n            y: m\n        };\n        f = g.x, m = g.y;\n        var _ = r.hasOwnProperty(\"x\"), b = r.hasOwnProperty(\"y\"), v = _t, y = pt, w = window;\n        if (c) {\n            var A = se(i), E = \"clientHeight\", T = \"clientWidth\";\n            A === $t(i) && \"static\" !== Zt(A = ee(i)).position && \"absolute\" === a && (E = \"scrollHeight\", T = \"scrollWidth\"), (s === pt || (s === _t || s === gt) && o === wt) && (y = mt, m -= (d && A === w && w.visualViewport ? w.visualViewport.height : A[E]) - n.height, m *= l ? 1 : -1), s !== _t && (s !== pt && s !== mt || o !== wt) || (v = gt, f -= (d && A === w && w.visualViewport ? w.visualViewport.width : A[T]) - n.width, f *= l ? 1 : -1);\n        }\n        var C, O = Object.assign({\n            position: a\n        }, c && de), x = !0 === h ? function(t) {\n            var e = t.x, i = t.y, n = window.devicePixelRatio || 1;\n            return {\n                x: Qt(e * n) / n || 0,\n                y: Qt(i * n) / n || 0\n            };\n        }({\n            x: f,\n            y: m\n        }) : {\n            x: f,\n            y: m\n        };\n        return f = x.x, m = x.y, l ? Object.assign({}, O, ((C = {})[y] = b ? \"0\" : \"\", C[v] = _ ? \"0\" : \"\", C.transform = (w.devicePixelRatio || 1) <= 1 ? \"translate(\" + f + \"px, \" + m + \"px)\" : \"translate3d(\" + f + \"px, \" + m + \"px, 0)\", C)) : Object.assign({}, O, ((e = {})[y] = b ? m + \"px\" : \"\", e[v] = _ ? f + \"px\" : \"\", e.transform = \"\", e));\n    }\n    const fe = {\n        name: \"computeStyles\",\n        enabled: !0,\n        phase: \"beforeWrite\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = i.gpuAcceleration, s = void 0 === n || n, o = i.adaptive, r = void 0 === o || o, a = i.roundOffsets, l = void 0 === a || a, c = {\n                placement: qt(e.placement),\n                variation: he(e.placement),\n                popper: e.elements.popper,\n                popperRect: e.rects.popper,\n                gpuAcceleration: s,\n                isFixed: \"fixed\" === e.options.strategy\n            };\n            null != e.modifiersData.popperOffsets && (e.styles.popper = Object.assign({}, e.styles.popper, ue(Object.assign({}, c, {\n                offsets: e.modifiersData.popperOffsets,\n                position: e.options.strategy,\n                adaptive: r,\n                roundOffsets: l\n            })))), null != e.modifiersData.arrow && (e.styles.arrow = Object.assign({}, e.styles.arrow, ue(Object.assign({}, c, {\n                offsets: e.modifiersData.arrow,\n                position: \"absolute\",\n                adaptive: !1,\n                roundOffsets: l\n            })))), e.attributes.popper = Object.assign({}, e.attributes.popper, {\n                \"data-popper-placement\": e.placement\n            });\n        },\n        data: {}\n    };\n    var pe = {\n        passive: !0\n    };\n    const me = {\n        name: \"eventListeners\",\n        enabled: !0,\n        phase: \"write\",\n        fn: function() {},\n        effect: function(t) {\n            var e = t.state, i = t.instance, n = t.options, s = n.scroll, o = void 0 === s || s, r = n.resize, a = void 0 === r || r, l = $t(e.elements.popper), c = [].concat(e.scrollParents.reference, e.scrollParents.popper);\n            return o && c.forEach(function(t) {\n                t.addEventListener(\"scroll\", i.update, pe);\n            }), a && l.addEventListener(\"resize\", i.update, pe), function() {\n                o && c.forEach(function(t) {\n                    t.removeEventListener(\"scroll\", i.update, pe);\n                }), a && l.removeEventListener(\"resize\", i.update, pe);\n            };\n        },\n        data: {}\n    };\n    var ge = {\n        left: \"right\",\n        right: \"left\",\n        bottom: \"top\",\n        top: \"bottom\"\n    };\n    function _e(t) {\n        return t.replace(/left|right|bottom|top/g, function(t) {\n            return ge[t];\n        });\n    }\n    var be = {\n        start: \"end\",\n        end: \"start\"\n    };\n    function ve(t) {\n        return t.replace(/start|end/g, function(t) {\n            return be[t];\n        });\n    }\n    function ye(t) {\n        var e = $t(t);\n        return {\n            scrollLeft: e.pageXOffset,\n            scrollTop: e.pageYOffset\n        };\n    }\n    function we(t) {\n        return Ut(ee(t)).left + ye(t).scrollLeft;\n    }\n    function Ae(t) {\n        var e = Zt(t), i = e.overflow, n = e.overflowX, s = e.overflowY;\n        return /auto|scroll|overlay|hidden/.test(i + s + n);\n    }\n    function Ee(t) {\n        return [\n            \"html\",\n            \"body\",\n            \"#document\"\n        ].indexOf(Ht(t)) >= 0 ? t.ownerDocument.body : Bt(t) && Ae(t) ? t : Ee(ie(t));\n    }\n    function Te(t, e) {\n        var i;\n        void 0 === e && (e = []);\n        var n = Ee(t), s = n === (null == (i = t.ownerDocument) ? void 0 : i.body), o = $t(n), r = s ? [\n            o\n        ].concat(o.visualViewport || [], Ae(n) ? n : []) : n, a = e.concat(r);\n        return s ? a : a.concat(Te(ie(r)));\n    }\n    function Ce(t) {\n        return Object.assign({}, t, {\n            left: t.x,\n            top: t.y,\n            right: t.x + t.width,\n            bottom: t.y + t.height\n        });\n    }\n    function Oe(t, e, i) {\n        return e === Et ? Ce(function(t, e) {\n            var i = $t(t), n = ee(t), s = i.visualViewport, o = n.clientWidth, r = n.clientHeight, a = 0, l = 0;\n            if (s) {\n                o = s.width, r = s.height;\n                var c = Yt();\n                (c || !c && \"fixed\" === e) && (a = s.offsetLeft, l = s.offsetTop);\n            }\n            return {\n                width: o,\n                height: r,\n                x: a + we(t),\n                y: l\n            };\n        }(t, i)) : Wt(e) ? function(t, e) {\n            var i = Ut(t, !1, \"fixed\" === e);\n            return i.top = i.top + t.clientTop, i.left = i.left + t.clientLeft, i.bottom = i.top + t.clientHeight, i.right = i.left + t.clientWidth, i.width = t.clientWidth, i.height = t.clientHeight, i.x = i.left, i.y = i.top, i;\n        }(e, i) : Ce(function(t) {\n            var e, i = ee(t), n = ye(t), s = null == (e = t.ownerDocument) ? void 0 : e.body, o = Vt(i.scrollWidth, i.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0), r = Vt(i.scrollHeight, i.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0), a = -n.scrollLeft + we(t), l = -n.scrollTop;\n            return \"rtl\" === Zt(s || i).direction && (a += Vt(i.clientWidth, s ? s.clientWidth : 0) - o), {\n                width: o,\n                height: r,\n                x: a,\n                y: l\n            };\n        }(ee(t)));\n    }\n    function xe(t) {\n        var e, i = t.reference, n = t.element, s = t.placement, o = s ? qt(s) : null, r = s ? he(s) : null, a = i.x + i.width / 2 - n.width / 2, l = i.y + i.height / 2 - n.height / 2;\n        switch(o){\n            case pt:\n                e = {\n                    x: a,\n                    y: i.y - n.height\n                };\n                break;\n            case mt:\n                e = {\n                    x: a,\n                    y: i.y + i.height\n                };\n                break;\n            case gt:\n                e = {\n                    x: i.x + i.width,\n                    y: l\n                };\n                break;\n            case _t:\n                e = {\n                    x: i.x - n.width,\n                    y: l\n                };\n                break;\n            default:\n                e = {\n                    x: i.x,\n                    y: i.y\n                };\n        }\n        var c = o ? oe(o) : null;\n        if (null != c) {\n            var h = \"y\" === c ? \"height\" : \"width\";\n            switch(r){\n                case yt:\n                    e[c] = e[c] - (i[h] / 2 - n[h] / 2);\n                    break;\n                case wt:\n                    e[c] = e[c] + (i[h] / 2 - n[h] / 2);\n            }\n        }\n        return e;\n    }\n    function ke(t, e) {\n        void 0 === e && (e = {});\n        var i = e, n = i.placement, s = void 0 === n ? t.placement : n, o = i.strategy, r = void 0 === o ? t.strategy : o, a = i.boundary, l = void 0 === a ? At : a, c = i.rootBoundary, h = void 0 === c ? Et : c, d = i.elementContext, u = void 0 === d ? Tt : d, f = i.altBoundary, p = void 0 !== f && f, m = i.padding, g = void 0 === m ? 0 : m, _ = ae(\"number\" != typeof g ? g : le(g, vt)), b = u === Tt ? Ct : Tt, v = t.rects.popper, y = t.elements[p ? b : u], w = function(t, e, i, n) {\n            var s = \"clippingParents\" === e ? function(t) {\n                var e = Te(ie(t)), i = [\n                    \"absolute\",\n                    \"fixed\"\n                ].indexOf(Zt(t).position) >= 0 && Bt(t) ? se(t) : t;\n                return Wt(i) ? e.filter(function(t) {\n                    return Wt(t) && Jt(t, i) && \"body\" !== Ht(t);\n                }) : [];\n            }(t) : [].concat(e), o = [].concat(s, [\n                i\n            ]), r = o[0], a = o.reduce(function(e, i) {\n                var s = Oe(t, i, n);\n                return e.top = Vt(s.top, e.top), e.right = Kt(s.right, e.right), e.bottom = Kt(s.bottom, e.bottom), e.left = Vt(s.left, e.left), e;\n            }, Oe(t, r, n));\n            return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;\n        }(Wt(y) ? y : y.contextElement || ee(t.elements.popper), l, h, r), A = Ut(t.elements.reference), E = xe({\n            reference: A,\n            element: v,\n            strategy: \"absolute\",\n            placement: s\n        }), T = Ce(Object.assign({}, v, E)), C = u === Tt ? T : A, O = {\n            top: w.top - C.top + _.top,\n            bottom: C.bottom - w.bottom + _.bottom,\n            left: w.left - C.left + _.left,\n            right: C.right - w.right + _.right\n        }, x = t.modifiersData.offset;\n        if (u === Tt && x) {\n            var k = x[s];\n            Object.keys(O).forEach(function(t) {\n                var e = [\n                    gt,\n                    mt\n                ].indexOf(t) >= 0 ? 1 : -1, i = [\n                    pt,\n                    mt\n                ].indexOf(t) >= 0 ? \"y\" : \"x\";\n                O[t] += k[i] * e;\n            });\n        }\n        return O;\n    }\n    function Le(t, e) {\n        void 0 === e && (e = {});\n        var i = e, n = i.placement, s = i.boundary, o = i.rootBoundary, r = i.padding, a = i.flipVariations, l = i.allowedAutoPlacements, c = void 0 === l ? xt : l, h = he(n), d = h ? a ? Ot : Ot.filter(function(t) {\n            return he(t) === h;\n        }) : vt, u = d.filter(function(t) {\n            return c.indexOf(t) >= 0;\n        });\n        0 === u.length && (u = d);\n        var f = u.reduce(function(e, i) {\n            return e[i] = ke(t, {\n                placement: i,\n                boundary: s,\n                rootBoundary: o,\n                padding: r\n            })[qt(i)], e;\n        }, {});\n        return Object.keys(f).sort(function(t, e) {\n            return f[t] - f[e];\n        });\n    }\n    const Se = {\n        name: \"flip\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name;\n            if (!e.modifiersData[n]._skip) {\n                for(var s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 === r || r, l = i.fallbackPlacements, c = i.padding, h = i.boundary, d = i.rootBoundary, u = i.altBoundary, f = i.flipVariations, p = void 0 === f || f, m = i.allowedAutoPlacements, g = e.options.placement, _ = qt(g), b = l || (_ !== g && p ? function(t) {\n                    if (qt(t) === bt) return [];\n                    var e = _e(t);\n                    return [\n                        ve(t),\n                        e,\n                        ve(e)\n                    ];\n                }(g) : [\n                    _e(g)\n                ]), v = [\n                    g\n                ].concat(b).reduce(function(t, i) {\n                    return t.concat(qt(i) === bt ? Le(e, {\n                        placement: i,\n                        boundary: h,\n                        rootBoundary: d,\n                        padding: c,\n                        flipVariations: p,\n                        allowedAutoPlacements: m\n                    }) : i);\n                }, []), y = e.rects.reference, w = e.rects.popper, A = new Map, E = !0, T = v[0], C = 0; C < v.length; C++){\n                    var O = v[C], x = qt(O), k = he(O) === yt, L = [\n                        pt,\n                        mt\n                    ].indexOf(x) >= 0, S = L ? \"width\" : \"height\", D = ke(e, {\n                        placement: O,\n                        boundary: h,\n                        rootBoundary: d,\n                        altBoundary: u,\n                        padding: c\n                    }), I = L ? k ? gt : _t : k ? mt : pt;\n                    y[S] > w[S] && (I = _e(I));\n                    var N = _e(I), P = [];\n                    if (o && P.push(D[x] <= 0), a && P.push(D[I] <= 0, D[N] <= 0), P.every(function(t) {\n                        return t;\n                    })) {\n                        T = O, E = !1;\n                        break;\n                    }\n                    A.set(O, P);\n                }\n                if (E) for(var j = function(t) {\n                    var e = v.find(function(e) {\n                        var i = A.get(e);\n                        if (i) return i.slice(0, t).every(function(t) {\n                            return t;\n                        });\n                    });\n                    if (e) return T = e, \"break\";\n                }, M = p ? 3 : 1; M > 0 && \"break\" !== j(M); M--);\n                e.placement !== T && (e.modifiersData[n]._skip = !0, e.placement = T, e.reset = !0);\n            }\n        },\n        requiresIfExists: [\n            \"offset\"\n        ],\n        data: {\n            _skip: !1\n        }\n    };\n    function De(t, e, i) {\n        return void 0 === i && (i = {\n            x: 0,\n            y: 0\n        }), {\n            top: t.top - e.height - i.y,\n            right: t.right - e.width + i.x,\n            bottom: t.bottom - e.height + i.y,\n            left: t.left - e.width - i.x\n        };\n    }\n    function Ie(t) {\n        return [\n            pt,\n            gt,\n            mt,\n            _t\n        ].some(function(e) {\n            return t[e] >= 0;\n        });\n    }\n    const Ne = {\n        name: \"hide\",\n        enabled: !0,\n        phase: \"main\",\n        requiresIfExists: [\n            \"preventOverflow\"\n        ],\n        fn: function(t) {\n            var e = t.state, i = t.name, n = e.rects.reference, s = e.rects.popper, o = e.modifiersData.preventOverflow, r = ke(e, {\n                elementContext: \"reference\"\n            }), a = ke(e, {\n                altBoundary: !0\n            }), l = De(r, n), c = De(a, s, o), h = Ie(l), d = Ie(c);\n            e.modifiersData[i] = {\n                referenceClippingOffsets: l,\n                popperEscapeOffsets: c,\n                isReferenceHidden: h,\n                hasPopperEscaped: d\n            }, e.attributes.popper = Object.assign({}, e.attributes.popper, {\n                \"data-popper-reference-hidden\": h,\n                \"data-popper-escaped\": d\n            });\n        }\n    }, Pe = {\n        name: \"offset\",\n        enabled: !0,\n        phase: \"main\",\n        requires: [\n            \"popperOffsets\"\n        ],\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name, s = i.offset, o = void 0 === s ? [\n                0,\n                0\n            ] : s, r = xt.reduce(function(t, i) {\n                return t[i] = function(t, e, i) {\n                    var n = qt(t), s = [\n                        _t,\n                        pt\n                    ].indexOf(n) >= 0 ? -1 : 1, o = \"function\" == typeof i ? i(Object.assign({}, e, {\n                        placement: t\n                    })) : i, r = o[0], a = o[1];\n                    return r = r || 0, a = (a || 0) * s, [\n                        _t,\n                        gt\n                    ].indexOf(n) >= 0 ? {\n                        x: a,\n                        y: r\n                    } : {\n                        x: r,\n                        y: a\n                    };\n                }(i, e.rects, o), t;\n            }, {}), a = r[e.placement], l = a.x, c = a.y;\n            null != e.modifiersData.popperOffsets && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c), e.modifiersData[n] = r;\n        }\n    }, je = {\n        name: \"popperOffsets\",\n        enabled: !0,\n        phase: \"read\",\n        fn: function(t) {\n            var e = t.state, i = t.name;\n            e.modifiersData[i] = xe({\n                reference: e.rects.reference,\n                element: e.rects.popper,\n                strategy: \"absolute\",\n                placement: e.placement\n            });\n        },\n        data: {}\n    }, Me = {\n        name: \"preventOverflow\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name, s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 !== r && r, l = i.boundary, c = i.rootBoundary, h = i.altBoundary, d = i.padding, u = i.tether, f = void 0 === u || u, p = i.tetherOffset, m = void 0 === p ? 0 : p, g = ke(e, {\n                boundary: l,\n                rootBoundary: c,\n                padding: d,\n                altBoundary: h\n            }), _ = qt(e.placement), b = he(e.placement), v = !b, y = oe(_), w = \"x\" === y ? \"y\" : \"x\", A = e.modifiersData.popperOffsets, E = e.rects.reference, T = e.rects.popper, C = \"function\" == typeof m ? m(Object.assign({}, e.rects, {\n                placement: e.placement\n            })) : m, O = \"number\" == typeof C ? {\n                mainAxis: C,\n                altAxis: C\n            } : Object.assign({\n                mainAxis: 0,\n                altAxis: 0\n            }, C), x = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, k = {\n                x: 0,\n                y: 0\n            };\n            if (A) {\n                if (o) {\n                    var L, S = \"y\" === y ? pt : _t, D = \"y\" === y ? mt : gt, I = \"y\" === y ? \"height\" : \"width\", N = A[y], P = N + g[S], j = N - g[D], M = f ? -T[I] / 2 : 0, F = b === yt ? E[I] : T[I], H = b === yt ? -T[I] : -E[I], $ = e.elements.arrow, W = f && $ ? Gt($) : {\n                        width: 0,\n                        height: 0\n                    }, B = e.modifiersData[\"arrow#persistent\"] ? e.modifiersData[\"arrow#persistent\"].padding : {\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0\n                    }, z = B[S], R = B[D], q = re(0, E[I], W[I]), V = v ? E[I] / 2 - M - q - z - O.mainAxis : F - q - z - O.mainAxis, K = v ? -E[I] / 2 + M + q + R + O.mainAxis : H + q + R + O.mainAxis, Q = e.elements.arrow && se(e.elements.arrow), X = Q ? \"y\" === y ? Q.clientTop || 0 : Q.clientLeft || 0 : 0, Y = null != (L = null == x ? void 0 : x[y]) ? L : 0, U = N + K - Y, G = re(f ? Kt(P, N + V - Y - X) : P, N, f ? Vt(j, U) : j);\n                    A[y] = G, k[y] = G - N;\n                }\n                if (a) {\n                    var J, Z = \"x\" === y ? pt : _t, tt = \"x\" === y ? mt : gt, et = A[w], it = \"y\" === w ? \"height\" : \"width\", nt = et + g[Z], st = et - g[tt], ot = -1 !== [\n                        pt,\n                        _t\n                    ].indexOf(_), rt = null != (J = null == x ? void 0 : x[w]) ? J : 0, at = ot ? nt : et - E[it] - T[it] - rt + O.altAxis, lt = ot ? et + E[it] + T[it] - rt - O.altAxis : st, ct = f && ot ? function(t, e, i) {\n                        var n = re(t, e, i);\n                        return n > i ? i : n;\n                    }(at, et, lt) : re(f ? at : nt, et, f ? lt : st);\n                    A[w] = ct, k[w] = ct - et;\n                }\n                e.modifiersData[n] = k;\n            }\n        },\n        requiresIfExists: [\n            \"offset\"\n        ]\n    };\n    function Fe(t, e, i) {\n        void 0 === i && (i = !1);\n        var n, s, o = Bt(e), r = Bt(e) && function(t) {\n            var e = t.getBoundingClientRect(), i = Qt(e.width) / t.offsetWidth || 1, n = Qt(e.height) / t.offsetHeight || 1;\n            return 1 !== i || 1 !== n;\n        }(e), a = ee(e), l = Ut(t, r, i), c = {\n            scrollLeft: 0,\n            scrollTop: 0\n        }, h = {\n            x: 0,\n            y: 0\n        };\n        return (o || !o && !i) && ((\"body\" !== Ht(e) || Ae(a)) && (c = (n = e) !== $t(n) && Bt(n) ? {\n            scrollLeft: (s = n).scrollLeft,\n            scrollTop: s.scrollTop\n        } : ye(n)), Bt(e) ? ((h = Ut(e, !0)).x += e.clientLeft, h.y += e.clientTop) : a && (h.x = we(a))), {\n            x: l.left + c.scrollLeft - h.x,\n            y: l.top + c.scrollTop - h.y,\n            width: l.width,\n            height: l.height\n        };\n    }\n    function He(t) {\n        var e = new Map, i = new Set, n = [];\n        function s(t) {\n            i.add(t.name), [].concat(t.requires || [], t.requiresIfExists || []).forEach(function(t) {\n                if (!i.has(t)) {\n                    var n = e.get(t);\n                    n && s(n);\n                }\n            }), n.push(t);\n        }\n        return t.forEach(function(t) {\n            e.set(t.name, t);\n        }), t.forEach(function(t) {\n            i.has(t.name) || s(t);\n        }), n;\n    }\n    var $e = {\n        placement: \"bottom\",\n        modifiers: [],\n        strategy: \"absolute\"\n    };\n    function We() {\n        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];\n        return !e.some(function(t) {\n            return !(t && \"function\" == typeof t.getBoundingClientRect);\n        });\n    }\n    function Be(t) {\n        void 0 === t && (t = {});\n        var e = t, i = e.defaultModifiers, n = void 0 === i ? [] : i, s = e.defaultOptions, o = void 0 === s ? $e : s;\n        return function(t, e, i) {\n            void 0 === i && (i = o);\n            var s, r, a = {\n                placement: \"bottom\",\n                orderedModifiers: [],\n                options: Object.assign({}, $e, o),\n                modifiersData: {},\n                elements: {\n                    reference: t,\n                    popper: e\n                },\n                attributes: {},\n                styles: {}\n            }, l = [], c = !1, h = {\n                state: a,\n                setOptions: function(i) {\n                    var s = \"function\" == typeof i ? i(a.options) : i;\n                    d(), a.options = Object.assign({}, o, a.options, s), a.scrollParents = {\n                        reference: Wt(t) ? Te(t) : t.contextElement ? Te(t.contextElement) : [],\n                        popper: Te(e)\n                    };\n                    var r, c, u = function(t) {\n                        var e = He(t);\n                        return Ft.reduce(function(t, i) {\n                            return t.concat(e.filter(function(t) {\n                                return t.phase === i;\n                            }));\n                        }, []);\n                    }((r = [].concat(n, a.options.modifiers), c = r.reduce(function(t, e) {\n                        var i = t[e.name];\n                        return t[e.name] = i ? Object.assign({}, i, e, {\n                            options: Object.assign({}, i.options, e.options),\n                            data: Object.assign({}, i.data, e.data)\n                        }) : e, t;\n                    }, {}), Object.keys(c).map(function(t) {\n                        return c[t];\n                    })));\n                    return a.orderedModifiers = u.filter(function(t) {\n                        return t.enabled;\n                    }), a.orderedModifiers.forEach(function(t) {\n                        var e = t.name, i = t.options, n = void 0 === i ? {} : i, s = t.effect;\n                        if (\"function\" == typeof s) {\n                            var o = s({\n                                state: a,\n                                name: e,\n                                instance: h,\n                                options: n\n                            });\n                            l.push(o || function() {});\n                        }\n                    }), h.update();\n                },\n                forceUpdate: function() {\n                    if (!c) {\n                        var t = a.elements, e = t.reference, i = t.popper;\n                        if (We(e, i)) {\n                            a.rects = {\n                                reference: Fe(e, se(i), \"fixed\" === a.options.strategy),\n                                popper: Gt(i)\n                            }, a.reset = !1, a.placement = a.options.placement, a.orderedModifiers.forEach(function(t) {\n                                return a.modifiersData[t.name] = Object.assign({}, t.data);\n                            });\n                            for(var n = 0; n < a.orderedModifiers.length; n++)if (!0 !== a.reset) {\n                                var s = a.orderedModifiers[n], o = s.fn, r = s.options, l = void 0 === r ? {} : r, d = s.name;\n                                \"function\" == typeof o && (a = o({\n                                    state: a,\n                                    options: l,\n                                    name: d,\n                                    instance: h\n                                }) || a);\n                            } else a.reset = !1, n = -1;\n                        }\n                    }\n                },\n                update: (s = function() {\n                    return new Promise(function(t) {\n                        h.forceUpdate(), t(a);\n                    });\n                }, function() {\n                    return r || (r = new Promise(function(t) {\n                        Promise.resolve().then(function() {\n                            r = void 0, t(s());\n                        });\n                    })), r;\n                }),\n                destroy: function() {\n                    d(), c = !0;\n                }\n            };\n            if (!We(t, e)) return h;\n            function d() {\n                l.forEach(function(t) {\n                    return t();\n                }), l = [];\n            }\n            return h.setOptions(i).then(function(t) {\n                !c && i.onFirstUpdate && i.onFirstUpdate(t);\n            }), h;\n        };\n    }\n    var ze = Be(), Re = Be({\n        defaultModifiers: [\n            me,\n            je,\n            fe,\n            Rt\n        ]\n    }), qe = Be({\n        defaultModifiers: [\n            me,\n            je,\n            fe,\n            Rt,\n            Pe,\n            Se,\n            Me,\n            ce,\n            Ne\n        ]\n    });\n    const Ve = Object.freeze(Object.defineProperty({\n        __proto__: null,\n        afterMain: Nt,\n        afterRead: St,\n        afterWrite: Mt,\n        applyStyles: Rt,\n        arrow: ce,\n        auto: bt,\n        basePlacements: vt,\n        beforeMain: Dt,\n        beforeRead: kt,\n        beforeWrite: Pt,\n        bottom: mt,\n        clippingParents: At,\n        computeStyles: fe,\n        createPopper: qe,\n        createPopperBase: ze,\n        createPopperLite: Re,\n        detectOverflow: ke,\n        end: wt,\n        eventListeners: me,\n        flip: Se,\n        hide: Ne,\n        left: _t,\n        main: It,\n        modifierPhases: Ft,\n        offset: Pe,\n        placements: xt,\n        popper: Tt,\n        popperGenerator: Be,\n        popperOffsets: je,\n        preventOverflow: Me,\n        read: Lt,\n        reference: Ct,\n        right: gt,\n        start: yt,\n        top: pt,\n        variationPlacements: Ot,\n        viewport: Et,\n        write: jt\n    }, Symbol.toStringTag, {\n        value: \"Module\"\n    })), Ke = \"dropdown\", Qe = \"ArrowUp\", Xe = \"ArrowDown\", Ye = \"click.bs.dropdown.data-api\", Ue = \"keydown.bs.dropdown.data-api\", Ge = \"show\", Je = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)', Ze = `${Je}.show`, ti = \".dropdown-menu\", ei = u() ? \"top-end\" : \"top-start\", ii = u() ? \"top-start\" : \"top-end\", ni = u() ? \"bottom-end\" : \"bottom-start\", si = u() ? \"bottom-start\" : \"bottom-end\", oi = u() ? \"left-start\" : \"right-start\", ri = u() ? \"right-start\" : \"left-start\", ai = {\n        autoClose: !0,\n        boundary: \"clippingParents\",\n        display: \"dynamic\",\n        offset: [\n            0,\n            2\n        ],\n        popperConfig: null,\n        reference: \"toggle\"\n    }, li = {\n        autoClose: \"(boolean|string)\",\n        boundary: \"(string|element)\",\n        display: \"string\",\n        offset: \"(array|string|function)\",\n        popperConfig: \"(null|object|function)\",\n        reference: \"(string|element|object)\"\n    };\n    class ci extends W {\n        constructor(t, e){\n            super(t, e), this._popper = null, this._parent = this._element.parentNode, this._menu = z.next(this._element, ti)[0] || z.prev(this._element, ti)[0] || z.findOne(ti, this._parent), this._inNavbar = this._detectNavbar();\n        }\n        static get Default() {\n            return ai;\n        }\n        static get DefaultType() {\n            return li;\n        }\n        static get NAME() {\n            return Ke;\n        }\n        toggle() {\n            return this._isShown() ? this.hide() : this.show();\n        }\n        show() {\n            if (r(this._element) || this._isShown()) return;\n            const t = {\n                relatedTarget: this._element\n            };\n            if (!I.trigger(this._element, \"show.bs.dropdown\", t).defaultPrevented) {\n                if (this._createPopper(), \"ontouchstart\" in document.documentElement && !this._parent.closest(\".navbar-nav\")) for (const t of [].concat(...document.body.children))I.on(t, \"mouseover\", l);\n                this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.classList.add(Ge), this._element.classList.add(Ge), I.trigger(this._element, \"shown.bs.dropdown\", t);\n            }\n        }\n        hide() {\n            if (r(this._element) || !this._isShown()) return;\n            const t = {\n                relatedTarget: this._element\n            };\n            this._completeHide(t);\n        }\n        dispose() {\n            this._popper && this._popper.destroy(), super.dispose();\n        }\n        update() {\n            this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n        }\n        _completeHide(t) {\n            if (!I.trigger(this._element, \"hide.bs.dropdown\", t).defaultPrevented) {\n                if (\"ontouchstart\" in document.documentElement) for (const t of [].concat(...document.body.children))I.off(t, \"mouseover\", l);\n                this._popper && this._popper.destroy(), this._menu.classList.remove(Ge), this._element.classList.remove(Ge), this._element.setAttribute(\"aria-expanded\", \"false\"), H.removeDataAttribute(this._menu, \"popper\"), I.trigger(this._element, \"hidden.bs.dropdown\", t);\n            }\n        }\n        _getConfig(t) {\n            if (\"object\" == typeof (t = super._getConfig(t)).reference && !n(t.reference) && \"function\" != typeof t.reference.getBoundingClientRect) throw new TypeError(`${Ke.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n            return t;\n        }\n        _createPopper() {\n            if (void 0 === Ve) throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n            let t = this._element;\n            \"parent\" === this._config.reference ? t = this._parent : n(this._config.reference) ? t = s(this._config.reference) : \"object\" == typeof this._config.reference && (t = this._config.reference);\n            const e = this._getPopperConfig();\n            this._popper = qe(t, this._menu, e);\n        }\n        _isShown() {\n            return this._menu.classList.contains(Ge);\n        }\n        _getPlacement() {\n            const t = this._parent;\n            if (t.classList.contains(\"dropend\")) return oi;\n            if (t.classList.contains(\"dropstart\")) return ri;\n            if (t.classList.contains(\"dropup-center\")) return \"top\";\n            if (t.classList.contains(\"dropdown-center\")) return \"bottom\";\n            const e = \"end\" === getComputedStyle(this._menu).getPropertyValue(\"--bs-position\").trim();\n            return t.classList.contains(\"dropup\") ? e ? ii : ei : e ? si : ni;\n        }\n        _detectNavbar() {\n            return null !== this._element.closest(\".navbar\");\n        }\n        _getOffset() {\n            const { offset: t } = this._config;\n            return \"string\" == typeof t ? t.split(\",\").map((t)=>Number.parseInt(t, 10)) : \"function\" == typeof t ? (e)=>t(e, this._element) : t;\n        }\n        _getPopperConfig() {\n            const t = {\n                placement: this._getPlacement(),\n                modifiers: [\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    }\n                ]\n            };\n            return (this._inNavbar || \"static\" === this._config.display) && (H.setDataAttribute(this._menu, \"popper\", \"static\"), t.modifiers = [\n                {\n                    name: \"applyStyles\",\n                    enabled: !1\n                }\n            ]), {\n                ...t,\n                ...p(this._config.popperConfig, [\n                    t\n                ])\n            };\n        }\n        _selectMenuItem({ key: t, target: e }) {\n            const i = z.find(\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\", this._menu).filter((t)=>o(t));\n            i.length && g(i, e, t === Xe, !i.includes(e)).focus();\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = ci.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError(`No method named \"${t}\"`);\n                    e[t]();\n                }\n            });\n        }\n        static clearMenus(t) {\n            if (2 === t.button || \"keyup\" === t.type && \"Tab\" !== t.key) return;\n            const e = z.find(Ze);\n            for (const i of e){\n                const e = ci.getInstance(i);\n                if (!e || !1 === e._config.autoClose) continue;\n                const n = t.composedPath(), s = n.includes(e._menu);\n                if (n.includes(e._element) || \"inside\" === e._config.autoClose && !s || \"outside\" === e._config.autoClose && s) continue;\n                if (e._menu.contains(t.target) && (\"keyup\" === t.type && \"Tab\" === t.key || /input|select|option|textarea|form/i.test(t.target.tagName))) continue;\n                const o = {\n                    relatedTarget: e._element\n                };\n                \"click\" === t.type && (o.clickEvent = t), e._completeHide(o);\n            }\n        }\n        static dataApiKeydownHandler(t) {\n            const e = /input|textarea/i.test(t.target.tagName), i = \"Escape\" === t.key, n = [\n                Qe,\n                Xe\n            ].includes(t.key);\n            if (!n && !i) return;\n            if (e && !i) return;\n            t.preventDefault();\n            const s = this.matches(Je) ? this : z.prev(this, Je)[0] || z.next(this, Je)[0] || z.findOne(Je, t.delegateTarget.parentNode), o = ci.getOrCreateInstance(s);\n            if (n) return t.stopPropagation(), o.show(), void o._selectMenuItem(t);\n            o._isShown() && (t.stopPropagation(), o.hide(), s.focus());\n        }\n    }\n    I.on(document, Ue, Je, ci.dataApiKeydownHandler), I.on(document, Ue, ti, ci.dataApiKeydownHandler), I.on(document, Ye, ci.clearMenus), I.on(document, \"keyup.bs.dropdown.data-api\", ci.clearMenus), I.on(document, Ye, Je, function(t) {\n        t.preventDefault(), ci.getOrCreateInstance(this).toggle();\n    }), f(ci);\n    const hi = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", di = \".sticky-top\", ui = \"padding-right\", fi = \"margin-right\";\n    class pi {\n        constructor(){\n            this._element = document.body;\n        }\n        getWidth() {\n            const t = document.documentElement.clientWidth;\n            return Math.abs(window.innerWidth - t);\n        }\n        hide() {\n            const t = this.getWidth();\n            this._disableOverFlow(), this._setElementAttributes(this._element, ui, (e)=>e + t), this._setElementAttributes(hi, ui, (e)=>e + t), this._setElementAttributes(di, fi, (e)=>e - t);\n        }\n        reset() {\n            this._resetElementAttributes(this._element, \"overflow\"), this._resetElementAttributes(this._element, ui), this._resetElementAttributes(hi, ui), this._resetElementAttributes(di, fi);\n        }\n        isOverflowing() {\n            return this.getWidth() > 0;\n        }\n        _disableOverFlow() {\n            this._saveInitialAttribute(this._element, \"overflow\"), this._element.style.overflow = \"hidden\";\n        }\n        _setElementAttributes(t, e, i) {\n            const n = this.getWidth();\n            this._applyManipulationCallback(t, (t)=>{\n                if (t !== this._element && window.innerWidth > t.clientWidth + n) return;\n                this._saveInitialAttribute(t, e);\n                const s = window.getComputedStyle(t).getPropertyValue(e);\n                t.style.setProperty(e, `${i(Number.parseFloat(s))}px`);\n            });\n        }\n        _saveInitialAttribute(t, e) {\n            const i = t.style.getPropertyValue(e);\n            i && H.setDataAttribute(t, e, i);\n        }\n        _resetElementAttributes(t, e) {\n            this._applyManipulationCallback(t, (t)=>{\n                const i = H.getDataAttribute(t, e);\n                null !== i ? (H.removeDataAttribute(t, e), t.style.setProperty(e, i)) : t.style.removeProperty(e);\n            });\n        }\n        _applyManipulationCallback(t, e) {\n            if (n(t)) e(t);\n            else for (const i of z.find(t, this._element))e(i);\n        }\n    }\n    const mi = \"show\", gi = \"mousedown.bs.backdrop\", _i = {\n        className: \"modal-backdrop\",\n        clickCallback: null,\n        isAnimated: !1,\n        isVisible: !0,\n        rootElement: \"body\"\n    }, bi = {\n        className: \"string\",\n        clickCallback: \"(function|null)\",\n        isAnimated: \"boolean\",\n        isVisible: \"boolean\",\n        rootElement: \"(element|string)\"\n    };\n    class vi extends $ {\n        constructor(t){\n            super(), this._config = this._getConfig(t), this._isAppended = !1, this._element = null;\n        }\n        static get Default() {\n            return _i;\n        }\n        static get DefaultType() {\n            return bi;\n        }\n        static get NAME() {\n            return \"backdrop\";\n        }\n        show(t) {\n            if (!this._config.isVisible) return void p(t);\n            this._append();\n            const e = this._getElement();\n            this._config.isAnimated && c(e), e.classList.add(mi), this._emulateAnimation(()=>{\n                p(t);\n            });\n        }\n        hide(t) {\n            this._config.isVisible ? (this._getElement().classList.remove(mi), this._emulateAnimation(()=>{\n                this.dispose(), p(t);\n            })) : p(t);\n        }\n        dispose() {\n            this._isAppended && (I.off(this._element, gi), this._element.remove(), this._isAppended = !1);\n        }\n        _getElement() {\n            if (!this._element) {\n                const t = document.createElement(\"div\");\n                t.className = this._config.className, this._config.isAnimated && t.classList.add(\"fade\"), this._element = t;\n            }\n            return this._element;\n        }\n        _configAfterMerge(t) {\n            return t.rootElement = s(t.rootElement), t;\n        }\n        _append() {\n            if (this._isAppended) return;\n            const t = this._getElement();\n            this._config.rootElement.append(t), I.on(t, gi, ()=>{\n                p(this._config.clickCallback);\n            }), this._isAppended = !0;\n        }\n        _emulateAnimation(t) {\n            m(t, this._getElement(), this._config.isAnimated);\n        }\n    }\n    const yi = \".bs.focustrap\", wi = \"backward\", Ai = {\n        autofocus: !0,\n        trapElement: null\n    }, Ei = {\n        autofocus: \"boolean\",\n        trapElement: \"element\"\n    };\n    class Ti extends $ {\n        constructor(t){\n            super(), this._config = this._getConfig(t), this._isActive = !1, this._lastTabNavDirection = null;\n        }\n        static get Default() {\n            return Ai;\n        }\n        static get DefaultType() {\n            return Ei;\n        }\n        static get NAME() {\n            return \"focustrap\";\n        }\n        activate() {\n            this._isActive || (this._config.autofocus && this._config.trapElement.focus(), I.off(document, yi), I.on(document, \"focusin.bs.focustrap\", (t)=>this._handleFocusin(t)), I.on(document, \"keydown.tab.bs.focustrap\", (t)=>this._handleKeydown(t)), this._isActive = !0);\n        }\n        deactivate() {\n            this._isActive && (this._isActive = !1, I.off(document, yi));\n        }\n        _handleFocusin(t) {\n            const { trapElement: e } = this._config;\n            if (t.target === document || t.target === e || e.contains(t.target)) return;\n            const i = z.focusableChildren(e);\n            0 === i.length ? e.focus() : this._lastTabNavDirection === wi ? i[i.length - 1].focus() : i[0].focus();\n        }\n        _handleKeydown(t) {\n            \"Tab\" === t.key && (this._lastTabNavDirection = t.shiftKey ? wi : \"forward\");\n        }\n    }\n    const Ci = \"hidden.bs.modal\", Oi = \"show.bs.modal\", xi = \"modal-open\", ki = \"show\", Li = \"modal-static\", Si = {\n        backdrop: !0,\n        focus: !0,\n        keyboard: !0\n    }, Di = {\n        backdrop: \"(boolean|string)\",\n        focus: \"boolean\",\n        keyboard: \"boolean\"\n    };\n    class Ii extends W {\n        constructor(t, e){\n            super(t, e), this._dialog = z.findOne(\".modal-dialog\", this._element), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._isShown = !1, this._isTransitioning = !1, this._scrollBar = new pi, this._addEventListeners();\n        }\n        static get Default() {\n            return Si;\n        }\n        static get DefaultType() {\n            return Di;\n        }\n        static get NAME() {\n            return \"modal\";\n        }\n        toggle(t) {\n            return this._isShown ? this.hide() : this.show(t);\n        }\n        show(t) {\n            this._isShown || this._isTransitioning || I.trigger(this._element, Oi, {\n                relatedTarget: t\n            }).defaultPrevented || (this._isShown = !0, this._isTransitioning = !0, this._scrollBar.hide(), document.body.classList.add(xi), this._adjustDialog(), this._backdrop.show(()=>this._showElement(t)));\n        }\n        hide() {\n            this._isShown && !this._isTransitioning && (I.trigger(this._element, \"hide.bs.modal\").defaultPrevented || (this._isShown = !1, this._isTransitioning = !0, this._focustrap.deactivate(), this._element.classList.remove(ki), this._queueCallback(()=>this._hideModal(), this._element, this._isAnimated())));\n        }\n        dispose() {\n            for (const t of [\n                window,\n                this._dialog\n            ])I.off(t, \".bs.modal\");\n            this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();\n        }\n        handleUpdate() {\n            this._adjustDialog();\n        }\n        _initializeBackDrop() {\n            return new vi({\n                isVisible: Boolean(this._config.backdrop),\n                isAnimated: this._isAnimated()\n            });\n        }\n        _initializeFocusTrap() {\n            return new Ti({\n                trapElement: this._element\n            });\n        }\n        _showElement(t) {\n            document.body.contains(this._element) || document.body.append(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.scrollTop = 0;\n            const e = z.findOne(\".modal-body\", this._dialog);\n            e && (e.scrollTop = 0), c(this._element), this._element.classList.add(ki), this._queueCallback(()=>{\n                this._config.focus && this._focustrap.activate(), this._isTransitioning = !1, I.trigger(this._element, \"shown.bs.modal\", {\n                    relatedTarget: t\n                });\n            }, this._dialog, this._isAnimated());\n        }\n        _addEventListeners() {\n            I.on(this._element, \"keydown.dismiss.bs.modal\", (t)=>{\n                \"Escape\" === t.key && (this._config.keyboard ? this.hide() : this._triggerBackdropTransition());\n            }), I.on(window, \"resize.bs.modal\", ()=>{\n                this._isShown && !this._isTransitioning && this._adjustDialog();\n            }), I.on(this._element, \"mousedown.dismiss.bs.modal\", (t)=>{\n                I.one(this._element, \"click.dismiss.bs.modal\", (e)=>{\n                    this._element === t.target && this._element === e.target && (\"static\" !== this._config.backdrop ? this._config.backdrop && this.hide() : this._triggerBackdropTransition());\n                });\n            });\n        }\n        _hideModal() {\n            this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._backdrop.hide(()=>{\n                document.body.classList.remove(xi), this._resetAdjustments(), this._scrollBar.reset(), I.trigger(this._element, Ci);\n            });\n        }\n        _isAnimated() {\n            return this._element.classList.contains(\"fade\");\n        }\n        _triggerBackdropTransition() {\n            if (I.trigger(this._element, \"hidePrevented.bs.modal\").defaultPrevented) return;\n            const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._element.style.overflowY;\n            \"hidden\" === e || this._element.classList.contains(Li) || (t || (this._element.style.overflowY = \"hidden\"), this._element.classList.add(Li), this._queueCallback(()=>{\n                this._element.classList.remove(Li), this._queueCallback(()=>{\n                    this._element.style.overflowY = e;\n                }, this._dialog);\n            }, this._dialog), this._element.focus());\n        }\n        _adjustDialog() {\n            const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), i = e > 0;\n            if (i && !t) {\n                const t = u() ? \"paddingLeft\" : \"paddingRight\";\n                this._element.style[t] = `${e}px`;\n            }\n            if (!i && t) {\n                const t = u() ? \"paddingRight\" : \"paddingLeft\";\n                this._element.style[t] = `${e}px`;\n            }\n        }\n        _resetAdjustments() {\n            this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n        }\n        static jQueryInterface(t, e) {\n            return this.each(function() {\n                const i = Ii.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === i[t]) throw new TypeError(`No method named \"${t}\"`);\n                    i[t](e);\n                }\n            });\n        }\n    }\n    I.on(document, \"click.bs.modal.data-api\", '[data-bs-toggle=\"modal\"]', function(t) {\n        const e = z.getElementFromSelector(this);\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && t.preventDefault(), I.one(e, Oi, (t)=>{\n            t.defaultPrevented || I.one(e, Ci, ()=>{\n                o(this) && this.focus();\n            });\n        });\n        const i = z.findOne(\".modal.show\");\n        i && Ii.getInstance(i).hide(), Ii.getOrCreateInstance(e).toggle(this);\n    }), R(Ii), f(Ii);\n    const Ni = \"show\", Pi = \"showing\", ji = \"hiding\", Mi = \".offcanvas.show\", Fi = \"hidePrevented.bs.offcanvas\", Hi = \"hidden.bs.offcanvas\", $i = {\n        backdrop: !0,\n        keyboard: !0,\n        scroll: !1\n    }, Wi = {\n        backdrop: \"(boolean|string)\",\n        keyboard: \"boolean\",\n        scroll: \"boolean\"\n    };\n    class Bi extends W {\n        constructor(t, e){\n            super(t, e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners();\n        }\n        static get Default() {\n            return $i;\n        }\n        static get DefaultType() {\n            return Wi;\n        }\n        static get NAME() {\n            return \"offcanvas\";\n        }\n        toggle(t) {\n            return this._isShown ? this.hide() : this.show(t);\n        }\n        show(t) {\n            this._isShown || I.trigger(this._element, \"show.bs.offcanvas\", {\n                relatedTarget: t\n            }).defaultPrevented || (this._isShown = !0, this._backdrop.show(), this._config.scroll || (new pi).hide(), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.classList.add(Pi), this._queueCallback(()=>{\n                this._config.scroll && !this._config.backdrop || this._focustrap.activate(), this._element.classList.add(Ni), this._element.classList.remove(Pi), I.trigger(this._element, \"shown.bs.offcanvas\", {\n                    relatedTarget: t\n                });\n            }, this._element, !0));\n        }\n        hide() {\n            this._isShown && (I.trigger(this._element, \"hide.bs.offcanvas\").defaultPrevented || (this._focustrap.deactivate(), this._element.blur(), this._isShown = !1, this._element.classList.add(ji), this._backdrop.hide(), this._queueCallback(()=>{\n                this._element.classList.remove(Ni, ji), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._config.scroll || (new pi).reset(), I.trigger(this._element, Hi);\n            }, this._element, !0)));\n        }\n        dispose() {\n            this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();\n        }\n        _initializeBackDrop() {\n            const t = Boolean(this._config.backdrop);\n            return new vi({\n                className: \"offcanvas-backdrop\",\n                isVisible: t,\n                isAnimated: !0,\n                rootElement: this._element.parentNode,\n                clickCallback: t ? ()=>{\n                    \"static\" !== this._config.backdrop ? this.hide() : I.trigger(this._element, Fi);\n                } : null\n            });\n        }\n        _initializeFocusTrap() {\n            return new Ti({\n                trapElement: this._element\n            });\n        }\n        _addEventListeners() {\n            I.on(this._element, \"keydown.dismiss.bs.offcanvas\", (t)=>{\n                \"Escape\" === t.key && (this._config.keyboard ? this.hide() : I.trigger(this._element, Fi));\n            });\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Bi.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw new TypeError(`No method named \"${t}\"`);\n                    e[t](this);\n                }\n            });\n        }\n    }\n    I.on(document, \"click.bs.offcanvas.data-api\", '[data-bs-toggle=\"offcanvas\"]', function(t) {\n        const e = z.getElementFromSelector(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && t.preventDefault(), r(this)) return;\n        I.one(e, Hi, ()=>{\n            o(this) && this.focus();\n        });\n        const i = z.findOne(Mi);\n        i && i !== e && Bi.getInstance(i).hide(), Bi.getOrCreateInstance(e).toggle(this);\n    }), I.on(window, \"load.bs.offcanvas.data-api\", ()=>{\n        for (const t of z.find(Mi))Bi.getOrCreateInstance(t).show();\n    }), I.on(window, \"resize.bs.offcanvas\", ()=>{\n        for (const t of z.find(\"[aria-modal][class*=show][class*=offcanvas-]\"))\"fixed\" !== getComputedStyle(t).position && Bi.getOrCreateInstance(t).hide();\n    }), R(Bi), f(Bi);\n    const zi = new Set([\n        \"background\",\n        \"cite\",\n        \"href\",\n        \"itemtype\",\n        \"longdesc\",\n        \"poster\",\n        \"src\",\n        \"xlink:href\"\n    ]), Ri = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i, qi = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i, Vi = (t, e)=>{\n        const i = t.nodeName.toLowerCase();\n        return e.includes(i) ? !zi.has(i) || Boolean(Ri.test(t.nodeValue) || qi.test(t.nodeValue)) : e.filter((t)=>t instanceof RegExp).some((t)=>t.test(i));\n    }, Ki = {\n        \"*\": [\n            \"class\",\n            \"dir\",\n            \"id\",\n            \"lang\",\n            \"role\",\n            /^aria-[\\w-]*$/i\n        ],\n        a: [\n            \"target\",\n            \"href\",\n            \"title\",\n            \"rel\"\n        ],\n        area: [],\n        b: [],\n        br: [],\n        col: [],\n        code: [],\n        div: [],\n        em: [],\n        hr: [],\n        h1: [],\n        h2: [],\n        h3: [],\n        h4: [],\n        h5: [],\n        h6: [],\n        i: [],\n        img: [\n            \"src\",\n            \"srcset\",\n            \"alt\",\n            \"title\",\n            \"width\",\n            \"height\"\n        ],\n        li: [],\n        ol: [],\n        p: [],\n        pre: [],\n        s: [],\n        small: [],\n        span: [],\n        sub: [],\n        sup: [],\n        strong: [],\n        u: [],\n        ul: []\n    }, Qi = {\n        allowList: Ki,\n        content: {},\n        extraClass: \"\",\n        html: !1,\n        sanitize: !0,\n        sanitizeFn: null,\n        template: \"<div></div>\"\n    }, Xi = {\n        allowList: \"object\",\n        content: \"object\",\n        extraClass: \"(string|function)\",\n        html: \"boolean\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        template: \"string\"\n    }, Yi = {\n        entry: \"(string|element|function|null)\",\n        selector: \"(string|element)\"\n    };\n    class Ui extends $ {\n        constructor(t){\n            super(), this._config = this._getConfig(t);\n        }\n        static get Default() {\n            return Qi;\n        }\n        static get DefaultType() {\n            return Xi;\n        }\n        static get NAME() {\n            return \"TemplateFactory\";\n        }\n        getContent() {\n            return Object.values(this._config.content).map((t)=>this._resolvePossibleFunction(t)).filter(Boolean);\n        }\n        hasContent() {\n            return this.getContent().length > 0;\n        }\n        changeContent(t) {\n            return this._checkContent(t), this._config.content = {\n                ...this._config.content,\n                ...t\n            }, this;\n        }\n        toHtml() {\n            const t = document.createElement(\"div\");\n            t.innerHTML = this._maybeSanitize(this._config.template);\n            for (const [e, i] of Object.entries(this._config.content))this._setContent(t, i, e);\n            const e = t.children[0], i = this._resolvePossibleFunction(this._config.extraClass);\n            return i && e.classList.add(...i.split(\" \")), e;\n        }\n        _typeCheckConfig(t) {\n            super._typeCheckConfig(t), this._checkContent(t.content);\n        }\n        _checkContent(t) {\n            for (const [e, i] of Object.entries(t))super._typeCheckConfig({\n                selector: e,\n                entry: i\n            }, Yi);\n        }\n        _setContent(t, e, i) {\n            const o = z.findOne(i, t);\n            o && ((e = this._resolvePossibleFunction(e)) ? n(e) ? this._putElementInTemplate(s(e), o) : this._config.html ? o.innerHTML = this._maybeSanitize(e) : o.textContent = e : o.remove());\n        }\n        _maybeSanitize(t) {\n            return this._config.sanitize ? function(t, e, i) {\n                if (!t.length) return t;\n                if (i && \"function\" == typeof i) return i(t);\n                const n = (new window.DOMParser).parseFromString(t, \"text/html\"), s = [].concat(...n.body.querySelectorAll(\"*\"));\n                for (const t of s){\n                    const i = t.nodeName.toLowerCase();\n                    if (!Object.keys(e).includes(i)) {\n                        t.remove();\n                        continue;\n                    }\n                    const n = [].concat(...t.attributes), s = [].concat(e[\"*\"] || [], e[i] || []);\n                    for (const e of n)Vi(e, s) || t.removeAttribute(e.nodeName);\n                }\n                return n.body.innerHTML;\n            }(t, this._config.allowList, this._config.sanitizeFn) : t;\n        }\n        _resolvePossibleFunction(t) {\n            return p(t, [\n                this\n            ]);\n        }\n        _putElementInTemplate(t, e) {\n            if (this._config.html) return e.innerHTML = \"\", void e.append(t);\n            e.textContent = t.textContent;\n        }\n    }\n    const Gi = new Set([\n        \"sanitize\",\n        \"allowList\",\n        \"sanitizeFn\"\n    ]), Ji = \"fade\", Zi = \"show\", tn = \".modal\", en = \"hide.bs.modal\", nn = \"hover\", sn = \"focus\", on = {\n        AUTO: \"auto\",\n        TOP: \"top\",\n        RIGHT: u() ? \"left\" : \"right\",\n        BOTTOM: \"bottom\",\n        LEFT: u() ? \"right\" : \"left\"\n    }, rn = {\n        allowList: Ki,\n        animation: !0,\n        boundary: \"clippingParents\",\n        container: !1,\n        customClass: \"\",\n        delay: 0,\n        fallbackPlacements: [\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ],\n        html: !1,\n        offset: [\n            0,\n            0\n        ],\n        placement: \"top\",\n        popperConfig: null,\n        sanitize: !0,\n        sanitizeFn: null,\n        selector: !1,\n        template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n        title: \"\",\n        trigger: \"hover focus\"\n    }, an = {\n        allowList: \"object\",\n        animation: \"boolean\",\n        boundary: \"(string|element)\",\n        container: \"(string|element|boolean)\",\n        customClass: \"(string|function)\",\n        delay: \"(number|object)\",\n        fallbackPlacements: \"array\",\n        html: \"boolean\",\n        offset: \"(array|string|function)\",\n        placement: \"(string|function)\",\n        popperConfig: \"(null|object|function)\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        selector: \"(string|boolean)\",\n        template: \"string\",\n        title: \"(string|element|function)\",\n        trigger: \"string\"\n    };\n    class ln extends W {\n        constructor(t, e){\n            if (void 0 === Ve) throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n            super(t, e), this._isEnabled = !0, this._timeout = 0, this._isHovered = null, this._activeTrigger = {}, this._popper = null, this._templateFactory = null, this._newContent = null, this.tip = null, this._setListeners(), this._config.selector || this._fixTitle();\n        }\n        static get Default() {\n            return rn;\n        }\n        static get DefaultType() {\n            return an;\n        }\n        static get NAME() {\n            return \"tooltip\";\n        }\n        enable() {\n            this._isEnabled = !0;\n        }\n        disable() {\n            this._isEnabled = !1;\n        }\n        toggleEnabled() {\n            this._isEnabled = !this._isEnabled;\n        }\n        toggle() {\n            this._isEnabled && (this._activeTrigger.click = !this._activeTrigger.click, this._isShown() ? this._leave() : this._enter());\n        }\n        dispose() {\n            clearTimeout(this._timeout), I.off(this._element.closest(tn), en, this._hideModalHandler), this._element.getAttribute(\"data-bs-original-title\") && this._element.setAttribute(\"title\", this._element.getAttribute(\"data-bs-original-title\")), this._disposePopper(), super.dispose();\n        }\n        show() {\n            if (\"none\" === this._element.style.display) throw new Error(\"Please use show on visible elements\");\n            if (!this._isWithContent() || !this._isEnabled) return;\n            const t = I.trigger(this._element, this.constructor.eventName(\"show\")), e = (a(this._element) || this._element.ownerDocument.documentElement).contains(this._element);\n            if (t.defaultPrevented || !e) return;\n            this._disposePopper();\n            const i = this._getTipElement();\n            this._element.setAttribute(\"aria-describedby\", i.getAttribute(\"id\"));\n            const { container: n } = this._config;\n            if (this._element.ownerDocument.documentElement.contains(this.tip) || (n.append(i), I.trigger(this._element, this.constructor.eventName(\"inserted\"))), this._popper = this._createPopper(i), i.classList.add(Zi), \"ontouchstart\" in document.documentElement) for (const t of [].concat(...document.body.children))I.on(t, \"mouseover\", l);\n            this._queueCallback(()=>{\n                I.trigger(this._element, this.constructor.eventName(\"shown\")), !1 === this._isHovered && this._leave(), this._isHovered = !1;\n            }, this.tip, this._isAnimated());\n        }\n        hide() {\n            if (this._isShown() && !I.trigger(this._element, this.constructor.eventName(\"hide\")).defaultPrevented) {\n                if (this._getTipElement().classList.remove(Zi), \"ontouchstart\" in document.documentElement) for (const t of [].concat(...document.body.children))I.off(t, \"mouseover\", l);\n                this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1, this._isHovered = null, this._queueCallback(()=>{\n                    this._isWithActiveTrigger() || (this._isHovered || this._disposePopper(), this._element.removeAttribute(\"aria-describedby\"), I.trigger(this._element, this.constructor.eventName(\"hidden\")));\n                }, this.tip, this._isAnimated());\n            }\n        }\n        update() {\n            this._popper && this._popper.update();\n        }\n        _isWithContent() {\n            return Boolean(this._getTitle());\n        }\n        _getTipElement() {\n            return this.tip || (this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())), this.tip;\n        }\n        _createTipElement(t) {\n            const e = this._getTemplateFactory(t).toHtml();\n            if (!e) return null;\n            e.classList.remove(Ji, Zi), e.classList.add(`bs-${this.constructor.NAME}-auto`);\n            const i = ((t)=>{\n                do {\n                    t += Math.floor(1e6 * Math.random());\n                }while (document.getElementById(t));\n                return t;\n            })(this.constructor.NAME).toString();\n            return e.setAttribute(\"id\", i), this._isAnimated() && e.classList.add(Ji), e;\n        }\n        setContent(t) {\n            this._newContent = t, this._isShown() && (this._disposePopper(), this.show());\n        }\n        _getTemplateFactory(t) {\n            return this._templateFactory ? this._templateFactory.changeContent(t) : this._templateFactory = new Ui({\n                ...this._config,\n                content: t,\n                extraClass: this._resolvePossibleFunction(this._config.customClass)\n            }), this._templateFactory;\n        }\n        _getContentForTemplate() {\n            return {\n                \".tooltip-inner\": this._getTitle()\n            };\n        }\n        _getTitle() {\n            return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute(\"data-bs-original-title\");\n        }\n        _initializeOnDelegatedTarget(t) {\n            return this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig());\n        }\n        _isAnimated() {\n            return this._config.animation || this.tip && this.tip.classList.contains(Ji);\n        }\n        _isShown() {\n            return this.tip && this.tip.classList.contains(Zi);\n        }\n        _createPopper(t) {\n            const e = p(this._config.placement, [\n                this,\n                t,\n                this._element\n            ]), i = on[e.toUpperCase()];\n            return qe(this._element, t, this._getPopperConfig(i));\n        }\n        _getOffset() {\n            const { offset: t } = this._config;\n            return \"string\" == typeof t ? t.split(\",\").map((t)=>Number.parseInt(t, 10)) : \"function\" == typeof t ? (e)=>t(e, this._element) : t;\n        }\n        _resolvePossibleFunction(t) {\n            return p(t, [\n                this._element\n            ]);\n        }\n        _getPopperConfig(t) {\n            const e = {\n                placement: t,\n                modifiers: [\n                    {\n                        name: \"flip\",\n                        options: {\n                            fallbackPlacements: this._config.fallbackPlacements\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    },\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"arrow\",\n                        options: {\n                            element: `.${this.constructor.NAME}-arrow`\n                        }\n                    },\n                    {\n                        name: \"preSetPlacement\",\n                        enabled: !0,\n                        phase: \"beforeMain\",\n                        fn: (t)=>{\n                            this._getTipElement().setAttribute(\"data-popper-placement\", t.state.placement);\n                        }\n                    }\n                ]\n            };\n            return {\n                ...e,\n                ...p(this._config.popperConfig, [\n                    e\n                ])\n            };\n        }\n        _setListeners() {\n            const t = this._config.trigger.split(\" \");\n            for (const e of t)if (\"click\" === e) I.on(this._element, this.constructor.eventName(\"click\"), this._config.selector, (t)=>{\n                this._initializeOnDelegatedTarget(t).toggle();\n            });\n            else if (\"manual\" !== e) {\n                const t = e === nn ? this.constructor.eventName(\"mouseenter\") : this.constructor.eventName(\"focusin\"), i = e === nn ? this.constructor.eventName(\"mouseleave\") : this.constructor.eventName(\"focusout\");\n                I.on(this._element, t, this._config.selector, (t)=>{\n                    const e = this._initializeOnDelegatedTarget(t);\n                    e._activeTrigger[\"focusin\" === t.type ? sn : nn] = !0, e._enter();\n                }), I.on(this._element, i, this._config.selector, (t)=>{\n                    const e = this._initializeOnDelegatedTarget(t);\n                    e._activeTrigger[\"focusout\" === t.type ? sn : nn] = e._element.contains(t.relatedTarget), e._leave();\n                });\n            }\n            this._hideModalHandler = ()=>{\n                this._element && this.hide();\n            }, I.on(this._element.closest(tn), en, this._hideModalHandler);\n        }\n        _fixTitle() {\n            const t = this._element.getAttribute(\"title\");\n            t && (this._element.getAttribute(\"aria-label\") || this._element.textContent.trim() || this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"data-bs-original-title\", t), this._element.removeAttribute(\"title\"));\n        }\n        _enter() {\n            this._isShown() || this._isHovered ? this._isHovered = !0 : (this._isHovered = !0, this._setTimeout(()=>{\n                this._isHovered && this.show();\n            }, this._config.delay.show));\n        }\n        _leave() {\n            this._isWithActiveTrigger() || (this._isHovered = !1, this._setTimeout(()=>{\n                this._isHovered || this.hide();\n            }, this._config.delay.hide));\n        }\n        _setTimeout(t, e) {\n            clearTimeout(this._timeout), this._timeout = setTimeout(t, e);\n        }\n        _isWithActiveTrigger() {\n            return Object.values(this._activeTrigger).includes(!0);\n        }\n        _getConfig(t) {\n            const e = H.getDataAttributes(this._element);\n            for (const t of Object.keys(e))Gi.has(t) && delete e[t];\n            return t = {\n                ...e,\n                ...\"object\" == typeof t && t ? t : {}\n            }, t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t;\n        }\n        _configAfterMerge(t) {\n            return t.container = !1 === t.container ? document.body : s(t.container), \"number\" == typeof t.delay && (t.delay = {\n                show: t.delay,\n                hide: t.delay\n            }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), t;\n        }\n        _getDelegateConfig() {\n            const t = {};\n            for (const [e, i] of Object.entries(this._config))this.constructor.Default[e] !== i && (t[e] = i);\n            return t.selector = !1, t.trigger = \"manual\", t;\n        }\n        _disposePopper() {\n            this._popper && (this._popper.destroy(), this._popper = null), this.tip && (this.tip.remove(), this.tip = null);\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = ln.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError(`No method named \"${t}\"`);\n                    e[t]();\n                }\n            });\n        }\n    }\n    f(ln);\n    const cn = {\n        ...ln.Default,\n        content: \"\",\n        offset: [\n            0,\n            8\n        ],\n        placement: \"right\",\n        template: '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>',\n        trigger: \"click\"\n    }, hn = {\n        ...ln.DefaultType,\n        content: \"(null|string|element|function)\"\n    };\n    class dn extends ln {\n        static get Default() {\n            return cn;\n        }\n        static get DefaultType() {\n            return hn;\n        }\n        static get NAME() {\n            return \"popover\";\n        }\n        _isWithContent() {\n            return this._getTitle() || this._getContent();\n        }\n        _getContentForTemplate() {\n            return {\n                \".popover-header\": this._getTitle(),\n                \".popover-body\": this._getContent()\n            };\n        }\n        _getContent() {\n            return this._resolvePossibleFunction(this._config.content);\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = dn.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError(`No method named \"${t}\"`);\n                    e[t]();\n                }\n            });\n        }\n    }\n    f(dn);\n    const un = \"click.bs.scrollspy\", fn = \"active\", pn = \"[href]\", mn = {\n        offset: null,\n        rootMargin: \"0px 0px -25%\",\n        smoothScroll: !1,\n        target: null,\n        threshold: [\n            .1,\n            .5,\n            1\n        ]\n    }, gn = {\n        offset: \"(number|null)\",\n        rootMargin: \"string\",\n        smoothScroll: \"boolean\",\n        target: \"element\",\n        threshold: \"array\"\n    };\n    class _n extends W {\n        constructor(t, e){\n            super(t, e), this._targetLinks = new Map, this._observableSections = new Map, this._rootElement = \"visible\" === getComputedStyle(this._element).overflowY ? null : this._element, this._activeTarget = null, this._observer = null, this._previousScrollData = {\n                visibleEntryTop: 0,\n                parentScrollTop: 0\n            }, this.refresh();\n        }\n        static get Default() {\n            return mn;\n        }\n        static get DefaultType() {\n            return gn;\n        }\n        static get NAME() {\n            return \"scrollspy\";\n        }\n        refresh() {\n            this._initializeTargetsAndObservables(), this._maybeEnableSmoothScroll(), this._observer ? this._observer.disconnect() : this._observer = this._getNewObserver();\n            for (const t of this._observableSections.values())this._observer.observe(t);\n        }\n        dispose() {\n            this._observer.disconnect(), super.dispose();\n        }\n        _configAfterMerge(t) {\n            return t.target = s(t.target) || document.body, t.rootMargin = t.offset ? `${t.offset}px 0px -30%` : t.rootMargin, \"string\" == typeof t.threshold && (t.threshold = t.threshold.split(\",\").map((t)=>Number.parseFloat(t))), t;\n        }\n        _maybeEnableSmoothScroll() {\n            this._config.smoothScroll && (I.off(this._config.target, un), I.on(this._config.target, un, pn, (t)=>{\n                const e = this._observableSections.get(t.target.hash);\n                if (e) {\n                    t.preventDefault();\n                    const i = this._rootElement || window, n = e.offsetTop - this._element.offsetTop;\n                    if (i.scrollTo) return void i.scrollTo({\n                        top: n,\n                        behavior: \"smooth\"\n                    });\n                    i.scrollTop = n;\n                }\n            }));\n        }\n        _getNewObserver() {\n            const t = {\n                root: this._rootElement,\n                threshold: this._config.threshold,\n                rootMargin: this._config.rootMargin\n            };\n            return new IntersectionObserver((t)=>this._observerCallback(t), t);\n        }\n        _observerCallback(t) {\n            const e = (t)=>this._targetLinks.get(`#${t.target.id}`), i = (t)=>{\n                this._previousScrollData.visibleEntryTop = t.target.offsetTop, this._process(e(t));\n            }, n = (this._rootElement || document.documentElement).scrollTop, s = n >= this._previousScrollData.parentScrollTop;\n            this._previousScrollData.parentScrollTop = n;\n            for (const o of t){\n                if (!o.isIntersecting) {\n                    this._activeTarget = null, this._clearActiveClass(e(o));\n                    continue;\n                }\n                const t = o.target.offsetTop >= this._previousScrollData.visibleEntryTop;\n                if (s && t) {\n                    if (i(o), !n) return;\n                } else s || t || i(o);\n            }\n        }\n        _initializeTargetsAndObservables() {\n            this._targetLinks = new Map, this._observableSections = new Map;\n            const t = z.find(pn, this._config.target);\n            for (const e of t){\n                if (!e.hash || r(e)) continue;\n                const t = z.findOne(e.hash, this._element);\n                o(t) && (this._targetLinks.set(e.hash, e), this._observableSections.set(e.hash, t));\n            }\n        }\n        _process(t) {\n            this._activeTarget !== t && (this._clearActiveClass(this._config.target), this._activeTarget = t, t.classList.add(fn), this._activateParents(t), I.trigger(this._element, \"activate.bs.scrollspy\", {\n                relatedTarget: t\n            }));\n        }\n        _activateParents(t) {\n            if (t.classList.contains(\"dropdown-item\")) z.findOne(\".dropdown-toggle\", t.closest(\".dropdown\")).classList.add(fn);\n            else for (const e of z.parents(t, \".nav, .list-group\"))for (const t of z.prev(e, \".nav-link, .nav-item > .nav-link, .list-group-item\"))t.classList.add(fn);\n        }\n        _clearActiveClass(t) {\n            t.classList.remove(fn);\n            const e = z.find(\"[href].active\", t);\n            for (const t of e)t.classList.remove(fn);\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = _n.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw new TypeError(`No method named \"${t}\"`);\n                    e[t]();\n                }\n            });\n        }\n    }\n    I.on(window, \"load.bs.scrollspy.data-api\", ()=>{\n        for (const t of z.find('[data-bs-spy=\"scroll\"]'))_n.getOrCreateInstance(t);\n    }), f(_n);\n    const bn = \"ArrowLeft\", vn = \"ArrowRight\", yn = \"ArrowUp\", wn = \"ArrowDown\", An = \"active\", En = \"fade\", Tn = \"show\", Cn = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]', On = `.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role=\"tab\"]:not(.dropdown-toggle), ${Cn}`;\n    class xn extends W {\n        constructor(t){\n            super(t), this._parent = this._element.closest('.list-group, .nav, [role=\"tablist\"]'), this._parent && (this._setInitialAttributes(this._parent, this._getChildren()), I.on(this._element, \"keydown.bs.tab\", (t)=>this._keydown(t)));\n        }\n        static get NAME() {\n            return \"tab\";\n        }\n        show() {\n            const t = this._element;\n            if (this._elemIsActive(t)) return;\n            const e = this._getActiveElem(), i = e ? I.trigger(e, \"hide.bs.tab\", {\n                relatedTarget: t\n            }) : null;\n            I.trigger(t, \"show.bs.tab\", {\n                relatedTarget: e\n            }).defaultPrevented || i && i.defaultPrevented || (this._deactivate(e, t), this._activate(t, e));\n        }\n        _activate(t, e) {\n            t && (t.classList.add(An), this._activate(z.getElementFromSelector(t)), this._queueCallback(()=>{\n                \"tab\" === t.getAttribute(\"role\") ? (t.removeAttribute(\"tabindex\"), t.setAttribute(\"aria-selected\", !0), this._toggleDropDown(t, !0), I.trigger(t, \"shown.bs.tab\", {\n                    relatedTarget: e\n                })) : t.classList.add(Tn);\n            }, t, t.classList.contains(En)));\n        }\n        _deactivate(t, e) {\n            t && (t.classList.remove(An), t.blur(), this._deactivate(z.getElementFromSelector(t)), this._queueCallback(()=>{\n                \"tab\" === t.getAttribute(\"role\") ? (t.setAttribute(\"aria-selected\", !1), t.setAttribute(\"tabindex\", \"-1\"), this._toggleDropDown(t, !1), I.trigger(t, \"hidden.bs.tab\", {\n                    relatedTarget: e\n                })) : t.classList.remove(Tn);\n            }, t, t.classList.contains(En)));\n        }\n        _keydown(t) {\n            if (![\n                bn,\n                vn,\n                yn,\n                wn\n            ].includes(t.key)) return;\n            t.stopPropagation(), t.preventDefault();\n            const e = [\n                vn,\n                wn\n            ].includes(t.key), i = g(this._getChildren().filter((t)=>!r(t)), t.target, e, !0);\n            i && (i.focus({\n                preventScroll: !0\n            }), xn.getOrCreateInstance(i).show());\n        }\n        _getChildren() {\n            return z.find(On, this._parent);\n        }\n        _getActiveElem() {\n            return this._getChildren().find((t)=>this._elemIsActive(t)) || null;\n        }\n        _setInitialAttributes(t, e) {\n            this._setAttributeIfNotExists(t, \"role\", \"tablist\");\n            for (const t of e)this._setInitialAttributesOnChild(t);\n        }\n        _setInitialAttributesOnChild(t) {\n            t = this._getInnerElement(t);\n            const e = this._elemIsActive(t), i = this._getOuterElement(t);\n            t.setAttribute(\"aria-selected\", e), i !== t && this._setAttributeIfNotExists(i, \"role\", \"presentation\"), e || t.setAttribute(\"tabindex\", \"-1\"), this._setAttributeIfNotExists(t, \"role\", \"tab\"), this._setInitialAttributesOnTargetPanel(t);\n        }\n        _setInitialAttributesOnTargetPanel(t) {\n            const e = z.getElementFromSelector(t);\n            e && (this._setAttributeIfNotExists(e, \"role\", \"tabpanel\"), t.id && this._setAttributeIfNotExists(e, \"aria-labelledby\", `${t.id}`));\n        }\n        _toggleDropDown(t, e) {\n            const i = this._getOuterElement(t);\n            if (!i.classList.contains(\"dropdown\")) return;\n            const n = (t, n)=>{\n                const s = z.findOne(t, i);\n                s && s.classList.toggle(n, e);\n            };\n            n(\".dropdown-toggle\", An), n(\".dropdown-menu\", Tn), i.setAttribute(\"aria-expanded\", e);\n        }\n        _setAttributeIfNotExists(t, e, i) {\n            t.hasAttribute(e) || t.setAttribute(e, i);\n        }\n        _elemIsActive(t) {\n            return t.classList.contains(An);\n        }\n        _getInnerElement(t) {\n            return t.matches(On) ? t : z.findOne(On, t);\n        }\n        _getOuterElement(t) {\n            return t.closest(\".nav-item, .list-group-item\") || t;\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = xn.getOrCreateInstance(this);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw new TypeError(`No method named \"${t}\"`);\n                    e[t]();\n                }\n            });\n        }\n    }\n    I.on(document, \"click.bs.tab\", Cn, function(t) {\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && t.preventDefault(), r(this) || xn.getOrCreateInstance(this).show();\n    }), I.on(window, \"load.bs.tab\", ()=>{\n        for (const t of z.find('.active[data-bs-toggle=\"tab\"], .active[data-bs-toggle=\"pill\"], .active[data-bs-toggle=\"list\"]'))xn.getOrCreateInstance(t);\n    }), f(xn);\n    const kn = \"hide\", Ln = \"show\", Sn = \"showing\", Dn = {\n        animation: \"boolean\",\n        autohide: \"boolean\",\n        delay: \"number\"\n    }, In = {\n        animation: !0,\n        autohide: !0,\n        delay: 5e3\n    };\n    class Nn extends W {\n        constructor(t, e){\n            super(t, e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners();\n        }\n        static get Default() {\n            return In;\n        }\n        static get DefaultType() {\n            return Dn;\n        }\n        static get NAME() {\n            return \"toast\";\n        }\n        show() {\n            I.trigger(this._element, \"show.bs.toast\").defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add(\"fade\"), this._element.classList.remove(kn), c(this._element), this._element.classList.add(Ln, Sn), this._queueCallback(()=>{\n                this._element.classList.remove(Sn), I.trigger(this._element, \"shown.bs.toast\"), this._maybeScheduleHide();\n            }, this._element, this._config.animation));\n        }\n        hide() {\n            this.isShown() && (I.trigger(this._element, \"hide.bs.toast\").defaultPrevented || (this._element.classList.add(Sn), this._queueCallback(()=>{\n                this._element.classList.add(kn), this._element.classList.remove(Sn, Ln), I.trigger(this._element, \"hidden.bs.toast\");\n            }, this._element, this._config.animation)));\n        }\n        dispose() {\n            this._clearTimeout(), this.isShown() && this._element.classList.remove(Ln), super.dispose();\n        }\n        isShown() {\n            return this._element.classList.contains(Ln);\n        }\n        _maybeScheduleHide() {\n            this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(()=>{\n                this.hide();\n            }, this._config.delay)));\n        }\n        _onInteraction(t, e) {\n            switch(t.type){\n                case \"mouseover\":\n                case \"mouseout\":\n                    this._hasMouseInteraction = e;\n                    break;\n                case \"focusin\":\n                case \"focusout\":\n                    this._hasKeyboardInteraction = e;\n            }\n            if (e) return void this._clearTimeout();\n            const i = t.relatedTarget;\n            this._element === i || this._element.contains(i) || this._maybeScheduleHide();\n        }\n        _setListeners() {\n            I.on(this._element, \"mouseover.bs.toast\", (t)=>this._onInteraction(t, !0)), I.on(this._element, \"mouseout.bs.toast\", (t)=>this._onInteraction(t, !1)), I.on(this._element, \"focusin.bs.toast\", (t)=>this._onInteraction(t, !0)), I.on(this._element, \"focusout.bs.toast\", (t)=>this._onInteraction(t, !1));\n        }\n        _clearTimeout() {\n            clearTimeout(this._timeout), this._timeout = null;\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Nn.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError(`No method named \"${t}\"`);\n                    e[t](this);\n                }\n            });\n        }\n    }\n    return R(Nn), f(Nn), {\n        Alert: q,\n        Button: K,\n        Carousel: rt,\n        Collapse: ft,\n        Dropdown: ci,\n        Modal: Ii,\n        Offcanvas: Bi,\n        Popover: dn,\n        ScrollSpy: _n,\n        Tab: xn,\n        Toast: Nn,\n        Tooltip: ln\n    };\n}); //# sourceMappingURL=bootstrap.bundle.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNnTixJQUFJLENBQUU7Z0JBQVcsTUFBTS9NLElBQUU2ekIsR0FBR3pvQixtQkFBbUIsQ0FBQyxJQUFJLEVBQUNyTDtnQkFBRyxJQUFHLFlBQVUsT0FBT0EsR0FBRTtvQkFBQyxJQUFHLEtBQUssTUFBSUMsQ0FBQyxDQUFDRCxFQUFFLEVBQUMsTUFBTSxJQUFJMEssVUFBVSxDQUFDLGlCQUFpQixFQUFFMUssRUFBRSxDQUFDLENBQUM7b0JBQUVDLENBQUMsQ0FBQ0QsRUFBRSxDQUFDLElBQUk7Z0JBQUM7WUFBQztRQUFHO0lBQUM7SUFBQyxPQUFPMk0sRUFBRW1uQixLQUFJM3dCLEVBQUUyd0IsS0FBSTtRQUFDTyxPQUFNeG5CO1FBQUV5bkIsUUFBT3BuQjtRQUFFcW5CLFVBQVMxa0I7UUFBRzJrQixVQUFTcGlCO1FBQUdxaUIsVUFBU3hSO1FBQUd5UixPQUFNak47UUFBR2tOLFdBQVUzTDtRQUFHNEwsU0FBUTlFO1FBQUcrRSxXQUFVdEU7UUFBR3VFLEtBQUlwQztRQUFHcUMsT0FBTWpCO1FBQUdrQixTQUFRckg7SUFBRTtBQUFDLElBQ3Y0OEUsZ0RBQWdEIiwic291cmNlcyI6WyIvVXNlcnMvYmFpYy9Eb2N1bWVudHMvQ09ERS9taXhjYXIvcHVibGljL2Fzc2V0cy9qcy9ib290c3RyYXAubWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICAqIEJvb3RzdHJhcCB2NS4zLjAtYWxwaGEyIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMjMgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgKi9cbiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuYm9vdHN0cmFwPWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtjb25zdCB0PVwidHJhbnNpdGlvbmVuZFwiLGU9dD0+KHQmJndpbmRvdy5DU1MmJndpbmRvdy5DU1MuZXNjYXBlJiYodD10LnJlcGxhY2UoLyMoW15cXHNcIiMnXSspL2csKCh0LGUpPT5gIyR7Q1NTLmVzY2FwZShlKX1gKSkpLHQpLGk9ZT0+e2UuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQodCkpfSxuPXQ9PiEoIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KSYmKHZvaWQgMCE9PXQuanF1ZXJ5JiYodD10WzBdKSx2b2lkIDAhPT10Lm5vZGVUeXBlKSxzPXQ9Pm4odCk/dC5qcXVlcnk/dFswXTp0Olwic3RyaW5nXCI9PXR5cGVvZiB0JiZ0Lmxlbmd0aD4wP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSh0KSk6bnVsbCxvPXQ9PntpZighbih0KXx8MD09PXQuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpcmV0dXJuITE7Y29uc3QgZT1cInZpc2libGVcIj09PWdldENvbXB1dGVkU3R5bGUodCkuZ2V0UHJvcGVydHlWYWx1ZShcInZpc2liaWxpdHlcIiksaT10LmNsb3Nlc3QoXCJkZXRhaWxzOm5vdChbb3Blbl0pXCIpO2lmKCFpKXJldHVybiBlO2lmKGkhPT10KXtjb25zdCBlPXQuY2xvc2VzdChcInN1bW1hcnlcIik7aWYoZSYmZS5wYXJlbnROb2RlIT09aSlyZXR1cm4hMTtpZihudWxsPT09ZSlyZXR1cm4hMX1yZXR1cm4gZX0scj10PT4hdHx8dC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFfHwhIXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIil8fCh2b2lkIDAhPT10LmRpc2FibGVkP3QuZGlzYWJsZWQ6dC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSYmXCJmYWxzZVwiIT09dC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSksYT10PT57aWYoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5nZXRSb290Tm9kZSl7Y29uc3QgZT10LmdldFJvb3ROb2RlKCk7cmV0dXJuIGUgaW5zdGFuY2VvZiBTaGFkb3dSb290P2U6bnVsbH1yZXR1cm4gdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q/dDp0LnBhcmVudE5vZGU/YSh0LnBhcmVudE5vZGUpOm51bGx9LGw9KCk9Pnt9LGM9dD0+e3Qub2Zmc2V0SGVpZ2h0fSxoPSgpPT53aW5kb3cualF1ZXJ5JiYhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWJzLW5vLWpxdWVyeVwiKT93aW5kb3cualF1ZXJ5Om51bGwsZD1bXSx1PSgpPT5cInJ0bFwiPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpcixmPXQ9Pnt2YXIgZTtlPSgpPT57Y29uc3QgZT1oKCk7aWYoZSl7Y29uc3QgaT10Lk5BTUUsbj1lLmZuW2ldO2UuZm5baV09dC5qUXVlcnlJbnRlcmZhY2UsZS5mbltpXS5Db25zdHJ1Y3Rvcj10LGUuZm5baV0ubm9Db25mbGljdD0oKT0+KGUuZm5baV09bix0LmpRdWVyeUludGVyZmFjZSl9fSxcImxvYWRpbmdcIj09PWRvY3VtZW50LnJlYWR5U3RhdGU/KGQubGVuZ3RofHxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCgoKT0+e2Zvcihjb25zdCB0IG9mIGQpdCgpfSkpLGQucHVzaChlKSk6ZSgpfSxwPSh0LGU9W10saT10KT0+XCJmdW5jdGlvblwiPT10eXBlb2YgdD90KC4uLmUpOmksbT0oZSxuLHM9ITApPT57aWYoIXMpcmV0dXJuIHZvaWQgcChlKTtjb25zdCBvPSh0PT57aWYoIXQpcmV0dXJuIDA7bGV0e3RyYW5zaXRpb25EdXJhdGlvbjplLHRyYW5zaXRpb25EZWxheTppfT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KTtjb25zdCBuPU51bWJlci5wYXJzZUZsb2F0KGUpLHM9TnVtYmVyLnBhcnNlRmxvYXQoaSk7cmV0dXJuIG58fHM/KGU9ZS5zcGxpdChcIixcIilbMF0saT1pLnNwbGl0KFwiLFwiKVswXSwxZTMqKE51bWJlci5wYXJzZUZsb2F0KGUpK051bWJlci5wYXJzZUZsb2F0KGkpKSk6MH0pKG4pKzU7bGV0IHI9ITE7Y29uc3QgYT0oe3RhcmdldDppfSk9PntpPT09biYmKHI9ITAsbi5yZW1vdmVFdmVudExpc3RlbmVyKHQsYSkscChlKSl9O24uYWRkRXZlbnRMaXN0ZW5lcih0LGEpLHNldFRpbWVvdXQoKCgpPT57cnx8aShuKX0pLG8pfSxnPSh0LGUsaSxuKT0+e2NvbnN0IHM9dC5sZW5ndGg7bGV0IG89dC5pbmRleE9mKGUpO3JldHVybi0xPT09bz8haSYmbj90W3MtMV06dFswXToobys9aT8xOi0xLG4mJihvPShvK3MpJXMpLHRbTWF0aC5tYXgoMCxNYXRoLm1pbihvLHMtMSkpXSl9LF89L1teLl0qKD89XFwuLiopXFwufC4qLyxiPS9cXC4uKi8sdj0vOjpcXGQrJC8seT17fTtsZXQgdz0xO2NvbnN0IEE9e21vdXNlZW50ZXI6XCJtb3VzZW92ZXJcIixtb3VzZWxlYXZlOlwibW91c2VvdXRcIn0sRT1uZXcgU2V0KFtcImNsaWNrXCIsXCJkYmxjbGlja1wiLFwibW91c2V1cFwiLFwibW91c2Vkb3duXCIsXCJjb250ZXh0bWVudVwiLFwibW91c2V3aGVlbFwiLFwiRE9NTW91c2VTY3JvbGxcIixcIm1vdXNlb3ZlclwiLFwibW91c2VvdXRcIixcIm1vdXNlbW92ZVwiLFwic2VsZWN0c3RhcnRcIixcInNlbGVjdGVuZFwiLFwia2V5ZG93blwiLFwia2V5cHJlc3NcIixcImtleXVwXCIsXCJvcmllbnRhdGlvbmNoYW5nZVwiLFwidG91Y2hzdGFydFwiLFwidG91Y2htb3ZlXCIsXCJ0b3VjaGVuZFwiLFwidG91Y2hjYW5jZWxcIixcInBvaW50ZXJkb3duXCIsXCJwb2ludGVybW92ZVwiLFwicG9pbnRlcnVwXCIsXCJwb2ludGVybGVhdmVcIixcInBvaW50ZXJjYW5jZWxcIixcImdlc3R1cmVzdGFydFwiLFwiZ2VzdHVyZWNoYW5nZVwiLFwiZ2VzdHVyZWVuZFwiLFwiZm9jdXNcIixcImJsdXJcIixcImNoYW5nZVwiLFwicmVzZXRcIixcInNlbGVjdFwiLFwic3VibWl0XCIsXCJmb2N1c2luXCIsXCJmb2N1c291dFwiLFwibG9hZFwiLFwidW5sb2FkXCIsXCJiZWZvcmV1bmxvYWRcIixcInJlc2l6ZVwiLFwibW92ZVwiLFwiRE9NQ29udGVudExvYWRlZFwiLFwicmVhZHlzdGF0ZWNoYW5nZVwiLFwiZXJyb3JcIixcImFib3J0XCIsXCJzY3JvbGxcIl0pO2Z1bmN0aW9uIFQodCxlKXtyZXR1cm4gZSYmYCR7ZX06OiR7dysrfWB8fHQudWlkRXZlbnR8fHcrK31mdW5jdGlvbiBDKHQpe2NvbnN0IGU9VCh0KTtyZXR1cm4gdC51aWRFdmVudD1lLHlbZV09eVtlXXx8e30seVtlXX1mdW5jdGlvbiBPKHQsZSxpPW51bGwpe3JldHVybiBPYmplY3QudmFsdWVzKHQpLmZpbmQoKHQ9PnQuY2FsbGFibGU9PT1lJiZ0LmRlbGVnYXRpb25TZWxlY3Rvcj09PWkpKX1mdW5jdGlvbiB4KHQsZSxpKXtjb25zdCBuPVwic3RyaW5nXCI9PXR5cGVvZiBlLHM9bj9pOmV8fGk7bGV0IG89RCh0KTtyZXR1cm4gRS5oYXMobyl8fChvPXQpLFtuLHMsb119ZnVuY3Rpb24gayh0LGUsaSxuLHMpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwhdClyZXR1cm47bGV0W28scixhXT14KGUsaSxuKTtpZihlIGluIEEpe2NvbnN0IHQ9dD0+ZnVuY3Rpb24oZSl7aWYoIWUucmVsYXRlZFRhcmdldHx8ZS5yZWxhdGVkVGFyZ2V0IT09ZS5kZWxlZ2F0ZVRhcmdldCYmIWUuZGVsZWdhdGVUYXJnZXQuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSlyZXR1cm4gdC5jYWxsKHRoaXMsZSl9O3I9dChyKX1jb25zdCBsPUModCksYz1sW2FdfHwobFthXT17fSksaD1PKGMscixvP2k6bnVsbCk7aWYoaClyZXR1cm4gdm9pZChoLm9uZU9mZj1oLm9uZU9mZiYmcyk7Y29uc3QgZD1UKHIsZS5yZXBsYWNlKF8sXCJcIikpLHU9bz9mdW5jdGlvbih0LGUsaSl7cmV0dXJuIGZ1bmN0aW9uIG4ocyl7Y29uc3Qgbz10LnF1ZXJ5U2VsZWN0b3JBbGwoZSk7Zm9yKGxldHt0YXJnZXQ6cn09cztyJiZyIT09dGhpcztyPXIucGFyZW50Tm9kZSlmb3IoY29uc3QgYSBvZiBvKWlmKGE9PT1yKXJldHVybiBOKHMse2RlbGVnYXRlVGFyZ2V0OnJ9KSxuLm9uZU9mZiYmSS5vZmYodCxzLnR5cGUsZSxpKSxpLmFwcGx5KHIsW3NdKX19KHQsaSxyKTpmdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbiBpKG4pe3JldHVybiBOKG4se2RlbGVnYXRlVGFyZ2V0OnR9KSxpLm9uZU9mZiYmSS5vZmYodCxuLnR5cGUsZSksZS5hcHBseSh0LFtuXSl9fSh0LHIpO3UuZGVsZWdhdGlvblNlbGVjdG9yPW8/aTpudWxsLHUuY2FsbGFibGU9cix1Lm9uZU9mZj1zLHUudWlkRXZlbnQ9ZCxjW2RdPXUsdC5hZGRFdmVudExpc3RlbmVyKGEsdSxvKX1mdW5jdGlvbiBMKHQsZSxpLG4scyl7Y29uc3Qgbz1PKGVbaV0sbixzKTtvJiYodC5yZW1vdmVFdmVudExpc3RlbmVyKGksbyxCb29sZWFuKHMpKSxkZWxldGUgZVtpXVtvLnVpZEV2ZW50XSl9ZnVuY3Rpb24gUyh0LGUsaSxuKXtjb25zdCBzPWVbaV18fHt9O2Zvcihjb25zdFtvLHJdb2YgT2JqZWN0LmVudHJpZXMocykpby5pbmNsdWRlcyhuKSYmTCh0LGUsaSxyLmNhbGxhYmxlLHIuZGVsZWdhdGlvblNlbGVjdG9yKX1mdW5jdGlvbiBEKHQpe3JldHVybiB0PXQucmVwbGFjZShiLFwiXCIpLEFbdF18fHR9Y29uc3QgST17b24odCxlLGksbil7ayh0LGUsaSxuLCExKX0sb25lKHQsZSxpLG4pe2sodCxlLGksbiwhMCl9LG9mZih0LGUsaSxuKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8IXQpcmV0dXJuO2NvbnN0W3MsbyxyXT14KGUsaSxuKSxhPXIhPT1lLGw9Qyh0KSxjPWxbcl18fHt9LGg9ZS5zdGFydHNXaXRoKFwiLlwiKTtpZih2b2lkIDA9PT1vKXtpZihoKWZvcihjb25zdCBpIG9mIE9iamVjdC5rZXlzKGwpKVModCxsLGksZS5zbGljZSgxKSk7Zm9yKGNvbnN0W2ksbl1vZiBPYmplY3QuZW50cmllcyhjKSl7Y29uc3Qgcz1pLnJlcGxhY2UodixcIlwiKTthJiYhZS5pbmNsdWRlcyhzKXx8TCh0LGwscixuLmNhbGxhYmxlLG4uZGVsZWdhdGlvblNlbGVjdG9yKX19ZWxzZXtpZighT2JqZWN0LmtleXMoYykubGVuZ3RoKXJldHVybjtMKHQsbCxyLG8scz9pOm51bGwpfX0sdHJpZ2dlcih0LGUsaSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCF0KXJldHVybiBudWxsO2NvbnN0IG49aCgpO2xldCBzPW51bGwsbz0hMCxyPSEwLGE9ITE7ZSE9PUQoZSkmJm4mJihzPW4uRXZlbnQoZSxpKSxuKHQpLnRyaWdnZXIocyksbz0hcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpLHI9IXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSxhPXMuaXNEZWZhdWx0UHJldmVudGVkKCkpO2xldCBsPW5ldyBFdmVudChlLHtidWJibGVzOm8sY2FuY2VsYWJsZTohMH0pO3JldHVybiBsPU4obCxpKSxhJiZsLnByZXZlbnREZWZhdWx0KCksciYmdC5kaXNwYXRjaEV2ZW50KGwpLGwuZGVmYXVsdFByZXZlbnRlZCYmcyYmcy5wcmV2ZW50RGVmYXVsdCgpLGx9fTtmdW5jdGlvbiBOKHQsZT17fSl7Zm9yKGNvbnN0W2ksbl1vZiBPYmplY3QuZW50cmllcyhlKSl0cnl7dFtpXT1ufWNhdGNoKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkse2NvbmZpZ3VyYWJsZTohMCxnZXQ6KCk9Pm59KX1yZXR1cm4gdH1jb25zdCBQPW5ldyBNYXAsaj17c2V0KHQsZSxpKXtQLmhhcyh0KXx8UC5zZXQodCxuZXcgTWFwKTtjb25zdCBuPVAuZ2V0KHQpO24uaGFzKGUpfHwwPT09bi5zaXplP24uc2V0KGUsaSk6Y29uc29sZS5lcnJvcihgQm9vdHN0cmFwIGRvZXNuJ3QgYWxsb3cgbW9yZSB0aGFuIG9uZSBpbnN0YW5jZSBwZXIgZWxlbWVudC4gQm91bmQgaW5zdGFuY2U6ICR7QXJyYXkuZnJvbShuLmtleXMoKSlbMF19LmApfSxnZXQ6KHQsZSk9PlAuaGFzKHQpJiZQLmdldCh0KS5nZXQoZSl8fG51bGwscmVtb3ZlKHQsZSl7aWYoIVAuaGFzKHQpKXJldHVybjtjb25zdCBpPVAuZ2V0KHQpO2kuZGVsZXRlKGUpLDA9PT1pLnNpemUmJlAuZGVsZXRlKHQpfX07ZnVuY3Rpb24gTSh0KXtpZihcInRydWVcIj09PXQpcmV0dXJuITA7aWYoXCJmYWxzZVwiPT09dClyZXR1cm4hMTtpZih0PT09TnVtYmVyKHQpLnRvU3RyaW5nKCkpcmV0dXJuIE51bWJlcih0KTtpZihcIlwiPT09dHx8XCJudWxsXCI9PT10KXJldHVybiBudWxsO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiB0O3RyeXtyZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQodCkpfWNhdGNoKGUpe3JldHVybiB0fX1mdW5jdGlvbiBGKHQpe3JldHVybiB0LnJlcGxhY2UoL1tBLVpdL2csKHQ9PmAtJHt0LnRvTG93ZXJDYXNlKCl9YCkpfWNvbnN0IEg9e3NldERhdGFBdHRyaWJ1dGUodCxlLGkpe3Quc2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7RihlKX1gLGkpfSxyZW1vdmVEYXRhQXR0cmlidXRlKHQsZSl7dC5yZW1vdmVBdHRyaWJ1dGUoYGRhdGEtYnMtJHtGKGUpfWApfSxnZXREYXRhQXR0cmlidXRlcyh0KXtpZighdClyZXR1cm57fTtjb25zdCBlPXt9LGk9T2JqZWN0LmtleXModC5kYXRhc2V0KS5maWx0ZXIoKHQ9PnQuc3RhcnRzV2l0aChcImJzXCIpJiYhdC5zdGFydHNXaXRoKFwiYnNDb25maWdcIikpKTtmb3IoY29uc3QgbiBvZiBpKXtsZXQgaT1uLnJlcGxhY2UoL15icy8sXCJcIik7aT1pLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpK2kuc2xpY2UoMSxpLmxlbmd0aCksZVtpXT1NKHQuZGF0YXNldFtuXSl9cmV0dXJuIGV9LGdldERhdGFBdHRyaWJ1dGU6KHQsZSk9Pk0odC5nZXRBdHRyaWJ1dGUoYGRhdGEtYnMtJHtGKGUpfWApKX07Y2xhc3MgJHtzdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm57fX1zdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCl7cmV0dXJue319c3RhdGljIGdldCBOQU1FKCl7dGhyb3cgbmV3IEVycm9yKCdZb3UgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHN0YXRpYyBtZXRob2QgXCJOQU1FXCIsIGZvciBlYWNoIGNvbXBvbmVudCEnKX1fZ2V0Q29uZmlnKHQpe3JldHVybiB0PXRoaXMuX21lcmdlQ29uZmlnT2JqKHQpLHQ9dGhpcy5fY29uZmlnQWZ0ZXJNZXJnZSh0KSx0aGlzLl90eXBlQ2hlY2tDb25maWcodCksdH1fY29uZmlnQWZ0ZXJNZXJnZSh0KXtyZXR1cm4gdH1fbWVyZ2VDb25maWdPYmoodCxlKXtjb25zdCBpPW4oZSk/SC5nZXREYXRhQXR0cmlidXRlKGUsXCJjb25maWdcIik6e307cmV0dXJuey4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwuLi5cIm9iamVjdFwiPT10eXBlb2YgaT9pOnt9LC4uLm4oZSk/SC5nZXREYXRhQXR0cmlidXRlcyhlKTp7fSwuLi5cIm9iamVjdFwiPT10eXBlb2YgdD90Ont9fX1fdHlwZUNoZWNrQ29uZmlnKHQsZT10aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKXtmb3IoY29uc3RbcyxvXW9mIE9iamVjdC5lbnRyaWVzKGUpKXtjb25zdCBlPXRbc10scj1uKGUpP1wiZWxlbWVudFwiOm51bGw9PShpPWUpP2Ake2l9YDpPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaSkubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7aWYoIW5ldyBSZWdFeHAobykudGVzdChyKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke3RoaXMuY29uc3RydWN0b3IuTkFNRS50b1VwcGVyQ2FzZSgpfTogT3B0aW9uIFwiJHtzfVwiIHByb3ZpZGVkIHR5cGUgXCIke3J9XCIgYnV0IGV4cGVjdGVkIHR5cGUgXCIke299XCIuYCl9dmFyIGl9fWNsYXNzIFcgZXh0ZW5kcyAke2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIoKSwodD1zKHQpKSYmKHRoaXMuX2VsZW1lbnQ9dCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLGouc2V0KHRoaXMuX2VsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSx0aGlzKSl9ZGlzcG9zZSgpe2oucmVtb3ZlKHRoaXMuX2VsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSksSS5vZmYodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7Zm9yKGNvbnN0IHQgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpdGhpc1t0XT1udWxsfV9xdWV1ZUNhbGxiYWNrKHQsZSxpPSEwKXttKHQsZSxpKX1fZ2V0Q29uZmlnKHQpe3JldHVybiB0PXRoaXMuX21lcmdlQ29uZmlnT2JqKHQsdGhpcy5fZWxlbWVudCksdD10aGlzLl9jb25maWdBZnRlck1lcmdlKHQpLHRoaXMuX3R5cGVDaGVja0NvbmZpZyh0KSx0fXN0YXRpYyBnZXRJbnN0YW5jZSh0KXtyZXR1cm4gai5nZXQocyh0KSx0aGlzLkRBVEFfS0VZKX1zdGF0aWMgZ2V0T3JDcmVhdGVJbnN0YW5jZSh0LGU9e30pe3JldHVybiB0aGlzLmdldEluc3RhbmNlKHQpfHxuZXcgdGhpcyh0LFwib2JqZWN0XCI9PXR5cGVvZiBlP2U6bnVsbCl9c3RhdGljIGdldCBWRVJTSU9OKCl7cmV0dXJuXCI1LjMuMC1hbHBoYTJcIn1zdGF0aWMgZ2V0IERBVEFfS0VZKCl7cmV0dXJuYGJzLiR7dGhpcy5OQU1FfWB9c3RhdGljIGdldCBFVkVOVF9LRVkoKXtyZXR1cm5gLiR7dGhpcy5EQVRBX0tFWX1gfXN0YXRpYyBldmVudE5hbWUodCl7cmV0dXJuYCR7dH0ke3RoaXMuRVZFTlRfS0VZfWB9fWNvbnN0IEI9dD0+e2xldCBpPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy10YXJnZXRcIik7aWYoIWl8fFwiI1wiPT09aSl7bGV0IGU9dC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO2lmKCFlfHwhZS5pbmNsdWRlcyhcIiNcIikmJiFlLnN0YXJ0c1dpdGgoXCIuXCIpKXJldHVybiBudWxsO2UuaW5jbHVkZXMoXCIjXCIpJiYhZS5zdGFydHNXaXRoKFwiI1wiKSYmKGU9YCMke2Uuc3BsaXQoXCIjXCIpWzFdfWApLGk9ZSYmXCIjXCIhPT1lP2UudHJpbSgpOm51bGx9cmV0dXJuIGUoaSl9LHo9e2ZpbmQ6KHQsZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpPT5bXS5jb25jYXQoLi4uRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbC5jYWxsKGUsdCkpLGZpbmRPbmU6KHQsZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpPT5FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLmNhbGwoZSx0KSxjaGlsZHJlbjoodCxlKT0+W10uY29uY2F0KC4uLnQuY2hpbGRyZW4pLmZpbHRlcigodD0+dC5tYXRjaGVzKGUpKSkscGFyZW50cyh0LGUpe2NvbnN0IGk9W107bGV0IG49dC5wYXJlbnROb2RlLmNsb3Nlc3QoZSk7Zm9yKDtuOylpLnB1c2gobiksbj1uLnBhcmVudE5vZGUuY2xvc2VzdChlKTtyZXR1cm4gaX0scHJldih0LGUpe2xldCBpPXQucHJldmlvdXNFbGVtZW50U2libGluZztmb3IoO2k7KXtpZihpLm1hdGNoZXMoZSkpcmV0dXJuW2ldO2k9aS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nfXJldHVybltdfSxuZXh0KHQsZSl7bGV0IGk9dC5uZXh0RWxlbWVudFNpYmxpbmc7Zm9yKDtpOyl7aWYoaS5tYXRjaGVzKGUpKXJldHVybltpXTtpPWkubmV4dEVsZW1lbnRTaWJsaW5nfXJldHVybltdfSxmb2N1c2FibGVDaGlsZHJlbih0KXtjb25zdCBlPVtcImFcIixcImJ1dHRvblwiLFwiaW5wdXRcIixcInRleHRhcmVhXCIsXCJzZWxlY3RcIixcImRldGFpbHNcIixcIlt0YWJpbmRleF1cIiwnW2NvbnRlbnRlZGl0YWJsZT1cInRydWVcIl0nXS5tYXAoKHQ9PmAke3R9Om5vdChbdGFiaW5kZXhePVwiLVwiXSlgKSkuam9pbihcIixcIik7cmV0dXJuIHRoaXMuZmluZChlLHQpLmZpbHRlcigodD0+IXIodCkmJm8odCkpKX0sZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KXtjb25zdCBlPUIodCk7cmV0dXJuIGUmJnouZmluZE9uZShlKT9lOm51bGx9LGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodCl7Y29uc3QgZT1CKHQpO3JldHVybiBlP3ouZmluZE9uZShlKTpudWxsfSxnZXRNdWx0aXBsZUVsZW1lbnRzRnJvbVNlbGVjdG9yKHQpe2NvbnN0IGU9Qih0KTtyZXR1cm4gZT96LmZpbmQoZSk6W119fSxSPSh0LGU9XCJoaWRlXCIpPT57Y29uc3QgaT1gY2xpY2suZGlzbWlzcyR7dC5FVkVOVF9LRVl9YCxuPXQuTkFNRTtJLm9uKGRvY3VtZW50LGksYFtkYXRhLWJzLWRpc21pc3M9XCIke259XCJdYCwoZnVuY3Rpb24oaSl7aWYoW1wiQVwiLFwiQVJFQVwiXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpJiZpLnByZXZlbnREZWZhdWx0KCkscih0aGlzKSlyZXR1cm47Y29uc3Qgcz16LmdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcyl8fHRoaXMuY2xvc2VzdChgLiR7bn1gKTt0LmdldE9yQ3JlYXRlSW5zdGFuY2UocylbZV0oKX0pKX07Y2xhc3MgcSBleHRlbmRzIFd7c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJhbGVydFwifWNsb3NlKCl7aWYoSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJjbG9zZS5icy5hbGVydFwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpO2NvbnN0IHQ9dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpO3RoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT50aGlzLl9kZXN0cm95RWxlbWVudCgpKSx0aGlzLl9lbGVtZW50LHQpfV9kZXN0cm95RWxlbWVudCgpe3RoaXMuX2VsZW1lbnQucmVtb3ZlKCksSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJjbG9zZWQuYnMuYWxlcnRcIiksdGhpcy5kaXNwb3NlKCl9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9cS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdfHx0LnN0YXJ0c1dpdGgoXCJfXCIpfHxcImNvbnN0cnVjdG9yXCI9PT10KXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0odGhpcyl9fSkpfX1SKHEsXCJjbG9zZVwiKSxmKHEpO2NvbnN0IFY9J1tkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvblwiXSc7Y2xhc3MgSyBleHRlbmRzIFd7c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJidXR0b25cIn10b2dnbGUoKXt0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtcHJlc3NlZFwiLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKSl9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9Sy5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1widG9nZ2xlXCI9PT10JiZlW3RdKCl9KSl9fUkub24oZG9jdW1lbnQsXCJjbGljay5icy5idXR0b24uZGF0YS1hcGlcIixWLCh0PT57dC5wcmV2ZW50RGVmYXVsdCgpO2NvbnN0IGU9dC50YXJnZXQuY2xvc2VzdChWKTtLLmdldE9yQ3JlYXRlSW5zdGFuY2UoZSkudG9nZ2xlKCl9KSksZihLKTtjb25zdCBRPXtlbmRDYWxsYmFjazpudWxsLGxlZnRDYWxsYmFjazpudWxsLHJpZ2h0Q2FsbGJhY2s6bnVsbH0sWD17ZW5kQ2FsbGJhY2s6XCIoZnVuY3Rpb258bnVsbClcIixsZWZ0Q2FsbGJhY2s6XCIoZnVuY3Rpb258bnVsbClcIixyaWdodENhbGxiYWNrOlwiKGZ1bmN0aW9ufG51bGwpXCJ9O2NsYXNzIFkgZXh0ZW5kcyAke2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIoKSx0aGlzLl9lbGVtZW50PXQsdCYmWS5pc1N1cHBvcnRlZCgpJiYodGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9kZWx0YVg9MCx0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cz1Cb29sZWFuKHdpbmRvdy5Qb2ludGVyRXZlbnQpLHRoaXMuX2luaXRFdmVudHMoKSl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIFF9c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBYfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwic3dpcGVcIn1kaXNwb3NlKCl7SS5vZmYodGhpcy5fZWxlbWVudCxcIi5icy5zd2lwZVwiKX1fc3RhcnQodCl7dGhpcy5fc3VwcG9ydFBvaW50ZXJFdmVudHM/dGhpcy5fZXZlbnRJc1BvaW50ZXJQZW5Ub3VjaCh0KSYmKHRoaXMuX2RlbHRhWD10LmNsaWVudFgpOnRoaXMuX2RlbHRhWD10LnRvdWNoZXNbMF0uY2xpZW50WH1fZW5kKHQpe3RoaXMuX2V2ZW50SXNQb2ludGVyUGVuVG91Y2godCkmJih0aGlzLl9kZWx0YVg9dC5jbGllbnRYLXRoaXMuX2RlbHRhWCksdGhpcy5faGFuZGxlU3dpcGUoKSxwKHRoaXMuX2NvbmZpZy5lbmRDYWxsYmFjayl9X21vdmUodCl7dGhpcy5fZGVsdGFYPXQudG91Y2hlcyYmdC50b3VjaGVzLmxlbmd0aD4xPzA6dC50b3VjaGVzWzBdLmNsaWVudFgtdGhpcy5fZGVsdGFYfV9oYW5kbGVTd2lwZSgpe2NvbnN0IHQ9TWF0aC5hYnModGhpcy5fZGVsdGFYKTtpZih0PD00MClyZXR1cm47Y29uc3QgZT10L3RoaXMuX2RlbHRhWDt0aGlzLl9kZWx0YVg9MCxlJiZwKGU+MD90aGlzLl9jb25maWcucmlnaHRDYWxsYmFjazp0aGlzLl9jb25maWcubGVmdENhbGxiYWNrKX1faW5pdEV2ZW50cygpe3RoaXMuX3N1cHBvcnRQb2ludGVyRXZlbnRzPyhJLm9uKHRoaXMuX2VsZW1lbnQsXCJwb2ludGVyZG93bi5icy5zd2lwZVwiLCh0PT50aGlzLl9zdGFydCh0KSkpLEkub24odGhpcy5fZWxlbWVudCxcInBvaW50ZXJ1cC5icy5zd2lwZVwiLCh0PT50aGlzLl9lbmQodCkpKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwb2ludGVyLWV2ZW50XCIpKTooSS5vbih0aGlzLl9lbGVtZW50LFwidG91Y2hzdGFydC5icy5zd2lwZVwiLCh0PT50aGlzLl9zdGFydCh0KSkpLEkub24odGhpcy5fZWxlbWVudCxcInRvdWNobW92ZS5icy5zd2lwZVwiLCh0PT50aGlzLl9tb3ZlKHQpKSksSS5vbih0aGlzLl9lbGVtZW50LFwidG91Y2hlbmQuYnMuc3dpcGVcIiwodD0+dGhpcy5fZW5kKHQpKSkpfV9ldmVudElzUG9pbnRlclBlblRvdWNoKHQpe3JldHVybiB0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cyYmKFwicGVuXCI9PT10LnBvaW50ZXJUeXBlfHxcInRvdWNoXCI9PT10LnBvaW50ZXJUeXBlKX1zdGF0aWMgaXNTdXBwb3J0ZWQoKXtyZXR1cm5cIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHM+MH19Y29uc3QgVT1cIm5leHRcIixHPVwicHJldlwiLEo9XCJsZWZ0XCIsWj1cInJpZ2h0XCIsdHQ9XCJzbGlkLmJzLmNhcm91c2VsXCIsZXQ9XCJjYXJvdXNlbFwiLGl0PVwiYWN0aXZlXCIsbnQ9e0Fycm93TGVmdDpaLEFycm93UmlnaHQ6Sn0sc3Q9e2ludGVydmFsOjVlMyxrZXlib2FyZDohMCxwYXVzZTpcImhvdmVyXCIscmlkZTohMSx0b3VjaDohMCx3cmFwOiEwfSxvdD17aW50ZXJ2YWw6XCIobnVtYmVyfGJvb2xlYW4pXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIscGF1c2U6XCIoc3RyaW5nfGJvb2xlYW4pXCIscmlkZTpcIihib29sZWFufHN0cmluZylcIix0b3VjaDpcImJvb2xlYW5cIix3cmFwOlwiYm9vbGVhblwifTtjbGFzcyBydCBleHRlbmRzIFd7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0LGUpLHRoaXMuX2ludGVydmFsPW51bGwsdGhpcy5fYWN0aXZlRWxlbWVudD1udWxsLHRoaXMuX2lzU2xpZGluZz0hMSx0aGlzLnRvdWNoVGltZW91dD1udWxsLHRoaXMuX3N3aXBlSGVscGVyPW51bGwsdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQ9ei5maW5kT25lKFwiLmNhcm91c2VsLWluZGljYXRvcnNcIix0aGlzLl9lbGVtZW50KSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpLHRoaXMuX2NvbmZpZy5yaWRlPT09ZXQmJnRoaXMuY3ljbGUoKX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gc3R9c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBvdH1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cImNhcm91c2VsXCJ9bmV4dCgpe3RoaXMuX3NsaWRlKFUpfW5leHRXaGVuVmlzaWJsZSgpeyFkb2N1bWVudC5oaWRkZW4mJm8odGhpcy5fZWxlbWVudCkmJnRoaXMubmV4dCgpfXByZXYoKXt0aGlzLl9zbGlkZShHKX1wYXVzZSgpe3RoaXMuX2lzU2xpZGluZyYmaSh0aGlzLl9lbGVtZW50KSx0aGlzLl9jbGVhckludGVydmFsKCl9Y3ljbGUoKXt0aGlzLl9jbGVhckludGVydmFsKCksdGhpcy5fdXBkYXRlSW50ZXJ2YWwoKSx0aGlzLl9pbnRlcnZhbD1zZXRJbnRlcnZhbCgoKCk9PnRoaXMubmV4dFdoZW5WaXNpYmxlKCkpLHRoaXMuX2NvbmZpZy5pbnRlcnZhbCl9X21heWJlRW5hYmxlQ3ljbGUoKXt0aGlzLl9jb25maWcucmlkZSYmKHRoaXMuX2lzU2xpZGluZz9JLm9uZSh0aGlzLl9lbGVtZW50LHR0LCgoKT0+dGhpcy5jeWNsZSgpKSk6dGhpcy5jeWNsZSgpKX10byh0KXtjb25zdCBlPXRoaXMuX2dldEl0ZW1zKCk7aWYodD5lLmxlbmd0aC0xfHx0PDApcmV0dXJuO2lmKHRoaXMuX2lzU2xpZGluZylyZXR1cm4gdm9pZCBJLm9uZSh0aGlzLl9lbGVtZW50LHR0LCgoKT0+dGhpcy50byh0KSkpO2NvbnN0IGk9dGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2dldEFjdGl2ZSgpKTtpZihpPT09dClyZXR1cm47Y29uc3Qgbj10Pmk/VTpHO3RoaXMuX3NsaWRlKG4sZVt0XSl9ZGlzcG9zZSgpe3RoaXMuX3N3aXBlSGVscGVyJiZ0aGlzLl9zd2lwZUhlbHBlci5kaXNwb3NlKCksc3VwZXIuZGlzcG9zZSgpfV9jb25maWdBZnRlck1lcmdlKHQpe3JldHVybiB0LmRlZmF1bHRJbnRlcnZhbD10LmludGVydmFsLHR9X2FkZEV2ZW50TGlzdGVuZXJzKCl7dGhpcy5fY29uZmlnLmtleWJvYXJkJiZJLm9uKHRoaXMuX2VsZW1lbnQsXCJrZXlkb3duLmJzLmNhcm91c2VsXCIsKHQ9PnRoaXMuX2tleWRvd24odCkpKSxcImhvdmVyXCI9PT10aGlzLl9jb25maWcucGF1c2UmJihJLm9uKHRoaXMuX2VsZW1lbnQsXCJtb3VzZWVudGVyLmJzLmNhcm91c2VsXCIsKCgpPT50aGlzLnBhdXNlKCkpKSxJLm9uKHRoaXMuX2VsZW1lbnQsXCJtb3VzZWxlYXZlLmJzLmNhcm91c2VsXCIsKCgpPT50aGlzLl9tYXliZUVuYWJsZUN5Y2xlKCkpKSksdGhpcy5fY29uZmlnLnRvdWNoJiZZLmlzU3VwcG9ydGVkKCkmJnRoaXMuX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKX1fYWRkVG91Y2hFdmVudExpc3RlbmVycygpe2Zvcihjb25zdCB0IG9mIHouZmluZChcIi5jYXJvdXNlbC1pdGVtIGltZ1wiLHRoaXMuX2VsZW1lbnQpKUkub24odCxcImRyYWdzdGFydC5icy5jYXJvdXNlbFwiLCh0PT50LnByZXZlbnREZWZhdWx0KCkpKTtjb25zdCB0PXtsZWZ0Q2FsbGJhY2s6KCk9PnRoaXMuX3NsaWRlKHRoaXMuX2RpcmVjdGlvblRvT3JkZXIoSikpLHJpZ2h0Q2FsbGJhY2s6KCk9PnRoaXMuX3NsaWRlKHRoaXMuX2RpcmVjdGlvblRvT3JkZXIoWikpLGVuZENhbGxiYWNrOigpPT57XCJob3ZlclwiPT09dGhpcy5fY29uZmlnLnBhdXNlJiYodGhpcy5wYXVzZSgpLHRoaXMudG91Y2hUaW1lb3V0JiZjbGVhclRpbWVvdXQodGhpcy50b3VjaFRpbWVvdXQpLHRoaXMudG91Y2hUaW1lb3V0PXNldFRpbWVvdXQoKCgpPT50aGlzLl9tYXliZUVuYWJsZUN5Y2xlKCkpLDUwMCt0aGlzLl9jb25maWcuaW50ZXJ2YWwpKX19O3RoaXMuX3N3aXBlSGVscGVyPW5ldyBZKHRoaXMuX2VsZW1lbnQsdCl9X2tleWRvd24odCl7aWYoL2lucHV0fHRleHRhcmVhL2kudGVzdCh0LnRhcmdldC50YWdOYW1lKSlyZXR1cm47Y29uc3QgZT1udFt0LmtleV07ZSYmKHQucHJldmVudERlZmF1bHQoKSx0aGlzLl9zbGlkZSh0aGlzLl9kaXJlY3Rpb25Ub09yZGVyKGUpKSl9X2dldEl0ZW1JbmRleCh0KXtyZXR1cm4gdGhpcy5fZ2V0SXRlbXMoKS5pbmRleE9mKHQpfV9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KHQpe2lmKCF0aGlzLl9pbmRpY2F0b3JzRWxlbWVudClyZXR1cm47Y29uc3QgZT16LmZpbmRPbmUoXCIuYWN0aXZlXCIsdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpO2UuY2xhc3NMaXN0LnJlbW92ZShpdCksZS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIik7Y29uc3QgaT16LmZpbmRPbmUoYFtkYXRhLWJzLXNsaWRlLXRvPVwiJHt0fVwiXWAsdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpO2kmJihpLmNsYXNzTGlzdC5hZGQoaXQpLGkuc2V0QXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIsXCJ0cnVlXCIpKX1fdXBkYXRlSW50ZXJ2YWwoKXtjb25zdCB0PXRoaXMuX2FjdGl2ZUVsZW1lbnR8fHRoaXMuX2dldEFjdGl2ZSgpO2lmKCF0KXJldHVybjtjb25zdCBlPU51bWJlci5wYXJzZUludCh0LmdldEF0dHJpYnV0ZShcImRhdGEtYnMtaW50ZXJ2YWxcIiksMTApO3RoaXMuX2NvbmZpZy5pbnRlcnZhbD1lfHx0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsfV9zbGlkZSh0LGU9bnVsbCl7aWYodGhpcy5faXNTbGlkaW5nKXJldHVybjtjb25zdCBpPXRoaXMuX2dldEFjdGl2ZSgpLG49dD09PVUscz1lfHxnKHRoaXMuX2dldEl0ZW1zKCksaSxuLHRoaXMuX2NvbmZpZy53cmFwKTtpZihzPT09aSlyZXR1cm47Y29uc3Qgbz10aGlzLl9nZXRJdGVtSW5kZXgocykscj1lPT5JLnRyaWdnZXIodGhpcy5fZWxlbWVudCxlLHtyZWxhdGVkVGFyZ2V0OnMsZGlyZWN0aW9uOnRoaXMuX29yZGVyVG9EaXJlY3Rpb24odCksZnJvbTp0aGlzLl9nZXRJdGVtSW5kZXgoaSksdG86b30pO2lmKHIoXCJzbGlkZS5icy5jYXJvdXNlbFwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtpZighaXx8IXMpcmV0dXJuO2NvbnN0IGE9Qm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7dGhpcy5wYXVzZSgpLHRoaXMuX2lzU2xpZGluZz0hMCx0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG8pLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9cztjb25zdCBsPW4/XCJjYXJvdXNlbC1pdGVtLXN0YXJ0XCI6XCJjYXJvdXNlbC1pdGVtLWVuZFwiLGg9bj9cImNhcm91c2VsLWl0ZW0tbmV4dFwiOlwiY2Fyb3VzZWwtaXRlbS1wcmV2XCI7cy5jbGFzc0xpc3QuYWRkKGgpLGMocyksaS5jbGFzc0xpc3QuYWRkKGwpLHMuY2xhc3NMaXN0LmFkZChsKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+e3MuY2xhc3NMaXN0LnJlbW92ZShsLGgpLHMuY2xhc3NMaXN0LmFkZChpdCksaS5jbGFzc0xpc3QucmVtb3ZlKGl0LGgsbCksdGhpcy5faXNTbGlkaW5nPSExLHIodHQpfSksaSx0aGlzLl9pc0FuaW1hdGVkKCkpLGEmJnRoaXMuY3ljbGUoKX1faXNBbmltYXRlZCgpe3JldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInNsaWRlXCIpfV9nZXRBY3RpdmUoKXtyZXR1cm4gei5maW5kT25lKFwiLmFjdGl2ZS5jYXJvdXNlbC1pdGVtXCIsdGhpcy5fZWxlbWVudCl9X2dldEl0ZW1zKCl7cmV0dXJuIHouZmluZChcIi5jYXJvdXNlbC1pdGVtXCIsdGhpcy5fZWxlbWVudCl9X2NsZWFySW50ZXJ2YWwoKXt0aGlzLl9pbnRlcnZhbCYmKGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpLHRoaXMuX2ludGVydmFsPW51bGwpfV9kaXJlY3Rpb25Ub09yZGVyKHQpe3JldHVybiB1KCk/dD09PUo/RzpVOnQ9PT1KP1U6R31fb3JkZXJUb0RpcmVjdGlvbih0KXtyZXR1cm4gdSgpP3Q9PT1HP0o6Wjp0PT09Rz9aOkp9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9cnQuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYodm9pZCAwPT09ZVt0XXx8dC5zdGFydHNXaXRoKFwiX1wiKXx8XCJjb25zdHJ1Y3RvclwiPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke3R9XCJgKTtlW3RdKCl9fWVsc2UgZS50byh0KX0pKX19SS5vbihkb2N1bWVudCxcImNsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpXCIsXCJbZGF0YS1icy1zbGlkZV0sIFtkYXRhLWJzLXNsaWRlLXRvXVwiLChmdW5jdGlvbih0KXtjb25zdCBlPXouZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtpZighZXx8IWUuY2xhc3NMaXN0LmNvbnRhaW5zKGV0KSlyZXR1cm47dC5wcmV2ZW50RGVmYXVsdCgpO2NvbnN0IGk9cnQuZ2V0T3JDcmVhdGVJbnN0YW5jZShlKSxuPXRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1zbGlkZS10b1wiKTtyZXR1cm4gbj8oaS50byhuKSx2b2lkIGkuX21heWJlRW5hYmxlQ3ljbGUoKSk6XCJuZXh0XCI9PT1ILmdldERhdGFBdHRyaWJ1dGUodGhpcyxcInNsaWRlXCIpPyhpLm5leHQoKSx2b2lkIGkuX21heWJlRW5hYmxlQ3ljbGUoKSk6KGkucHJldigpLHZvaWQgaS5fbWF5YmVFbmFibGVDeWNsZSgpKX0pKSxJLm9uKHdpbmRvdyxcImxvYWQuYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIiwoKCk9Pntjb25zdCB0PXouZmluZCgnW2RhdGEtYnMtcmlkZT1cImNhcm91c2VsXCJdJyk7Zm9yKGNvbnN0IGUgb2YgdClydC5nZXRPckNyZWF0ZUluc3RhbmNlKGUpfSkpLGYocnQpO2NvbnN0IGF0PVwic2hvd1wiLGx0PVwiY29sbGFwc2VcIixjdD1cImNvbGxhcHNpbmdcIixodD0nW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLGR0PXtwYXJlbnQ6bnVsbCx0b2dnbGU6ITB9LHV0PXtwYXJlbnQ6XCIobnVsbHxlbGVtZW50KVwiLHRvZ2dsZTpcImJvb2xlYW5cIn07Y2xhc3MgZnQgZXh0ZW5kcyBXe2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIodCxlKSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fdHJpZ2dlckFycmF5PVtdO2NvbnN0IGk9ei5maW5kKGh0KTtmb3IoY29uc3QgdCBvZiBpKXtjb25zdCBlPXouZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KSxpPXouZmluZChlKS5maWx0ZXIoKHQ9PnQ9PT10aGlzLl9lbGVtZW50KSk7bnVsbCE9PWUmJmkubGVuZ3RoJiZ0aGlzLl90cmlnZ2VyQXJyYXkucHVzaCh0KX10aGlzLl9pbml0aWFsaXplQ2hpbGRyZW4oKSx0aGlzLl9jb25maWcucGFyZW50fHx0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fdHJpZ2dlckFycmF5LHRoaXMuX2lzU2hvd24oKSksdGhpcy5fY29uZmlnLnRvZ2dsZSYmdGhpcy50b2dnbGUoKX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gZHR9c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiB1dH1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cImNvbGxhcHNlXCJ9dG9nZ2xlKCl7dGhpcy5faXNTaG93bigpP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpfXNob3coKXtpZih0aGlzLl9pc1RyYW5zaXRpb25pbmd8fHRoaXMuX2lzU2hvd24oKSlyZXR1cm47bGV0IHQ9W107aWYodGhpcy5fY29uZmlnLnBhcmVudCYmKHQ9dGhpcy5fZ2V0Rmlyc3RMZXZlbENoaWxkcmVuKFwiLmNvbGxhcHNlLnNob3csIC5jb2xsYXBzZS5jb2xsYXBzaW5nXCIpLmZpbHRlcigodD0+dCE9PXRoaXMuX2VsZW1lbnQpKS5tYXAoKHQ9PmZ0LmdldE9yQ3JlYXRlSW5zdGFuY2UodCx7dG9nZ2xlOiExfSkpKSksdC5sZW5ndGgmJnRbMF0uX2lzVHJhbnNpdGlvbmluZylyZXR1cm47aWYoSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLmNvbGxhcHNlXCIpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO2Zvcihjb25zdCBlIG9mIHQpZS5oaWRlKCk7Y29uc3QgZT10aGlzLl9nZXREaW1lbnNpb24oKTt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobHQpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChjdCksdGhpcy5fZWxlbWVudC5zdHlsZVtlXT0wLHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl90cmlnZ2VyQXJyYXksITApLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMDtjb25zdCBpPWBzY3JvbGwke2VbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpfWA7dGhpcy5fcXVldWVDYWxsYmFjaygoKCk9Pnt0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGN0KSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQobHQsYXQpLHRoaXMuX2VsZW1lbnQuc3R5bGVbZV09XCJcIixJLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcInNob3duLmJzLmNvbGxhcHNlXCIpfSksdGhpcy5fZWxlbWVudCwhMCksdGhpcy5fZWxlbWVudC5zdHlsZVtlXT1gJHt0aGlzLl9lbGVtZW50W2ldfXB4YH1oaWRlKCl7aWYodGhpcy5faXNUcmFuc2l0aW9uaW5nfHwhdGhpcy5faXNTaG93bigpKXJldHVybjtpZihJLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGUuYnMuY29sbGFwc2VcIikuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47Y29uc3QgdD10aGlzLl9nZXREaW1lbnNpb24oKTt0aGlzLl9lbGVtZW50LnN0eWxlW3RdPWAke3RoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbdF19cHhgLGModGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGN0KSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobHQsYXQpO2Zvcihjb25zdCB0IG9mIHRoaXMuX3RyaWdnZXJBcnJheSl7Y29uc3QgZT16LmdldEVsZW1lbnRGcm9tU2VsZWN0b3IodCk7ZSYmIXRoaXMuX2lzU2hvd24oZSkmJnRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhbdF0sITEpfXRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMCx0aGlzLl9lbGVtZW50LnN0eWxlW3RdPVwiXCIsdGhpcy5fcXVldWVDYWxsYmFjaygoKCk9Pnt0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGN0KSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQobHQpLEkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZGVuLmJzLmNvbGxhcHNlXCIpfSksdGhpcy5fZWxlbWVudCwhMCl9X2lzU2hvd24odD10aGlzLl9lbGVtZW50KXtyZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoYXQpfV9jb25maWdBZnRlck1lcmdlKHQpe3JldHVybiB0LnRvZ2dsZT1Cb29sZWFuKHQudG9nZ2xlKSx0LnBhcmVudD1zKHQucGFyZW50KSx0fV9nZXREaW1lbnNpb24oKXtyZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJjb2xsYXBzZS1ob3Jpem9udGFsXCIpP1wid2lkdGhcIjpcImhlaWdodFwifV9pbml0aWFsaXplQ2hpbGRyZW4oKXtpZighdGhpcy5fY29uZmlnLnBhcmVudClyZXR1cm47Y29uc3QgdD10aGlzLl9nZXRGaXJzdExldmVsQ2hpbGRyZW4oaHQpO2Zvcihjb25zdCBlIG9mIHQpe2NvbnN0IHQ9ei5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKGUpO3QmJnRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhbZV0sdGhpcy5faXNTaG93bih0KSl9fV9nZXRGaXJzdExldmVsQ2hpbGRyZW4odCl7Y29uc3QgZT16LmZpbmQoXCI6c2NvcGUgLmNvbGxhcHNlIC5jb2xsYXBzZVwiLHRoaXMuX2NvbmZpZy5wYXJlbnQpO3JldHVybiB6LmZpbmQodCx0aGlzLl9jb25maWcucGFyZW50KS5maWx0ZXIoKHQ9PiFlLmluY2x1ZGVzKHQpKSl9X2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0LGUpe2lmKHQubGVuZ3RoKWZvcihjb25zdCBpIG9mIHQpaS5jbGFzc0xpc3QudG9nZ2xlKFwiY29sbGFwc2VkXCIsIWUpLGkuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLGUpfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7Y29uc3QgZT17fTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmL3Nob3d8aGlkZS8udGVzdCh0KSYmKGUudG9nZ2xlPSExKSx0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgaT1mdC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWlbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7aVt0XSgpfX0pKX19SS5vbihkb2N1bWVudCxcImNsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpXCIsaHQsKGZ1bmN0aW9uKHQpeyhcIkFcIj09PXQudGFyZ2V0LnRhZ05hbWV8fHQuZGVsZWdhdGVUYXJnZXQmJlwiQVwiPT09dC5kZWxlZ2F0ZVRhcmdldC50YWdOYW1lKSYmdC5wcmV2ZW50RGVmYXVsdCgpO2Zvcihjb25zdCB0IG9mIHouZ2V0TXVsdGlwbGVFbGVtZW50c0Zyb21TZWxlY3Rvcih0aGlzKSlmdC5nZXRPckNyZWF0ZUluc3RhbmNlKHQse3RvZ2dsZTohMX0pLnRvZ2dsZSgpfSkpLGYoZnQpO3ZhciBwdD1cInRvcFwiLG10PVwiYm90dG9tXCIsZ3Q9XCJyaWdodFwiLF90PVwibGVmdFwiLGJ0PVwiYXV0b1wiLHZ0PVtwdCxtdCxndCxfdF0seXQ9XCJzdGFydFwiLHd0PVwiZW5kXCIsQXQ9XCJjbGlwcGluZ1BhcmVudHNcIixFdD1cInZpZXdwb3J0XCIsVHQ9XCJwb3BwZXJcIixDdD1cInJlZmVyZW5jZVwiLE90PXZ0LnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jb25jYXQoW2UrXCItXCIreXQsZStcIi1cIit3dF0pfSksW10pLHh0PVtdLmNvbmNhdCh2dCxbYnRdKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29uY2F0KFtlLGUrXCItXCIreXQsZStcIi1cIit3dF0pfSksW10pLGt0PVwiYmVmb3JlUmVhZFwiLEx0PVwicmVhZFwiLFN0PVwiYWZ0ZXJSZWFkXCIsRHQ9XCJiZWZvcmVNYWluXCIsSXQ9XCJtYWluXCIsTnQ9XCJhZnRlck1haW5cIixQdD1cImJlZm9yZVdyaXRlXCIsanQ9XCJ3cml0ZVwiLE10PVwiYWZ0ZXJXcml0ZVwiLEZ0PVtrdCxMdCxTdCxEdCxJdCxOdCxQdCxqdCxNdF07ZnVuY3Rpb24gSHQodCl7cmV0dXJuIHQ/KHQubm9kZU5hbWV8fFwiXCIpLnRvTG93ZXJDYXNlKCk6bnVsbH1mdW5jdGlvbiAkdCh0KXtpZihudWxsPT10KXJldHVybiB3aW5kb3c7aWYoXCJbb2JqZWN0IFdpbmRvd11cIiE9PXQudG9TdHJpbmcoKSl7dmFyIGU9dC5vd25lckRvY3VtZW50O3JldHVybiBlJiZlLmRlZmF1bHRWaWV3fHx3aW5kb3d9cmV0dXJuIHR9ZnVuY3Rpb24gV3QodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiAkdCh0KS5FbGVtZW50fHx0IGluc3RhbmNlb2YgRWxlbWVudH1mdW5jdGlvbiBCdCh0KXtyZXR1cm4gdCBpbnN0YW5jZW9mICR0KHQpLkhUTUxFbGVtZW50fHx0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnR9ZnVuY3Rpb24genQodCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNoYWRvd1Jvb3QmJih0IGluc3RhbmNlb2YgJHQodCkuU2hhZG93Um9vdHx8dCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpfWNvbnN0IFJ0PXtuYW1lOlwiYXBwbHlTdHlsZXNcIixlbmFibGVkOiEwLHBoYXNlOlwid3JpdGVcIixmbjpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlO09iamVjdC5rZXlzKGUuZWxlbWVudHMpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBpPWUuc3R5bGVzW3RdfHx7fSxuPWUuYXR0cmlidXRlc1t0XXx8e30scz1lLmVsZW1lbnRzW3RdO0J0KHMpJiZIdChzKSYmKE9iamVjdC5hc3NpZ24ocy5zdHlsZSxpKSxPYmplY3Qua2V5cyhuKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT1uW3RdOyExPT09ZT9zLnJlbW92ZUF0dHJpYnV0ZSh0KTpzLnNldEF0dHJpYnV0ZSh0LCEwPT09ZT9cIlwiOmUpfSkpKX0pKX0sZWZmZWN0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUsaT17cG9wcGVyOntwb3NpdGlvbjplLm9wdGlvbnMuc3RyYXRlZ3ksbGVmdDpcIjBcIix0b3A6XCIwXCIsbWFyZ2luOlwiMFwifSxhcnJvdzp7cG9zaXRpb246XCJhYnNvbHV0ZVwifSxyZWZlcmVuY2U6e319O3JldHVybiBPYmplY3QuYXNzaWduKGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLGkucG9wcGVyKSxlLnN0eWxlcz1pLGUuZWxlbWVudHMuYXJyb3cmJk9iamVjdC5hc3NpZ24oZS5lbGVtZW50cy5hcnJvdy5zdHlsZSxpLmFycm93KSxmdW5jdGlvbigpe09iamVjdC5rZXlzKGUuZWxlbWVudHMpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPWUuZWxlbWVudHNbdF0scz1lLmF0dHJpYnV0ZXNbdF18fHt9LG89T2JqZWN0LmtleXMoZS5zdHlsZXMuaGFzT3duUHJvcGVydHkodCk/ZS5zdHlsZXNbdF06aVt0XSkucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0W2VdPVwiXCIsdH0pLHt9KTtCdChuKSYmSHQobikmJihPYmplY3QuYXNzaWduKG4uc3R5bGUsbyksT2JqZWN0LmtleXMocykuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5yZW1vdmVBdHRyaWJ1dGUodCl9KSkpfSkpfX0scmVxdWlyZXM6W1wiY29tcHV0ZVN0eWxlc1wiXX07ZnVuY3Rpb24gcXQodCl7cmV0dXJuIHQuc3BsaXQoXCItXCIpWzBdfXZhciBWdD1NYXRoLm1heCxLdD1NYXRoLm1pbixRdD1NYXRoLnJvdW5kO2Z1bmN0aW9uIFh0KCl7dmFyIHQ9bmF2aWdhdG9yLnVzZXJBZ2VudERhdGE7cmV0dXJuIG51bGwhPXQmJnQuYnJhbmRzP3QuYnJhbmRzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuYnJhbmQrXCIvXCIrdC52ZXJzaW9ufSkpLmpvaW4oXCIgXCIpOm5hdmlnYXRvci51c2VyQWdlbnR9ZnVuY3Rpb24gWXQoKXtyZXR1cm4hL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChYdCgpKX1mdW5jdGlvbiBVdCh0LGUsaSl7dm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PWkmJihpPSExKTt2YXIgbj10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHM9MSxvPTE7ZSYmQnQodCkmJihzPXQub2Zmc2V0V2lkdGg+MCYmUXQobi53aWR0aCkvdC5vZmZzZXRXaWR0aHx8MSxvPXQub2Zmc2V0SGVpZ2h0PjAmJlF0KG4uaGVpZ2h0KS90Lm9mZnNldEhlaWdodHx8MSk7dmFyIHI9KFd0KHQpPyR0KHQpOndpbmRvdykudmlzdWFsVmlld3BvcnQsYT0hWXQoKSYmaSxsPShuLmxlZnQrKGEmJnI/ci5vZmZzZXRMZWZ0OjApKS9zLGM9KG4udG9wKyhhJiZyP3Iub2Zmc2V0VG9wOjApKS9vLGg9bi53aWR0aC9zLGQ9bi5oZWlnaHQvbztyZXR1cm57d2lkdGg6aCxoZWlnaHQ6ZCx0b3A6YyxyaWdodDpsK2gsYm90dG9tOmMrZCxsZWZ0OmwseDpsLHk6Y319ZnVuY3Rpb24gR3QodCl7dmFyIGU9VXQodCksaT10Lm9mZnNldFdpZHRoLG49dC5vZmZzZXRIZWlnaHQ7cmV0dXJuIE1hdGguYWJzKGUud2lkdGgtaSk8PTEmJihpPWUud2lkdGgpLE1hdGguYWJzKGUuaGVpZ2h0LW4pPD0xJiYobj1lLmhlaWdodCkse3g6dC5vZmZzZXRMZWZ0LHk6dC5vZmZzZXRUb3Asd2lkdGg6aSxoZWlnaHQ6bn19ZnVuY3Rpb24gSnQodCxlKXt2YXIgaT1lLmdldFJvb3ROb2RlJiZlLmdldFJvb3ROb2RlKCk7aWYodC5jb250YWlucyhlKSlyZXR1cm4hMDtpZihpJiZ6dChpKSl7dmFyIG49ZTtkb3tpZihuJiZ0LmlzU2FtZU5vZGUobikpcmV0dXJuITA7bj1uLnBhcmVudE5vZGV8fG4uaG9zdH13aGlsZShuKX1yZXR1cm4hMX1mdW5jdGlvbiBadCh0KXtyZXR1cm4gJHQodCkuZ2V0Q29tcHV0ZWRTdHlsZSh0KX1mdW5jdGlvbiB0ZSh0KXtyZXR1cm5bXCJ0YWJsZVwiLFwidGRcIixcInRoXCJdLmluZGV4T2YoSHQodCkpPj0wfWZ1bmN0aW9uIGVlKHQpe3JldHVybigoV3QodCk/dC5vd25lckRvY3VtZW50OnQuZG9jdW1lbnQpfHx3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiBpZSh0KXtyZXR1cm5cImh0bWxcIj09PUh0KHQpP3Q6dC5hc3NpZ25lZFNsb3R8fHQucGFyZW50Tm9kZXx8KHp0KHQpP3QuaG9zdDpudWxsKXx8ZWUodCl9ZnVuY3Rpb24gbmUodCl7cmV0dXJuIEJ0KHQpJiZcImZpeGVkXCIhPT1adCh0KS5wb3NpdGlvbj90Lm9mZnNldFBhcmVudDpudWxsfWZ1bmN0aW9uIHNlKHQpe2Zvcih2YXIgZT0kdCh0KSxpPW5lKHQpO2kmJnRlKGkpJiZcInN0YXRpY1wiPT09WnQoaSkucG9zaXRpb247KWk9bmUoaSk7cmV0dXJuIGkmJihcImh0bWxcIj09PUh0KGkpfHxcImJvZHlcIj09PUh0KGkpJiZcInN0YXRpY1wiPT09WnQoaSkucG9zaXRpb24pP2U6aXx8ZnVuY3Rpb24odCl7dmFyIGU9L2ZpcmVmb3gvaS50ZXN0KFh0KCkpO2lmKC9UcmlkZW50L2kudGVzdChYdCgpKSYmQnQodCkmJlwiZml4ZWRcIj09PVp0KHQpLnBvc2l0aW9uKXJldHVybiBudWxsO3ZhciBpPWllKHQpO2Zvcih6dChpKSYmKGk9aS5ob3N0KTtCdChpKSYmW1wiaHRtbFwiLFwiYm9keVwiXS5pbmRleE9mKEh0KGkpKTwwOyl7dmFyIG49WnQoaSk7aWYoXCJub25lXCIhPT1uLnRyYW5zZm9ybXx8XCJub25lXCIhPT1uLnBlcnNwZWN0aXZlfHxcInBhaW50XCI9PT1uLmNvbnRhaW58fC0xIT09W1widHJhbnNmb3JtXCIsXCJwZXJzcGVjdGl2ZVwiXS5pbmRleE9mKG4ud2lsbENoYW5nZSl8fGUmJlwiZmlsdGVyXCI9PT1uLndpbGxDaGFuZ2V8fGUmJm4uZmlsdGVyJiZcIm5vbmVcIiE9PW4uZmlsdGVyKXJldHVybiBpO2k9aS5wYXJlbnROb2RlfXJldHVybiBudWxsfSh0KXx8ZX1mdW5jdGlvbiBvZSh0KXtyZXR1cm5bXCJ0b3BcIixcImJvdHRvbVwiXS5pbmRleE9mKHQpPj0wP1wieFwiOlwieVwifWZ1bmN0aW9uIHJlKHQsZSxpKXtyZXR1cm4gVnQodCxLdChlLGkpKX1mdW5jdGlvbiBhZSh0KXtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSx7dG9wOjAscmlnaHQ6MCxib3R0b206MCxsZWZ0OjB9LHQpfWZ1bmN0aW9uIGxlKHQsZSl7cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbihlLGkpe3JldHVybiBlW2ldPXQsZX0pLHt9KX1jb25zdCBjZT17bmFtZTpcImFycm93XCIsZW5hYmxlZDohMCxwaGFzZTpcIm1haW5cIixmbjpmdW5jdGlvbih0KXt2YXIgZSxpPXQuc3RhdGUsbj10Lm5hbWUscz10Lm9wdGlvbnMsbz1pLmVsZW1lbnRzLmFycm93LHI9aS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsYT1xdChpLnBsYWNlbWVudCksbD1vZShhKSxjPVtfdCxndF0uaW5kZXhPZihhKT49MD9cImhlaWdodFwiOlwid2lkdGhcIjtpZihvJiZyKXt2YXIgaD1mdW5jdGlvbih0LGUpe3JldHVybiBhZShcIm51bWJlclwiIT10eXBlb2YodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3QoT2JqZWN0LmFzc2lnbih7fSxlLnJlY3RzLHtwbGFjZW1lbnQ6ZS5wbGFjZW1lbnR9KSk6dCk/dDpsZSh0LHZ0KSl9KHMucGFkZGluZyxpKSxkPUd0KG8pLHU9XCJ5XCI9PT1sP3B0Ol90LGY9XCJ5XCI9PT1sP210Omd0LHA9aS5yZWN0cy5yZWZlcmVuY2VbY10raS5yZWN0cy5yZWZlcmVuY2VbbF0tcltsXS1pLnJlY3RzLnBvcHBlcltjXSxtPXJbbF0taS5yZWN0cy5yZWZlcmVuY2VbbF0sZz1zZShvKSxfPWc/XCJ5XCI9PT1sP2cuY2xpZW50SGVpZ2h0fHwwOmcuY2xpZW50V2lkdGh8fDA6MCxiPXAvMi1tLzIsdj1oW3VdLHk9Xy1kW2NdLWhbZl0sdz1fLzItZFtjXS8yK2IsQT1yZSh2LHcseSksRT1sO2kubW9kaWZpZXJzRGF0YVtuXT0oKGU9e30pW0VdPUEsZS5jZW50ZXJPZmZzZXQ9QS13LGUpfX0sZWZmZWN0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUsaT10Lm9wdGlvbnMuZWxlbWVudCxuPXZvaWQgMD09PWk/XCJbZGF0YS1wb3BwZXItYXJyb3ddXCI6aTtudWxsIT1uJiYoXCJzdHJpbmdcIiE9dHlwZW9mIG58fChuPWUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IobikpKSYmSnQoZS5lbGVtZW50cy5wb3BwZXIsbikmJihlLmVsZW1lbnRzLmFycm93PW4pfSxyZXF1aXJlczpbXCJwb3BwZXJPZmZzZXRzXCJdLHJlcXVpcmVzSWZFeGlzdHM6W1wicHJldmVudE92ZXJmbG93XCJdfTtmdW5jdGlvbiBoZSh0KXtyZXR1cm4gdC5zcGxpdChcIi1cIilbMV19dmFyIGRlPXt0b3A6XCJhdXRvXCIscmlnaHQ6XCJhdXRvXCIsYm90dG9tOlwiYXV0b1wiLGxlZnQ6XCJhdXRvXCJ9O2Z1bmN0aW9uIHVlKHQpe3ZhciBlLGk9dC5wb3BwZXIsbj10LnBvcHBlclJlY3Qscz10LnBsYWNlbWVudCxvPXQudmFyaWF0aW9uLHI9dC5vZmZzZXRzLGE9dC5wb3NpdGlvbixsPXQuZ3B1QWNjZWxlcmF0aW9uLGM9dC5hZGFwdGl2ZSxoPXQucm91bmRPZmZzZXRzLGQ9dC5pc0ZpeGVkLHU9ci54LGY9dm9pZCAwPT09dT8wOnUscD1yLnksbT12b2lkIDA9PT1wPzA6cCxnPVwiZnVuY3Rpb25cIj09dHlwZW9mIGg/aCh7eDpmLHk6bX0pOnt4OmYseTptfTtmPWcueCxtPWcueTt2YXIgXz1yLmhhc093blByb3BlcnR5KFwieFwiKSxiPXIuaGFzT3duUHJvcGVydHkoXCJ5XCIpLHY9X3QseT1wdCx3PXdpbmRvdztpZihjKXt2YXIgQT1zZShpKSxFPVwiY2xpZW50SGVpZ2h0XCIsVD1cImNsaWVudFdpZHRoXCI7QT09PSR0KGkpJiZcInN0YXRpY1wiIT09WnQoQT1lZShpKSkucG9zaXRpb24mJlwiYWJzb2x1dGVcIj09PWEmJihFPVwic2Nyb2xsSGVpZ2h0XCIsVD1cInNjcm9sbFdpZHRoXCIpLChzPT09cHR8fChzPT09X3R8fHM9PT1ndCkmJm89PT13dCkmJih5PW10LG0tPShkJiZBPT09dyYmdy52aXN1YWxWaWV3cG9ydD93LnZpc3VhbFZpZXdwb3J0LmhlaWdodDpBW0VdKS1uLmhlaWdodCxtKj1sPzE6LTEpLHMhPT1fdCYmKHMhPT1wdCYmcyE9PW10fHxvIT09d3QpfHwodj1ndCxmLT0oZCYmQT09PXcmJncudmlzdWFsVmlld3BvcnQ/dy52aXN1YWxWaWV3cG9ydC53aWR0aDpBW1RdKS1uLndpZHRoLGYqPWw/MTotMSl9dmFyIEMsTz1PYmplY3QuYXNzaWduKHtwb3NpdGlvbjphfSxjJiZkZSkseD0hMD09PWg/ZnVuY3Rpb24odCl7dmFyIGU9dC54LGk9dC55LG49d2luZG93LmRldmljZVBpeGVsUmF0aW98fDE7cmV0dXJue3g6UXQoZSpuKS9ufHwwLHk6UXQoaSpuKS9ufHwwfX0oe3g6Zix5Om19KTp7eDpmLHk6bX07cmV0dXJuIGY9eC54LG09eC55LGw/T2JqZWN0LmFzc2lnbih7fSxPLCgoQz17fSlbeV09Yj9cIjBcIjpcIlwiLENbdl09Xz9cIjBcIjpcIlwiLEMudHJhbnNmb3JtPSh3LmRldmljZVBpeGVsUmF0aW98fDEpPD0xP1widHJhbnNsYXRlKFwiK2YrXCJweCwgXCIrbStcInB4KVwiOlwidHJhbnNsYXRlM2QoXCIrZitcInB4LCBcIittK1wicHgsIDApXCIsQykpOk9iamVjdC5hc3NpZ24oe30sTywoKGU9e30pW3ldPWI/bStcInB4XCI6XCJcIixlW3ZdPV8/ZitcInB4XCI6XCJcIixlLnRyYW5zZm9ybT1cIlwiLGUpKX1jb25zdCBmZT17bmFtZTpcImNvbXB1dGVTdHlsZXNcIixlbmFibGVkOiEwLHBoYXNlOlwiYmVmb3JlV3JpdGVcIixmbjpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLGk9dC5vcHRpb25zLG49aS5ncHVBY2NlbGVyYXRpb24scz12b2lkIDA9PT1ufHxuLG89aS5hZGFwdGl2ZSxyPXZvaWQgMD09PW98fG8sYT1pLnJvdW5kT2Zmc2V0cyxsPXZvaWQgMD09PWF8fGEsYz17cGxhY2VtZW50OnF0KGUucGxhY2VtZW50KSx2YXJpYXRpb246aGUoZS5wbGFjZW1lbnQpLHBvcHBlcjplLmVsZW1lbnRzLnBvcHBlcixwb3BwZXJSZWN0OmUucmVjdHMucG9wcGVyLGdwdUFjY2VsZXJhdGlvbjpzLGlzRml4ZWQ6XCJmaXhlZFwiPT09ZS5vcHRpb25zLnN0cmF0ZWd5fTtudWxsIT1lLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyYmKGUuc3R5bGVzLnBvcHBlcj1PYmplY3QuYXNzaWduKHt9LGUuc3R5bGVzLnBvcHBlcix1ZShPYmplY3QuYXNzaWduKHt9LGMse29mZnNldHM6ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMscG9zaXRpb246ZS5vcHRpb25zLnN0cmF0ZWd5LGFkYXB0aXZlOnIscm91bmRPZmZzZXRzOmx9KSkpKSxudWxsIT1lLm1vZGlmaWVyc0RhdGEuYXJyb3cmJihlLnN0eWxlcy5hcnJvdz1PYmplY3QuYXNzaWduKHt9LGUuc3R5bGVzLmFycm93LHVlKE9iamVjdC5hc3NpZ24oe30sYyx7b2Zmc2V0czplLm1vZGlmaWVyc0RhdGEuYXJyb3cscG9zaXRpb246XCJhYnNvbHV0ZVwiLGFkYXB0aXZlOiExLHJvdW5kT2Zmc2V0czpsfSkpKSksZS5hdHRyaWJ1dGVzLnBvcHBlcj1PYmplY3QuYXNzaWduKHt9LGUuYXR0cmlidXRlcy5wb3BwZXIse1wiZGF0YS1wb3BwZXItcGxhY2VtZW50XCI6ZS5wbGFjZW1lbnR9KX0sZGF0YTp7fX07dmFyIHBlPXtwYXNzaXZlOiEwfTtjb25zdCBtZT17bmFtZTpcImV2ZW50TGlzdGVuZXJzXCIsZW5hYmxlZDohMCxwaGFzZTpcIndyaXRlXCIsZm46ZnVuY3Rpb24oKXt9LGVmZmVjdDpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLGk9dC5pbnN0YW5jZSxuPXQub3B0aW9ucyxzPW4uc2Nyb2xsLG89dm9pZCAwPT09c3x8cyxyPW4ucmVzaXplLGE9dm9pZCAwPT09cnx8cixsPSR0KGUuZWxlbWVudHMucG9wcGVyKSxjPVtdLmNvbmNhdChlLnNjcm9sbFBhcmVudHMucmVmZXJlbmNlLGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO3JldHVybiBvJiZjLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGkudXBkYXRlLHBlKX0pKSxhJiZsLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixpLnVwZGF0ZSxwZSksZnVuY3Rpb24oKXtvJiZjLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGkudXBkYXRlLHBlKX0pKSxhJiZsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixpLnVwZGF0ZSxwZSl9fSxkYXRhOnt9fTt2YXIgZ2U9e2xlZnQ6XCJyaWdodFwiLHJpZ2h0OlwibGVmdFwiLGJvdHRvbTpcInRvcFwiLHRvcDpcImJvdHRvbVwifTtmdW5jdGlvbiBfZSh0KXtyZXR1cm4gdC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywoZnVuY3Rpb24odCl7cmV0dXJuIGdlW3RdfSkpfXZhciBiZT17c3RhcnQ6XCJlbmRcIixlbmQ6XCJzdGFydFwifTtmdW5jdGlvbiB2ZSh0KXtyZXR1cm4gdC5yZXBsYWNlKC9zdGFydHxlbmQvZywoZnVuY3Rpb24odCl7cmV0dXJuIGJlW3RdfSkpfWZ1bmN0aW9uIHllKHQpe3ZhciBlPSR0KHQpO3JldHVybntzY3JvbGxMZWZ0OmUucGFnZVhPZmZzZXQsc2Nyb2xsVG9wOmUucGFnZVlPZmZzZXR9fWZ1bmN0aW9uIHdlKHQpe3JldHVybiBVdChlZSh0KSkubGVmdCt5ZSh0KS5zY3JvbGxMZWZ0fWZ1bmN0aW9uIEFlKHQpe3ZhciBlPVp0KHQpLGk9ZS5vdmVyZmxvdyxuPWUub3ZlcmZsb3dYLHM9ZS5vdmVyZmxvd1k7cmV0dXJuL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KGkrcytuKX1mdW5jdGlvbiBFZSh0KXtyZXR1cm5bXCJodG1sXCIsXCJib2R5XCIsXCIjZG9jdW1lbnRcIl0uaW5kZXhPZihIdCh0KSk+PTA/dC5vd25lckRvY3VtZW50LmJvZHk6QnQodCkmJkFlKHQpP3Q6RWUoaWUodCkpfWZ1bmN0aW9uIFRlKHQsZSl7dmFyIGk7dm9pZCAwPT09ZSYmKGU9W10pO3ZhciBuPUVlKHQpLHM9bj09PShudWxsPT0oaT10Lm93bmVyRG9jdW1lbnQpP3ZvaWQgMDppLmJvZHkpLG89JHQobikscj1zP1tvXS5jb25jYXQoby52aXN1YWxWaWV3cG9ydHx8W10sQWUobik/bjpbXSk6bixhPWUuY29uY2F0KHIpO3JldHVybiBzP2E6YS5jb25jYXQoVGUoaWUocikpKX1mdW5jdGlvbiBDZSh0KXtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSx0LHtsZWZ0OnQueCx0b3A6dC55LHJpZ2h0OnQueCt0LndpZHRoLGJvdHRvbTp0LnkrdC5oZWlnaHR9KX1mdW5jdGlvbiBPZSh0LGUsaSl7cmV0dXJuIGU9PT1FdD9DZShmdW5jdGlvbih0LGUpe3ZhciBpPSR0KHQpLG49ZWUodCkscz1pLnZpc3VhbFZpZXdwb3J0LG89bi5jbGllbnRXaWR0aCxyPW4uY2xpZW50SGVpZ2h0LGE9MCxsPTA7aWYocyl7bz1zLndpZHRoLHI9cy5oZWlnaHQ7dmFyIGM9WXQoKTsoY3x8IWMmJlwiZml4ZWRcIj09PWUpJiYoYT1zLm9mZnNldExlZnQsbD1zLm9mZnNldFRvcCl9cmV0dXJue3dpZHRoOm8saGVpZ2h0OnIseDphK3dlKHQpLHk6bH19KHQsaSkpOld0KGUpP2Z1bmN0aW9uKHQsZSl7dmFyIGk9VXQodCwhMSxcImZpeGVkXCI9PT1lKTtyZXR1cm4gaS50b3A9aS50b3ArdC5jbGllbnRUb3AsaS5sZWZ0PWkubGVmdCt0LmNsaWVudExlZnQsaS5ib3R0b209aS50b3ArdC5jbGllbnRIZWlnaHQsaS5yaWdodD1pLmxlZnQrdC5jbGllbnRXaWR0aCxpLndpZHRoPXQuY2xpZW50V2lkdGgsaS5oZWlnaHQ9dC5jbGllbnRIZWlnaHQsaS54PWkubGVmdCxpLnk9aS50b3AsaX0oZSxpKTpDZShmdW5jdGlvbih0KXt2YXIgZSxpPWVlKHQpLG49eWUodCkscz1udWxsPT0oZT10Lm93bmVyRG9jdW1lbnQpP3ZvaWQgMDplLmJvZHksbz1WdChpLnNjcm9sbFdpZHRoLGkuY2xpZW50V2lkdGgscz9zLnNjcm9sbFdpZHRoOjAscz9zLmNsaWVudFdpZHRoOjApLHI9VnQoaS5zY3JvbGxIZWlnaHQsaS5jbGllbnRIZWlnaHQscz9zLnNjcm9sbEhlaWdodDowLHM/cy5jbGllbnRIZWlnaHQ6MCksYT0tbi5zY3JvbGxMZWZ0K3dlKHQpLGw9LW4uc2Nyb2xsVG9wO3JldHVyblwicnRsXCI9PT1adChzfHxpKS5kaXJlY3Rpb24mJihhKz1WdChpLmNsaWVudFdpZHRoLHM/cy5jbGllbnRXaWR0aDowKS1vKSx7d2lkdGg6byxoZWlnaHQ6cix4OmEseTpsfX0oZWUodCkpKX1mdW5jdGlvbiB4ZSh0KXt2YXIgZSxpPXQucmVmZXJlbmNlLG49dC5lbGVtZW50LHM9dC5wbGFjZW1lbnQsbz1zP3F0KHMpOm51bGwscj1zP2hlKHMpOm51bGwsYT1pLngraS53aWR0aC8yLW4ud2lkdGgvMixsPWkueStpLmhlaWdodC8yLW4uaGVpZ2h0LzI7c3dpdGNoKG8pe2Nhc2UgcHQ6ZT17eDphLHk6aS55LW4uaGVpZ2h0fTticmVhaztjYXNlIG10OmU9e3g6YSx5OmkueStpLmhlaWdodH07YnJlYWs7Y2FzZSBndDplPXt4OmkueCtpLndpZHRoLHk6bH07YnJlYWs7Y2FzZSBfdDplPXt4OmkueC1uLndpZHRoLHk6bH07YnJlYWs7ZGVmYXVsdDplPXt4OmkueCx5OmkueX19dmFyIGM9bz9vZShvKTpudWxsO2lmKG51bGwhPWMpe3ZhciBoPVwieVwiPT09Yz9cImhlaWdodFwiOlwid2lkdGhcIjtzd2l0Y2gocil7Y2FzZSB5dDplW2NdPWVbY10tKGlbaF0vMi1uW2hdLzIpO2JyZWFrO2Nhc2Ugd3Q6ZVtjXT1lW2NdKyhpW2hdLzItbltoXS8yKX19cmV0dXJuIGV9ZnVuY3Rpb24ga2UodCxlKXt2b2lkIDA9PT1lJiYoZT17fSk7dmFyIGk9ZSxuPWkucGxhY2VtZW50LHM9dm9pZCAwPT09bj90LnBsYWNlbWVudDpuLG89aS5zdHJhdGVneSxyPXZvaWQgMD09PW8/dC5zdHJhdGVneTpvLGE9aS5ib3VuZGFyeSxsPXZvaWQgMD09PWE/QXQ6YSxjPWkucm9vdEJvdW5kYXJ5LGg9dm9pZCAwPT09Yz9FdDpjLGQ9aS5lbGVtZW50Q29udGV4dCx1PXZvaWQgMD09PWQ/VHQ6ZCxmPWkuYWx0Qm91bmRhcnkscD12b2lkIDAhPT1mJiZmLG09aS5wYWRkaW5nLGc9dm9pZCAwPT09bT8wOm0sXz1hZShcIm51bWJlclwiIT10eXBlb2YgZz9nOmxlKGcsdnQpKSxiPXU9PT1UdD9DdDpUdCx2PXQucmVjdHMucG9wcGVyLHk9dC5lbGVtZW50c1twP2I6dV0sdz1mdW5jdGlvbih0LGUsaSxuKXt2YXIgcz1cImNsaXBwaW5nUGFyZW50c1wiPT09ZT9mdW5jdGlvbih0KXt2YXIgZT1UZShpZSh0KSksaT1bXCJhYnNvbHV0ZVwiLFwiZml4ZWRcIl0uaW5kZXhPZihadCh0KS5wb3NpdGlvbik+PTAmJkJ0KHQpP3NlKHQpOnQ7cmV0dXJuIFd0KGkpP2UuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gV3QodCkmJkp0KHQsaSkmJlwiYm9keVwiIT09SHQodCl9KSk6W119KHQpOltdLmNvbmNhdChlKSxvPVtdLmNvbmNhdChzLFtpXSkscj1vWzBdLGE9by5yZWR1Y2UoKGZ1bmN0aW9uKGUsaSl7dmFyIHM9T2UodCxpLG4pO3JldHVybiBlLnRvcD1WdChzLnRvcCxlLnRvcCksZS5yaWdodD1LdChzLnJpZ2h0LGUucmlnaHQpLGUuYm90dG9tPUt0KHMuYm90dG9tLGUuYm90dG9tKSxlLmxlZnQ9VnQocy5sZWZ0LGUubGVmdCksZX0pLE9lKHQscixuKSk7cmV0dXJuIGEud2lkdGg9YS5yaWdodC1hLmxlZnQsYS5oZWlnaHQ9YS5ib3R0b20tYS50b3AsYS54PWEubGVmdCxhLnk9YS50b3AsYX0oV3QoeSk/eTp5LmNvbnRleHRFbGVtZW50fHxlZSh0LmVsZW1lbnRzLnBvcHBlciksbCxoLHIpLEE9VXQodC5lbGVtZW50cy5yZWZlcmVuY2UpLEU9eGUoe3JlZmVyZW5jZTpBLGVsZW1lbnQ6dixzdHJhdGVneTpcImFic29sdXRlXCIscGxhY2VtZW50OnN9KSxUPUNlKE9iamVjdC5hc3NpZ24oe30sdixFKSksQz11PT09VHQ/VDpBLE89e3RvcDp3LnRvcC1DLnRvcCtfLnRvcCxib3R0b206Qy5ib3R0b20tdy5ib3R0b20rXy5ib3R0b20sbGVmdDp3LmxlZnQtQy5sZWZ0K18ubGVmdCxyaWdodDpDLnJpZ2h0LXcucmlnaHQrXy5yaWdodH0seD10Lm1vZGlmaWVyc0RhdGEub2Zmc2V0O2lmKHU9PT1UdCYmeCl7dmFyIGs9eFtzXTtPYmplY3Qua2V5cyhPKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT1bZ3QsbXRdLmluZGV4T2YodCk+PTA/MTotMSxpPVtwdCxtdF0uaW5kZXhPZih0KT49MD9cInlcIjpcInhcIjtPW3RdKz1rW2ldKmV9KSl9cmV0dXJuIE99ZnVuY3Rpb24gTGUodCxlKXt2b2lkIDA9PT1lJiYoZT17fSk7dmFyIGk9ZSxuPWkucGxhY2VtZW50LHM9aS5ib3VuZGFyeSxvPWkucm9vdEJvdW5kYXJ5LHI9aS5wYWRkaW5nLGE9aS5mbGlwVmFyaWF0aW9ucyxsPWkuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLGM9dm9pZCAwPT09bD94dDpsLGg9aGUobiksZD1oP2E/T3Q6T3QuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gaGUodCk9PT1ofSkpOnZ0LHU9ZC5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBjLmluZGV4T2YodCk+PTB9KSk7MD09PXUubGVuZ3RoJiYodT1kKTt2YXIgZj11LnJlZHVjZSgoZnVuY3Rpb24oZSxpKXtyZXR1cm4gZVtpXT1rZSh0LHtwbGFjZW1lbnQ6aSxib3VuZGFyeTpzLHJvb3RCb3VuZGFyeTpvLHBhZGRpbmc6cn0pW3F0KGkpXSxlfSkse30pO3JldHVybiBPYmplY3Qua2V5cyhmKS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiBmW3RdLWZbZV19KSl9Y29uc3QgU2U9e25hbWU6XCJmbGlwXCIsZW5hYmxlZDohMCxwaGFzZTpcIm1haW5cIixmbjpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLGk9dC5vcHRpb25zLG49dC5uYW1lO2lmKCFlLm1vZGlmaWVyc0RhdGFbbl0uX3NraXApe2Zvcih2YXIgcz1pLm1haW5BeGlzLG89dm9pZCAwPT09c3x8cyxyPWkuYWx0QXhpcyxhPXZvaWQgMD09PXJ8fHIsbD1pLmZhbGxiYWNrUGxhY2VtZW50cyxjPWkucGFkZGluZyxoPWkuYm91bmRhcnksZD1pLnJvb3RCb3VuZGFyeSx1PWkuYWx0Qm91bmRhcnksZj1pLmZsaXBWYXJpYXRpb25zLHA9dm9pZCAwPT09Znx8ZixtPWkuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLGc9ZS5vcHRpb25zLnBsYWNlbWVudCxfPXF0KGcpLGI9bHx8KF8hPT1nJiZwP2Z1bmN0aW9uKHQpe2lmKHF0KHQpPT09YnQpcmV0dXJuW107dmFyIGU9X2UodCk7cmV0dXJuW3ZlKHQpLGUsdmUoZSldfShnKTpbX2UoZyldKSx2PVtnXS5jb25jYXQoYikucmVkdWNlKChmdW5jdGlvbih0LGkpe3JldHVybiB0LmNvbmNhdChxdChpKT09PWJ0P0xlKGUse3BsYWNlbWVudDppLGJvdW5kYXJ5Omgscm9vdEJvdW5kYXJ5OmQscGFkZGluZzpjLGZsaXBWYXJpYXRpb25zOnAsYWxsb3dlZEF1dG9QbGFjZW1lbnRzOm19KTppKX0pLFtdKSx5PWUucmVjdHMucmVmZXJlbmNlLHc9ZS5yZWN0cy5wb3BwZXIsQT1uZXcgTWFwLEU9ITAsVD12WzBdLEM9MDtDPHYubGVuZ3RoO0MrKyl7dmFyIE89dltDXSx4PXF0KE8pLGs9aGUoTyk9PT15dCxMPVtwdCxtdF0uaW5kZXhPZih4KT49MCxTPUw/XCJ3aWR0aFwiOlwiaGVpZ2h0XCIsRD1rZShlLHtwbGFjZW1lbnQ6Tyxib3VuZGFyeTpoLHJvb3RCb3VuZGFyeTpkLGFsdEJvdW5kYXJ5OnUscGFkZGluZzpjfSksST1MP2s/Z3Q6X3Q6az9tdDpwdDt5W1NdPndbU10mJihJPV9lKEkpKTt2YXIgTj1fZShJKSxQPVtdO2lmKG8mJlAucHVzaChEW3hdPD0wKSxhJiZQLnB1c2goRFtJXTw9MCxEW05dPD0wKSxQLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdH0pKSl7VD1PLEU9ITE7YnJlYWt9QS5zZXQoTyxQKX1pZihFKWZvcih2YXIgaj1mdW5jdGlvbih0KXt2YXIgZT12LmZpbmQoKGZ1bmN0aW9uKGUpe3ZhciBpPUEuZ2V0KGUpO2lmKGkpcmV0dXJuIGkuc2xpY2UoMCx0KS5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIHR9KSl9KSk7aWYoZSlyZXR1cm4gVD1lLFwiYnJlYWtcIn0sTT1wPzM6MTtNPjAmJlwiYnJlYWtcIiE9PWooTSk7TS0tKTtlLnBsYWNlbWVudCE9PVQmJihlLm1vZGlmaWVyc0RhdGFbbl0uX3NraXA9ITAsZS5wbGFjZW1lbnQ9VCxlLnJlc2V0PSEwKX19LHJlcXVpcmVzSWZFeGlzdHM6W1wib2Zmc2V0XCJdLGRhdGE6e19za2lwOiExfX07ZnVuY3Rpb24gRGUodCxlLGkpe3JldHVybiB2b2lkIDA9PT1pJiYoaT17eDowLHk6MH0pLHt0b3A6dC50b3AtZS5oZWlnaHQtaS55LHJpZ2h0OnQucmlnaHQtZS53aWR0aCtpLngsYm90dG9tOnQuYm90dG9tLWUuaGVpZ2h0K2kueSxsZWZ0OnQubGVmdC1lLndpZHRoLWkueH19ZnVuY3Rpb24gSWUodCl7cmV0dXJuW3B0LGd0LG10LF90XS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gdFtlXT49MH0pKX1jb25zdCBOZT17bmFtZTpcImhpZGVcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLHJlcXVpcmVzSWZFeGlzdHM6W1wicHJldmVudE92ZXJmbG93XCJdLGZuOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUsaT10Lm5hbWUsbj1lLnJlY3RzLnJlZmVyZW5jZSxzPWUucmVjdHMucG9wcGVyLG89ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdyxyPWtlKGUse2VsZW1lbnRDb250ZXh0OlwicmVmZXJlbmNlXCJ9KSxhPWtlKGUse2FsdEJvdW5kYXJ5OiEwfSksbD1EZShyLG4pLGM9RGUoYSxzLG8pLGg9SWUobCksZD1JZShjKTtlLm1vZGlmaWVyc0RhdGFbaV09e3JlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czpsLHBvcHBlckVzY2FwZU9mZnNldHM6Yyxpc1JlZmVyZW5jZUhpZGRlbjpoLGhhc1BvcHBlckVzY2FwZWQ6ZH0sZS5hdHRyaWJ1dGVzLnBvcHBlcj1PYmplY3QuYXNzaWduKHt9LGUuYXR0cmlidXRlcy5wb3BwZXIse1wiZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlblwiOmgsXCJkYXRhLXBvcHBlci1lc2NhcGVkXCI6ZH0pfX0sUGU9e25hbWU6XCJvZmZzZXRcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLHJlcXVpcmVzOltcInBvcHBlck9mZnNldHNcIl0sZm46ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxpPXQub3B0aW9ucyxuPXQubmFtZSxzPWkub2Zmc2V0LG89dm9pZCAwPT09cz9bMCwwXTpzLHI9eHQucmVkdWNlKChmdW5jdGlvbih0LGkpe3JldHVybiB0W2ldPWZ1bmN0aW9uKHQsZSxpKXt2YXIgbj1xdCh0KSxzPVtfdCxwdF0uaW5kZXhPZihuKT49MD8tMToxLG89XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pKE9iamVjdC5hc3NpZ24oe30sZSx7cGxhY2VtZW50OnR9KSk6aSxyPW9bMF0sYT1vWzFdO3JldHVybiByPXJ8fDAsYT0oYXx8MCkqcyxbX3QsZ3RdLmluZGV4T2Yobik+PTA/e3g6YSx5OnJ9Ont4OnIseTphfX0oaSxlLnJlY3RzLG8pLHR9KSx7fSksYT1yW2UucGxhY2VtZW50XSxsPWEueCxjPWEueTtudWxsIT1lLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyYmKGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLngrPWwsZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSs9YyksZS5tb2RpZmllcnNEYXRhW25dPXJ9fSxqZT17bmFtZTpcInBvcHBlck9mZnNldHNcIixlbmFibGVkOiEwLHBoYXNlOlwicmVhZFwiLGZuOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUsaT10Lm5hbWU7ZS5tb2RpZmllcnNEYXRhW2ldPXhlKHtyZWZlcmVuY2U6ZS5yZWN0cy5yZWZlcmVuY2UsZWxlbWVudDplLnJlY3RzLnBvcHBlcixzdHJhdGVneTpcImFic29sdXRlXCIscGxhY2VtZW50OmUucGxhY2VtZW50fSl9LGRhdGE6e319LE1lPXtuYW1lOlwicHJldmVudE92ZXJmbG93XCIsZW5hYmxlZDohMCxwaGFzZTpcIm1haW5cIixmbjpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLGk9dC5vcHRpb25zLG49dC5uYW1lLHM9aS5tYWluQXhpcyxvPXZvaWQgMD09PXN8fHMscj1pLmFsdEF4aXMsYT12b2lkIDAhPT1yJiZyLGw9aS5ib3VuZGFyeSxjPWkucm9vdEJvdW5kYXJ5LGg9aS5hbHRCb3VuZGFyeSxkPWkucGFkZGluZyx1PWkudGV0aGVyLGY9dm9pZCAwPT09dXx8dSxwPWkudGV0aGVyT2Zmc2V0LG09dm9pZCAwPT09cD8wOnAsZz1rZShlLHtib3VuZGFyeTpsLHJvb3RCb3VuZGFyeTpjLHBhZGRpbmc6ZCxhbHRCb3VuZGFyeTpofSksXz1xdChlLnBsYWNlbWVudCksYj1oZShlLnBsYWNlbWVudCksdj0hYix5PW9lKF8pLHc9XCJ4XCI9PT15P1wieVwiOlwieFwiLEE9ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsRT1lLnJlY3RzLnJlZmVyZW5jZSxUPWUucmVjdHMucG9wcGVyLEM9XCJmdW5jdGlvblwiPT10eXBlb2YgbT9tKE9iamVjdC5hc3NpZ24oe30sZS5yZWN0cyx7cGxhY2VtZW50OmUucGxhY2VtZW50fSkpOm0sTz1cIm51bWJlclwiPT10eXBlb2YgQz97bWFpbkF4aXM6QyxhbHRBeGlzOkN9Ok9iamVjdC5hc3NpZ24oe21haW5BeGlzOjAsYWx0QXhpczowfSxDKSx4PWUubW9kaWZpZXJzRGF0YS5vZmZzZXQ/ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtlLnBsYWNlbWVudF06bnVsbCxrPXt4OjAseTowfTtpZihBKXtpZihvKXt2YXIgTCxTPVwieVwiPT09eT9wdDpfdCxEPVwieVwiPT09eT9tdDpndCxJPVwieVwiPT09eT9cImhlaWdodFwiOlwid2lkdGhcIixOPUFbeV0sUD1OK2dbU10saj1OLWdbRF0sTT1mPy1UW0ldLzI6MCxGPWI9PT15dD9FW0ldOlRbSV0sSD1iPT09eXQ/LVRbSV06LUVbSV0sJD1lLmVsZW1lbnRzLmFycm93LFc9ZiYmJD9HdCgkKTp7d2lkdGg6MCxoZWlnaHQ6MH0sQj1lLm1vZGlmaWVyc0RhdGFbXCJhcnJvdyNwZXJzaXN0ZW50XCJdP2UubW9kaWZpZXJzRGF0YVtcImFycm93I3BlcnNpc3RlbnRcIl0ucGFkZGluZzp7dG9wOjAscmlnaHQ6MCxib3R0b206MCxsZWZ0OjB9LHo9QltTXSxSPUJbRF0scT1yZSgwLEVbSV0sV1tJXSksVj12P0VbSV0vMi1NLXEtei1PLm1haW5BeGlzOkYtcS16LU8ubWFpbkF4aXMsSz12Py1FW0ldLzIrTStxK1IrTy5tYWluQXhpczpIK3ErUitPLm1haW5BeGlzLFE9ZS5lbGVtZW50cy5hcnJvdyYmc2UoZS5lbGVtZW50cy5hcnJvdyksWD1RP1wieVwiPT09eT9RLmNsaWVudFRvcHx8MDpRLmNsaWVudExlZnR8fDA6MCxZPW51bGwhPShMPW51bGw9PXg/dm9pZCAwOnhbeV0pP0w6MCxVPU4rSy1ZLEc9cmUoZj9LdChQLE4rVi1ZLVgpOlAsTixmP1Z0KGosVSk6aik7QVt5XT1HLGtbeV09Ry1OfWlmKGEpe3ZhciBKLFo9XCJ4XCI9PT15P3B0Ol90LHR0PVwieFwiPT09eT9tdDpndCxldD1BW3ddLGl0PVwieVwiPT09dz9cImhlaWdodFwiOlwid2lkdGhcIixudD1ldCtnW1pdLHN0PWV0LWdbdHRdLG90PS0xIT09W3B0LF90XS5pbmRleE9mKF8pLHJ0PW51bGwhPShKPW51bGw9PXg/dm9pZCAwOnhbd10pP0o6MCxhdD1vdD9udDpldC1FW2l0XS1UW2l0XS1ydCtPLmFsdEF4aXMsbHQ9b3Q/ZXQrRVtpdF0rVFtpdF0tcnQtTy5hbHRBeGlzOnN0LGN0PWYmJm90P2Z1bmN0aW9uKHQsZSxpKXt2YXIgbj1yZSh0LGUsaSk7cmV0dXJuIG4+aT9pOm59KGF0LGV0LGx0KTpyZShmP2F0Om50LGV0LGY/bHQ6c3QpO0Fbd109Y3Qsa1t3XT1jdC1ldH1lLm1vZGlmaWVyc0RhdGFbbl09a319LHJlcXVpcmVzSWZFeGlzdHM6W1wib2Zmc2V0XCJdfTtmdW5jdGlvbiBGZSh0LGUsaSl7dm9pZCAwPT09aSYmKGk9ITEpO3ZhciBuLHMsbz1CdChlKSxyPUJ0KGUpJiZmdW5jdGlvbih0KXt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9UXQoZS53aWR0aCkvdC5vZmZzZXRXaWR0aHx8MSxuPVF0KGUuaGVpZ2h0KS90Lm9mZnNldEhlaWdodHx8MTtyZXR1cm4gMSE9PWl8fDEhPT1ufShlKSxhPWVlKGUpLGw9VXQodCxyLGkpLGM9e3Njcm9sbExlZnQ6MCxzY3JvbGxUb3A6MH0saD17eDowLHk6MH07cmV0dXJuKG98fCFvJiYhaSkmJigoXCJib2R5XCIhPT1IdChlKXx8QWUoYSkpJiYoYz0obj1lKSE9PSR0KG4pJiZCdChuKT97c2Nyb2xsTGVmdDoocz1uKS5zY3JvbGxMZWZ0LHNjcm9sbFRvcDpzLnNjcm9sbFRvcH06eWUobikpLEJ0KGUpPygoaD1VdChlLCEwKSkueCs9ZS5jbGllbnRMZWZ0LGgueSs9ZS5jbGllbnRUb3ApOmEmJihoLng9d2UoYSkpKSx7eDpsLmxlZnQrYy5zY3JvbGxMZWZ0LWgueCx5OmwudG9wK2Muc2Nyb2xsVG9wLWgueSx3aWR0aDpsLndpZHRoLGhlaWdodDpsLmhlaWdodH19ZnVuY3Rpb24gSGUodCl7dmFyIGU9bmV3IE1hcCxpPW5ldyBTZXQsbj1bXTtmdW5jdGlvbiBzKHQpe2kuYWRkKHQubmFtZSksW10uY29uY2F0KHQucmVxdWlyZXN8fFtdLHQucmVxdWlyZXNJZkV4aXN0c3x8W10pLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKCFpLmhhcyh0KSl7dmFyIG49ZS5nZXQodCk7biYmcyhuKX19KSksbi5wdXNoKHQpfXJldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2Uuc2V0KHQubmFtZSx0KX0pKSx0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2kuaGFzKHQubmFtZSl8fHModCl9KSksbn12YXIgJGU9e3BsYWNlbWVudDpcImJvdHRvbVwiLG1vZGlmaWVyczpbXSxzdHJhdGVneTpcImFic29sdXRlXCJ9O2Z1bmN0aW9uIFdlKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCksaT0wO2k8dDtpKyspZVtpXT1hcmd1bWVudHNbaV07cmV0dXJuIWUuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuISh0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCl9KSl9ZnVuY3Rpb24gQmUodCl7dm9pZCAwPT09dCYmKHQ9e30pO3ZhciBlPXQsaT1lLmRlZmF1bHRNb2RpZmllcnMsbj12b2lkIDA9PT1pP1tdOmkscz1lLmRlZmF1bHRPcHRpb25zLG89dm9pZCAwPT09cz8kZTpzO3JldHVybiBmdW5jdGlvbih0LGUsaSl7dm9pZCAwPT09aSYmKGk9byk7dmFyIHMscixhPXtwbGFjZW1lbnQ6XCJib3R0b21cIixvcmRlcmVkTW9kaWZpZXJzOltdLG9wdGlvbnM6T2JqZWN0LmFzc2lnbih7fSwkZSxvKSxtb2RpZmllcnNEYXRhOnt9LGVsZW1lbnRzOntyZWZlcmVuY2U6dCxwb3BwZXI6ZX0sYXR0cmlidXRlczp7fSxzdHlsZXM6e319LGw9W10sYz0hMSxoPXtzdGF0ZTphLHNldE9wdGlvbnM6ZnVuY3Rpb24oaSl7dmFyIHM9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pKGEub3B0aW9ucyk6aTtkKCksYS5vcHRpb25zPU9iamVjdC5hc3NpZ24oe30sbyxhLm9wdGlvbnMscyksYS5zY3JvbGxQYXJlbnRzPXtyZWZlcmVuY2U6V3QodCk/VGUodCk6dC5jb250ZXh0RWxlbWVudD9UZSh0LmNvbnRleHRFbGVtZW50KTpbXSxwb3BwZXI6VGUoZSl9O3ZhciByLGMsdT1mdW5jdGlvbih0KXt2YXIgZT1IZSh0KTtyZXR1cm4gRnQucmVkdWNlKChmdW5jdGlvbih0LGkpe3JldHVybiB0LmNvbmNhdChlLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQucGhhc2U9PT1pfSkpKX0pLFtdKX0oKHI9W10uY29uY2F0KG4sYS5vcHRpb25zLm1vZGlmaWVycyksYz1yLnJlZHVjZSgoZnVuY3Rpb24odCxlKXt2YXIgaT10W2UubmFtZV07cmV0dXJuIHRbZS5uYW1lXT1pP09iamVjdC5hc3NpZ24oe30saSxlLHtvcHRpb25zOk9iamVjdC5hc3NpZ24oe30saS5vcHRpb25zLGUub3B0aW9ucyksZGF0YTpPYmplY3QuYXNzaWduKHt9LGkuZGF0YSxlLmRhdGEpfSk6ZSx0fSkse30pLE9iamVjdC5rZXlzKGMpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGNbdF19KSkpKTtyZXR1cm4gYS5vcmRlcmVkTW9kaWZpZXJzPXUuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbmFibGVkfSkpLGEub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT10Lm5hbWUsaT10Lm9wdGlvbnMsbj12b2lkIDA9PT1pP3t9Omkscz10LmVmZmVjdDtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBzKXt2YXIgbz1zKHtzdGF0ZTphLG5hbWU6ZSxpbnN0YW5jZTpoLG9wdGlvbnM6bn0pO2wucHVzaChvfHxmdW5jdGlvbigpe30pfX0pKSxoLnVwZGF0ZSgpfSxmb3JjZVVwZGF0ZTpmdW5jdGlvbigpe2lmKCFjKXt2YXIgdD1hLmVsZW1lbnRzLGU9dC5yZWZlcmVuY2UsaT10LnBvcHBlcjtpZihXZShlLGkpKXthLnJlY3RzPXtyZWZlcmVuY2U6RmUoZSxzZShpKSxcImZpeGVkXCI9PT1hLm9wdGlvbnMuc3RyYXRlZ3kpLHBvcHBlcjpHdChpKX0sYS5yZXNldD0hMSxhLnBsYWNlbWVudD1hLm9wdGlvbnMucGxhY2VtZW50LGEub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gYS5tb2RpZmllcnNEYXRhW3QubmFtZV09T2JqZWN0LmFzc2lnbih7fSx0LmRhdGEpfSkpO2Zvcih2YXIgbj0wO248YS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDtuKyspaWYoITAhPT1hLnJlc2V0KXt2YXIgcz1hLm9yZGVyZWRNb2RpZmllcnNbbl0sbz1zLmZuLHI9cy5vcHRpb25zLGw9dm9pZCAwPT09cj97fTpyLGQ9cy5uYW1lO1wiZnVuY3Rpb25cIj09dHlwZW9mIG8mJihhPW8oe3N0YXRlOmEsb3B0aW9uczpsLG5hbWU6ZCxpbnN0YW5jZTpofSl8fGEpfWVsc2UgYS5yZXNldD0hMSxuPS0xfX19LHVwZGF0ZToocz1mdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7aC5mb3JjZVVwZGF0ZSgpLHQoYSl9KSl9LGZ1bmN0aW9uKCl7cmV0dXJuIHJ8fChyPW5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtQcm9taXNlLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpe3I9dm9pZCAwLHQocygpKX0pKX0pKSkscn0pLGRlc3Ryb3k6ZnVuY3Rpb24oKXtkKCksYz0hMH19O2lmKCFXZSh0LGUpKXJldHVybiBoO2Z1bmN0aW9uIGQoKXtsLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiB0KCl9KSksbD1bXX1yZXR1cm4gaC5zZXRPcHRpb25zKGkpLnRoZW4oKGZ1bmN0aW9uKHQpeyFjJiZpLm9uRmlyc3RVcGRhdGUmJmkub25GaXJzdFVwZGF0ZSh0KX0pKSxofX12YXIgemU9QmUoKSxSZT1CZSh7ZGVmYXVsdE1vZGlmaWVyczpbbWUsamUsZmUsUnRdfSkscWU9QmUoe2RlZmF1bHRNb2RpZmllcnM6W21lLGplLGZlLFJ0LFBlLFNlLE1lLGNlLE5lXX0pO2NvbnN0IFZlPU9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnR5KHtfX3Byb3RvX186bnVsbCxhZnRlck1haW46TnQsYWZ0ZXJSZWFkOlN0LGFmdGVyV3JpdGU6TXQsYXBwbHlTdHlsZXM6UnQsYXJyb3c6Y2UsYXV0bzpidCxiYXNlUGxhY2VtZW50czp2dCxiZWZvcmVNYWluOkR0LGJlZm9yZVJlYWQ6a3QsYmVmb3JlV3JpdGU6UHQsYm90dG9tOm10LGNsaXBwaW5nUGFyZW50czpBdCxjb21wdXRlU3R5bGVzOmZlLGNyZWF0ZVBvcHBlcjpxZSxjcmVhdGVQb3BwZXJCYXNlOnplLGNyZWF0ZVBvcHBlckxpdGU6UmUsZGV0ZWN0T3ZlcmZsb3c6a2UsZW5kOnd0LGV2ZW50TGlzdGVuZXJzOm1lLGZsaXA6U2UsaGlkZTpOZSxsZWZ0Ol90LG1haW46SXQsbW9kaWZpZXJQaGFzZXM6RnQsb2Zmc2V0OlBlLHBsYWNlbWVudHM6eHQscG9wcGVyOlR0LHBvcHBlckdlbmVyYXRvcjpCZSxwb3BwZXJPZmZzZXRzOmplLHByZXZlbnRPdmVyZmxvdzpNZSxyZWFkOkx0LHJlZmVyZW5jZTpDdCxyaWdodDpndCxzdGFydDp5dCx0b3A6cHQsdmFyaWF0aW9uUGxhY2VtZW50czpPdCx2aWV3cG9ydDpFdCx3cml0ZTpqdH0sU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSkpLEtlPVwiZHJvcGRvd25cIixRZT1cIkFycm93VXBcIixYZT1cIkFycm93RG93blwiLFllPVwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIixVZT1cImtleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGlcIixHZT1cInNob3dcIixKZT0nW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknLFplPWAke0plfS5zaG93YCx0aT1cIi5kcm9wZG93bi1tZW51XCIsZWk9dSgpP1widG9wLWVuZFwiOlwidG9wLXN0YXJ0XCIsaWk9dSgpP1widG9wLXN0YXJ0XCI6XCJ0b3AtZW5kXCIsbmk9dSgpP1wiYm90dG9tLWVuZFwiOlwiYm90dG9tLXN0YXJ0XCIsc2k9dSgpP1wiYm90dG9tLXN0YXJ0XCI6XCJib3R0b20tZW5kXCIsb2k9dSgpP1wibGVmdC1zdGFydFwiOlwicmlnaHQtc3RhcnRcIixyaT11KCk/XCJyaWdodC1zdGFydFwiOlwibGVmdC1zdGFydFwiLGFpPXthdXRvQ2xvc2U6ITAsYm91bmRhcnk6XCJjbGlwcGluZ1BhcmVudHNcIixkaXNwbGF5OlwiZHluYW1pY1wiLG9mZnNldDpbMCwyXSxwb3BwZXJDb25maWc6bnVsbCxyZWZlcmVuY2U6XCJ0b2dnbGVcIn0sbGk9e2F1dG9DbG9zZTpcIihib29sZWFufHN0cmluZylcIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIixkaXNwbGF5Olwic3RyaW5nXCIsb2Zmc2V0OlwiKGFycmF5fHN0cmluZ3xmdW5jdGlvbilcIixwb3BwZXJDb25maWc6XCIobnVsbHxvYmplY3R8ZnVuY3Rpb24pXCIscmVmZXJlbmNlOlwiKHN0cmluZ3xlbGVtZW50fG9iamVjdClcIn07Y2xhc3MgY2kgZXh0ZW5kcyBXe2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIodCxlKSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLl9wYXJlbnQ9dGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLHRoaXMuX21lbnU9ei5uZXh0KHRoaXMuX2VsZW1lbnQsdGkpWzBdfHx6LnByZXYodGhpcy5fZWxlbWVudCx0aSlbMF18fHouZmluZE9uZSh0aSx0aGlzLl9wYXJlbnQpLHRoaXMuX2luTmF2YmFyPXRoaXMuX2RldGVjdE5hdmJhcigpfXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBhaX1zdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCl7cmV0dXJuIGxpfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVybiBLZX10b2dnbGUoKXtyZXR1cm4gdGhpcy5faXNTaG93bigpP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpfXNob3coKXtpZihyKHRoaXMuX2VsZW1lbnQpfHx0aGlzLl9pc1Nob3duKCkpcmV0dXJuO2NvbnN0IHQ9e3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH07aWYoIUkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy5kcm9wZG93blwiLHQpLmRlZmF1bHRQcmV2ZW50ZWQpe2lmKHRoaXMuX2NyZWF0ZVBvcHBlcigpLFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJiF0aGlzLl9wYXJlbnQuY2xvc2VzdChcIi5uYXZiYXItbmF2XCIpKWZvcihjb25zdCB0IG9mW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pKUkub24odCxcIm1vdXNlb3ZlclwiLGwpO3RoaXMuX2VsZW1lbnQuZm9jdXMoKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCksdGhpcy5fbWVudS5jbGFzc0xpc3QuYWRkKEdlKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoR2UpLEkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvd24uYnMuZHJvcGRvd25cIix0KX19aGlkZSgpe2lmKHIodGhpcy5fZWxlbWVudCl8fCF0aGlzLl9pc1Nob3duKCkpcmV0dXJuO2NvbnN0IHQ9e3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH07dGhpcy5fY29tcGxldGVIaWRlKHQpfWRpc3Bvc2UoKXt0aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5kZXN0cm95KCksc3VwZXIuZGlzcG9zZSgpfXVwZGF0ZSgpe3RoaXMuX2luTmF2YmFyPXRoaXMuX2RldGVjdE5hdmJhcigpLHRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLnVwZGF0ZSgpfV9jb21wbGV0ZUhpZGUodCl7aWYoIUkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZS5icy5kcm9wZG93blwiLHQpLmRlZmF1bHRQcmV2ZW50ZWQpe2lmKFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpZm9yKGNvbnN0IHQgb2ZbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikpSS5vZmYodCxcIm1vdXNlb3ZlclwiLGwpO3RoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9tZW51LmNsYXNzTGlzdC5yZW1vdmUoR2UpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShHZSksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSxILnJlbW92ZURhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSxcInBvcHBlclwiKSxJLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGRlbi5icy5kcm9wZG93blwiLHQpfX1fZ2V0Q29uZmlnKHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZih0PXN1cGVyLl9nZXRDb25maWcodCkpLnJlZmVyZW5jZSYmIW4odC5yZWZlcmVuY2UpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LnJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtLZS50b1VwcGVyQ2FzZSgpfTogT3B0aW9uIFwicmVmZXJlbmNlXCIgcHJvdmlkZWQgdHlwZSBcIm9iamVjdFwiIHdpdGhvdXQgYSByZXF1aXJlZCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiIG1ldGhvZC5gKTtyZXR1cm4gdH1fY3JlYXRlUG9wcGVyKCl7aWYodm9pZCAwPT09VmUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJvb3RzdHJhcCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKVwiKTtsZXQgdD10aGlzLl9lbGVtZW50O1wicGFyZW50XCI9PT10aGlzLl9jb25maWcucmVmZXJlbmNlP3Q9dGhpcy5fcGFyZW50Om4odGhpcy5fY29uZmlnLnJlZmVyZW5jZSk/dD1zKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpOlwib2JqZWN0XCI9PXR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlJiYodD10aGlzLl9jb25maWcucmVmZXJlbmNlKTtjb25zdCBlPXRoaXMuX2dldFBvcHBlckNvbmZpZygpO3RoaXMuX3BvcHBlcj1xZSh0LHRoaXMuX21lbnUsZSl9X2lzU2hvd24oKXtyZXR1cm4gdGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoR2UpfV9nZXRQbGFjZW1lbnQoKXtjb25zdCB0PXRoaXMuX3BhcmVudDtpZih0LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3BlbmRcIikpcmV0dXJuIG9pO2lmKHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcHN0YXJ0XCIpKXJldHVybiByaTtpZih0LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3B1cC1jZW50ZXJcIikpcmV0dXJuXCJ0b3BcIjtpZih0LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duLWNlbnRlclwiKSlyZXR1cm5cImJvdHRvbVwiO2NvbnN0IGU9XCJlbmRcIj09PWdldENvbXB1dGVkU3R5bGUodGhpcy5fbWVudSkuZ2V0UHJvcGVydHlWYWx1ZShcIi0tYnMtcG9zaXRpb25cIikudHJpbSgpO3JldHVybiB0LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3B1cFwiKT9lP2lpOmVpOmU/c2k6bml9X2RldGVjdE5hdmJhcigpe3JldHVybiBudWxsIT09dGhpcy5fZWxlbWVudC5jbG9zZXN0KFwiLm5hdmJhclwiKX1fZ2V0T2Zmc2V0KCl7Y29uc3R7b2Zmc2V0OnR9PXRoaXMuX2NvbmZpZztyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90LnNwbGl0KFwiLFwiKS5tYXAoKHQ9Pk51bWJlci5wYXJzZUludCh0LDEwKSkpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/ZT0+dChlLHRoaXMuX2VsZW1lbnQpOnR9X2dldFBvcHBlckNvbmZpZygpe2NvbnN0IHQ9e3BsYWNlbWVudDp0aGlzLl9nZXRQbGFjZW1lbnQoKSxtb2RpZmllcnM6W3tuYW1lOlwicHJldmVudE92ZXJmbG93XCIsb3B0aW9uczp7Ym91bmRhcnk6dGhpcy5fY29uZmlnLmJvdW5kYXJ5fX0se25hbWU6XCJvZmZzZXRcIixvcHRpb25zOntvZmZzZXQ6dGhpcy5fZ2V0T2Zmc2V0KCl9fV19O3JldHVybih0aGlzLl9pbk5hdmJhcnx8XCJzdGF0aWNcIj09PXRoaXMuX2NvbmZpZy5kaXNwbGF5KSYmKEguc2V0RGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LFwicG9wcGVyXCIsXCJzdGF0aWNcIiksdC5tb2RpZmllcnM9W3tuYW1lOlwiYXBwbHlTdHlsZXNcIixlbmFibGVkOiExfV0pLHsuLi50LC4uLnAodGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyxbdF0pfX1fc2VsZWN0TWVudUl0ZW0oe2tleTp0LHRhcmdldDplfSl7Y29uc3QgaT16LmZpbmQoXCIuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKVwiLHRoaXMuX21lbnUpLmZpbHRlcigodD0+byh0KSkpO2kubGVuZ3RoJiZnKGksZSx0PT09WGUsIWkuaW5jbHVkZXMoZSkpLmZvY3VzKCl9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9Y2kuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0oKX19KSl9c3RhdGljIGNsZWFyTWVudXModCl7aWYoMj09PXQuYnV0dG9ufHxcImtleXVwXCI9PT10LnR5cGUmJlwiVGFiXCIhPT10LmtleSlyZXR1cm47Y29uc3QgZT16LmZpbmQoWmUpO2Zvcihjb25zdCBpIG9mIGUpe2NvbnN0IGU9Y2kuZ2V0SW5zdGFuY2UoaSk7aWYoIWV8fCExPT09ZS5fY29uZmlnLmF1dG9DbG9zZSljb250aW51ZTtjb25zdCBuPXQuY29tcG9zZWRQYXRoKCkscz1uLmluY2x1ZGVzKGUuX21lbnUpO2lmKG4uaW5jbHVkZXMoZS5fZWxlbWVudCl8fFwiaW5zaWRlXCI9PT1lLl9jb25maWcuYXV0b0Nsb3NlJiYhc3x8XCJvdXRzaWRlXCI9PT1lLl9jb25maWcuYXV0b0Nsb3NlJiZzKWNvbnRpbnVlO2lmKGUuX21lbnUuY29udGFpbnModC50YXJnZXQpJiYoXCJrZXl1cFwiPT09dC50eXBlJiZcIlRhYlwiPT09dC5rZXl8fC9pbnB1dHxzZWxlY3R8b3B0aW9ufHRleHRhcmVhfGZvcm0vaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpKSljb250aW51ZTtjb25zdCBvPXtyZWxhdGVkVGFyZ2V0OmUuX2VsZW1lbnR9O1wiY2xpY2tcIj09PXQudHlwZSYmKG8uY2xpY2tFdmVudD10KSxlLl9jb21wbGV0ZUhpZGUobyl9fXN0YXRpYyBkYXRhQXBpS2V5ZG93bkhhbmRsZXIodCl7Y29uc3QgZT0vaW5wdXR8dGV4dGFyZWEvaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpLGk9XCJFc2NhcGVcIj09PXQua2V5LG49W1FlLFhlXS5pbmNsdWRlcyh0LmtleSk7aWYoIW4mJiFpKXJldHVybjtpZihlJiYhaSlyZXR1cm47dC5wcmV2ZW50RGVmYXVsdCgpO2NvbnN0IHM9dGhpcy5tYXRjaGVzKEplKT90aGlzOnoucHJldih0aGlzLEplKVswXXx8ei5uZXh0KHRoaXMsSmUpWzBdfHx6LmZpbmRPbmUoSmUsdC5kZWxlZ2F0ZVRhcmdldC5wYXJlbnROb2RlKSxvPWNpLmdldE9yQ3JlYXRlSW5zdGFuY2Uocyk7aWYobilyZXR1cm4gdC5zdG9wUHJvcGFnYXRpb24oKSxvLnNob3coKSx2b2lkIG8uX3NlbGVjdE1lbnVJdGVtKHQpO28uX2lzU2hvd24oKSYmKHQuc3RvcFByb3BhZ2F0aW9uKCksby5oaWRlKCkscy5mb2N1cygpKX19SS5vbihkb2N1bWVudCxVZSxKZSxjaS5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLEkub24oZG9jdW1lbnQsVWUsdGksY2kuZGF0YUFwaUtleWRvd25IYW5kbGVyKSxJLm9uKGRvY3VtZW50LFllLGNpLmNsZWFyTWVudXMpLEkub24oZG9jdW1lbnQsXCJrZXl1cC5icy5kcm9wZG93bi5kYXRhLWFwaVwiLGNpLmNsZWFyTWVudXMpLEkub24oZG9jdW1lbnQsWWUsSmUsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSxjaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnRvZ2dsZSgpfSkpLGYoY2kpO2NvbnN0IGhpPVwiLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcFwiLGRpPVwiLnN0aWNreS10b3BcIix1aT1cInBhZGRpbmctcmlnaHRcIixmaT1cIm1hcmdpbi1yaWdodFwiO2NsYXNzIHBpe2NvbnN0cnVjdG9yKCl7dGhpcy5fZWxlbWVudD1kb2N1bWVudC5ib2R5fWdldFdpZHRoKCl7Y29uc3QgdD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7cmV0dXJuIE1hdGguYWJzKHdpbmRvdy5pbm5lcldpZHRoLXQpfWhpZGUoKXtjb25zdCB0PXRoaXMuZ2V0V2lkdGgoKTt0aGlzLl9kaXNhYmxlT3ZlckZsb3coKSx0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LHVpLChlPT5lK3QpKSx0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyhoaSx1aSwoZT0+ZSt0KSksdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoZGksZmksKGU9PmUtdCkpfXJlc2V0KCl7dGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LFwib3ZlcmZsb3dcIiksdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LHVpKSx0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKGhpLHVpKSx0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKGRpLGZpKX1pc092ZXJmbG93aW5nKCl7cmV0dXJuIHRoaXMuZ2V0V2lkdGgoKT4wfV9kaXNhYmxlT3ZlckZsb3coKXt0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSh0aGlzLl9lbGVtZW50LFwib3ZlcmZsb3dcIiksdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwifV9zZXRFbGVtZW50QXR0cmlidXRlcyh0LGUsaSl7Y29uc3Qgbj10aGlzLmdldFdpZHRoKCk7dGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayh0LCh0PT57aWYodCE9PXRoaXMuX2VsZW1lbnQmJndpbmRvdy5pbm5lcldpZHRoPnQuY2xpZW50V2lkdGgrbilyZXR1cm47dGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodCxlKTtjb25zdCBzPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpLmdldFByb3BlcnR5VmFsdWUoZSk7dC5zdHlsZS5zZXRQcm9wZXJ0eShlLGAke2koTnVtYmVyLnBhcnNlRmxvYXQocykpfXB4YCl9KSl9X3NhdmVJbml0aWFsQXR0cmlidXRlKHQsZSl7Y29uc3QgaT10LnN0eWxlLmdldFByb3BlcnR5VmFsdWUoZSk7aSYmSC5zZXREYXRhQXR0cmlidXRlKHQsZSxpKX1fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0LGUpe3RoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2sodCwodD0+e2NvbnN0IGk9SC5nZXREYXRhQXR0cmlidXRlKHQsZSk7bnVsbCE9PWk/KEgucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0LGUpLHQuc3R5bGUuc2V0UHJvcGVydHkoZSxpKSk6dC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShlKX0pKX1fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayh0LGUpe2lmKG4odCkpZSh0KTtlbHNlIGZvcihjb25zdCBpIG9mIHouZmluZCh0LHRoaXMuX2VsZW1lbnQpKWUoaSl9fWNvbnN0IG1pPVwic2hvd1wiLGdpPVwibW91c2Vkb3duLmJzLmJhY2tkcm9wXCIsX2k9e2NsYXNzTmFtZTpcIm1vZGFsLWJhY2tkcm9wXCIsY2xpY2tDYWxsYmFjazpudWxsLGlzQW5pbWF0ZWQ6ITEsaXNWaXNpYmxlOiEwLHJvb3RFbGVtZW50OlwiYm9keVwifSxiaT17Y2xhc3NOYW1lOlwic3RyaW5nXCIsY2xpY2tDYWxsYmFjazpcIihmdW5jdGlvbnxudWxsKVwiLGlzQW5pbWF0ZWQ6XCJib29sZWFuXCIsaXNWaXNpYmxlOlwiYm9vbGVhblwiLHJvb3RFbGVtZW50OlwiKGVsZW1lbnR8c3RyaW5nKVwifTtjbGFzcyB2aSBleHRlbmRzICR7Y29uc3RydWN0b3IodCl7c3VwZXIoKSx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKHQpLHRoaXMuX2lzQXBwZW5kZWQ9ITEsdGhpcy5fZWxlbWVudD1udWxsfXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBfaX1zdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCl7cmV0dXJuIGJpfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwiYmFja2Ryb3BcIn1zaG93KHQpe2lmKCF0aGlzLl9jb25maWcuaXNWaXNpYmxlKXJldHVybiB2b2lkIHAodCk7dGhpcy5fYXBwZW5kKCk7Y29uc3QgZT10aGlzLl9nZXRFbGVtZW50KCk7dGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQmJmMoZSksZS5jbGFzc0xpc3QuYWRkKG1pKSx0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgoKT0+e3AodCl9KSl9aGlkZSh0KXt0aGlzLl9jb25maWcuaXNWaXNpYmxlPyh0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShtaSksdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKCk9Pnt0aGlzLmRpc3Bvc2UoKSxwKHQpfSkpKTpwKHQpfWRpc3Bvc2UoKXt0aGlzLl9pc0FwcGVuZGVkJiYoSS5vZmYodGhpcy5fZWxlbWVudCxnaSksdGhpcy5fZWxlbWVudC5yZW1vdmUoKSx0aGlzLl9pc0FwcGVuZGVkPSExKX1fZ2V0RWxlbWVudCgpe2lmKCF0aGlzLl9lbGVtZW50KXtjb25zdCB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5jbGFzc05hbWU9dGhpcy5fY29uZmlnLmNsYXNzTmFtZSx0aGlzLl9jb25maWcuaXNBbmltYXRlZCYmdC5jbGFzc0xpc3QuYWRkKFwiZmFkZVwiKSx0aGlzLl9lbGVtZW50PXR9cmV0dXJuIHRoaXMuX2VsZW1lbnR9X2NvbmZpZ0FmdGVyTWVyZ2UodCl7cmV0dXJuIHQucm9vdEVsZW1lbnQ9cyh0LnJvb3RFbGVtZW50KSx0fV9hcHBlbmQoKXtpZih0aGlzLl9pc0FwcGVuZGVkKXJldHVybjtjb25zdCB0PXRoaXMuX2dldEVsZW1lbnQoKTt0aGlzLl9jb25maWcucm9vdEVsZW1lbnQuYXBwZW5kKHQpLEkub24odCxnaSwoKCk9PntwKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKX0pKSx0aGlzLl9pc0FwcGVuZGVkPSEwfV9lbXVsYXRlQW5pbWF0aW9uKHQpe20odCx0aGlzLl9nZXRFbGVtZW50KCksdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpfX1jb25zdCB5aT1cIi5icy5mb2N1c3RyYXBcIix3aT1cImJhY2t3YXJkXCIsQWk9e2F1dG9mb2N1czohMCx0cmFwRWxlbWVudDpudWxsfSxFaT17YXV0b2ZvY3VzOlwiYm9vbGVhblwiLHRyYXBFbGVtZW50OlwiZWxlbWVudFwifTtjbGFzcyBUaSBleHRlbmRzICR7Y29uc3RydWN0b3IodCl7c3VwZXIoKSx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKHQpLHRoaXMuX2lzQWN0aXZlPSExLHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb249bnVsbH1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gQWl9c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBFaX1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cImZvY3VzdHJhcFwifWFjdGl2YXRlKCl7dGhpcy5faXNBY3RpdmV8fCh0aGlzLl9jb25maWcuYXV0b2ZvY3VzJiZ0aGlzLl9jb25maWcudHJhcEVsZW1lbnQuZm9jdXMoKSxJLm9mZihkb2N1bWVudCx5aSksSS5vbihkb2N1bWVudCxcImZvY3VzaW4uYnMuZm9jdXN0cmFwXCIsKHQ9PnRoaXMuX2hhbmRsZUZvY3VzaW4odCkpKSxJLm9uKGRvY3VtZW50LFwia2V5ZG93bi50YWIuYnMuZm9jdXN0cmFwXCIsKHQ9PnRoaXMuX2hhbmRsZUtleWRvd24odCkpKSx0aGlzLl9pc0FjdGl2ZT0hMCl9ZGVhY3RpdmF0ZSgpe3RoaXMuX2lzQWN0aXZlJiYodGhpcy5faXNBY3RpdmU9ITEsSS5vZmYoZG9jdW1lbnQseWkpKX1faGFuZGxlRm9jdXNpbih0KXtjb25zdHt0cmFwRWxlbWVudDplfT10aGlzLl9jb25maWc7aWYodC50YXJnZXQ9PT1kb2N1bWVudHx8dC50YXJnZXQ9PT1lfHxlLmNvbnRhaW5zKHQudGFyZ2V0KSlyZXR1cm47Y29uc3QgaT16LmZvY3VzYWJsZUNoaWxkcmVuKGUpOzA9PT1pLmxlbmd0aD9lLmZvY3VzKCk6dGhpcy5fbGFzdFRhYk5hdkRpcmVjdGlvbj09PXdpP2lbaS5sZW5ndGgtMV0uZm9jdXMoKTppWzBdLmZvY3VzKCl9X2hhbmRsZUtleWRvd24odCl7XCJUYWJcIj09PXQua2V5JiYodGhpcy5fbGFzdFRhYk5hdkRpcmVjdGlvbj10LnNoaWZ0S2V5P3dpOlwiZm9yd2FyZFwiKX19Y29uc3QgQ2k9XCJoaWRkZW4uYnMubW9kYWxcIixPaT1cInNob3cuYnMubW9kYWxcIix4aT1cIm1vZGFsLW9wZW5cIixraT1cInNob3dcIixMaT1cIm1vZGFsLXN0YXRpY1wiLFNpPXtiYWNrZHJvcDohMCxmb2N1czohMCxrZXlib2FyZDohMH0sRGk9e2JhY2tkcm9wOlwiKGJvb2xlYW58c3RyaW5nKVwiLGZvY3VzOlwiYm9vbGVhblwiLGtleWJvYXJkOlwiYm9vbGVhblwifTtjbGFzcyBJaSBleHRlbmRzIFd7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0LGUpLHRoaXMuX2RpYWxvZz16LmZpbmRPbmUoXCIubW9kYWwtZGlhbG9nXCIsdGhpcy5fZWxlbWVudCksdGhpcy5fYmFja2Ryb3A9dGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKCksdGhpcy5fZm9jdXN0cmFwPXRoaXMuX2luaXRpYWxpemVGb2N1c1RyYXAoKSx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9zY3JvbGxCYXI9bmV3IHBpLHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIFNpfXN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKXtyZXR1cm4gRGl9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJtb2RhbFwifXRvZ2dsZSh0KXtyZXR1cm4gdGhpcy5faXNTaG93bj90aGlzLmhpZGUoKTp0aGlzLnNob3codCl9c2hvdyh0KXt0aGlzLl9pc1Nob3dufHx0aGlzLl9pc1RyYW5zaXRpb25pbmd8fEkudHJpZ2dlcih0aGlzLl9lbGVtZW50LE9pLHtyZWxhdGVkVGFyZ2V0OnR9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5faXNTaG93bj0hMCx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITAsdGhpcy5fc2Nyb2xsQmFyLmhpZGUoKSxkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoeGkpLHRoaXMuX2FkanVzdERpYWxvZygpLHRoaXMuX2JhY2tkcm9wLnNob3coKCgpPT50aGlzLl9zaG93RWxlbWVudCh0KSkpKX1oaWRlKCl7dGhpcy5faXNTaG93biYmIXRoaXMuX2lzVHJhbnNpdGlvbmluZyYmKEkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZS5icy5tb2RhbFwiKS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5faXNTaG93bj0hMSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITAsdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoa2kpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT50aGlzLl9oaWRlTW9kYWwoKSksdGhpcy5fZWxlbWVudCx0aGlzLl9pc0FuaW1hdGVkKCkpKSl9ZGlzcG9zZSgpe2Zvcihjb25zdCB0IG9mW3dpbmRvdyx0aGlzLl9kaWFsb2ddKUkub2ZmKHQsXCIuYnMubW9kYWxcIik7dGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpLHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCksc3VwZXIuZGlzcG9zZSgpfWhhbmRsZVVwZGF0ZSgpe3RoaXMuX2FkanVzdERpYWxvZygpfV9pbml0aWFsaXplQmFja0Ryb3AoKXtyZXR1cm4gbmV3IHZpKHtpc1Zpc2libGU6Qm9vbGVhbih0aGlzLl9jb25maWcuYmFja2Ryb3ApLGlzQW5pbWF0ZWQ6dGhpcy5faXNBbmltYXRlZCgpfSl9X2luaXRpYWxpemVGb2N1c1RyYXAoKXtyZXR1cm4gbmV3IFRpKHt0cmFwRWxlbWVudDp0aGlzLl9lbGVtZW50fSl9X3Nob3dFbGVtZW50KHQpe2RvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5fZWxlbWVudCl8fGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiwhMCksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJkaWFsb2dcIiksdGhpcy5fZWxlbWVudC5zY3JvbGxUb3A9MDtjb25zdCBlPXouZmluZE9uZShcIi5tb2RhbC1ib2R5XCIsdGhpcy5fZGlhbG9nKTtlJiYoZS5zY3JvbGxUb3A9MCksYyh0aGlzLl9lbGVtZW50KSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoa2kpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5fY29uZmlnLmZvY3VzJiZ0aGlzLl9mb2N1c3RyYXAuYWN0aXZhdGUoKSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy5tb2RhbFwiLHtyZWxhdGVkVGFyZ2V0OnR9KX0pLHRoaXMuX2RpYWxvZyx0aGlzLl9pc0FuaW1hdGVkKCkpfV9hZGRFdmVudExpc3RlbmVycygpe0kub24odGhpcy5fZWxlbWVudCxcImtleWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLCh0PT57XCJFc2NhcGVcIj09PXQua2V5JiYodGhpcy5fY29uZmlnLmtleWJvYXJkP3RoaXMuaGlkZSgpOnRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSl9KSksSS5vbih3aW5kb3csXCJyZXNpemUuYnMubW9kYWxcIiwoKCk9Pnt0aGlzLl9pc1Nob3duJiYhdGhpcy5faXNUcmFuc2l0aW9uaW5nJiZ0aGlzLl9hZGp1c3REaWFsb2coKX0pKSxJLm9uKHRoaXMuX2VsZW1lbnQsXCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLCh0PT57SS5vbmUodGhpcy5fZWxlbWVudCxcImNsaWNrLmRpc21pc3MuYnMubW9kYWxcIiwoZT0+e3RoaXMuX2VsZW1lbnQ9PT10LnRhcmdldCYmdGhpcy5fZWxlbWVudD09PWUudGFyZ2V0JiYoXCJzdGF0aWNcIiE9PXRoaXMuX2NvbmZpZy5iYWNrZHJvcD90aGlzLl9jb25maWcuYmFja2Ryb3AmJnRoaXMuaGlkZSgpOnRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSl9KSl9KSl9X2hpZGVNb2RhbCgpe3RoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsITApLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInJvbGVcIiksdGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX2JhY2tkcm9wLmhpZGUoKCgpPT57ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKHhpKSx0aGlzLl9yZXNldEFkanVzdG1lbnRzKCksdGhpcy5fc2Nyb2xsQmFyLnJlc2V0KCksSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsQ2kpfSkpfV9pc0FuaW1hdGVkKCl7cmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmFkZVwiKX1fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpe2lmKEkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZVByZXZlbnRlZC5icy5tb2RhbFwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtjb25zdCB0PXRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0PmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsZT10aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93WTtcImhpZGRlblwiPT09ZXx8dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoTGkpfHwodHx8KHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3dZPVwiaGlkZGVuXCIpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChMaSksdGhpcy5fcXVldWVDYWxsYmFjaygoKCk9Pnt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoTGkpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvd1k9ZX0pLHRoaXMuX2RpYWxvZyl9KSx0aGlzLl9kaWFsb2cpLHRoaXMuX2VsZW1lbnQuZm9jdXMoKSl9X2FkanVzdERpYWxvZygpe2NvbnN0IHQ9dGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxlPXRoaXMuX3Njcm9sbEJhci5nZXRXaWR0aCgpLGk9ZT4wO2lmKGkmJiF0KXtjb25zdCB0PXUoKT9cInBhZGRpbmdMZWZ0XCI6XCJwYWRkaW5nUmlnaHRcIjt0aGlzLl9lbGVtZW50LnN0eWxlW3RdPWAke2V9cHhgfWlmKCFpJiZ0KXtjb25zdCB0PXUoKT9cInBhZGRpbmdSaWdodFwiOlwicGFkZGluZ0xlZnRcIjt0aGlzLl9lbGVtZW50LnN0eWxlW3RdPWAke2V9cHhgfX1fcmVzZXRBZGp1c3RtZW50cygpe3RoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9XCJcIix0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD1cIlwifXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCxlKXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGk9SWkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1pW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2lbdF0oZSl9fSkpfX1JLm9uKGRvY3VtZW50LFwiY2xpY2suYnMubW9kYWwuZGF0YS1hcGlcIiwnW2RhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIl0nLChmdW5jdGlvbih0KXtjb25zdCBlPXouZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtbXCJBXCIsXCJBUkVBXCJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkmJnQucHJldmVudERlZmF1bHQoKSxJLm9uZShlLE9pLCh0PT57dC5kZWZhdWx0UHJldmVudGVkfHxJLm9uZShlLENpLCgoKT0+e28odGhpcykmJnRoaXMuZm9jdXMoKX0pKX0pKTtjb25zdCBpPXouZmluZE9uZShcIi5tb2RhbC5zaG93XCIpO2kmJklpLmdldEluc3RhbmNlKGkpLmhpZGUoKSxJaS5nZXRPckNyZWF0ZUluc3RhbmNlKGUpLnRvZ2dsZSh0aGlzKX0pKSxSKElpKSxmKElpKTtjb25zdCBOaT1cInNob3dcIixQaT1cInNob3dpbmdcIixqaT1cImhpZGluZ1wiLE1pPVwiLm9mZmNhbnZhcy5zaG93XCIsRmk9XCJoaWRlUHJldmVudGVkLmJzLm9mZmNhbnZhc1wiLEhpPVwiaGlkZGVuLmJzLm9mZmNhbnZhc1wiLCRpPXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxzY3JvbGw6ITF9LFdpPXtiYWNrZHJvcDpcIihib29sZWFufHN0cmluZylcIixrZXlib2FyZDpcImJvb2xlYW5cIixzY3JvbGw6XCJib29sZWFuXCJ9O2NsYXNzIEJpIGV4dGVuZHMgV3tjb25zdHJ1Y3Rvcih0LGUpe3N1cGVyKHQsZSksdGhpcy5faXNTaG93bj0hMSx0aGlzLl9iYWNrZHJvcD10aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKSx0aGlzLl9mb2N1c3RyYXA9dGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpLHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuICRpfXN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKXtyZXR1cm4gV2l9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJvZmZjYW52YXNcIn10b2dnbGUodCl7cmV0dXJuIHRoaXMuX2lzU2hvd24/dGhpcy5oaWRlKCk6dGhpcy5zaG93KHQpfXNob3codCl7dGhpcy5faXNTaG93bnx8SS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLm9mZmNhbnZhc1wiLHtyZWxhdGVkVGFyZ2V0OnR9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5faXNTaG93bj0hMCx0aGlzLl9iYWNrZHJvcC5zaG93KCksdGhpcy5fY29uZmlnLnNjcm9sbHx8KG5ldyBwaSkuaGlkZSgpLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiLCEwKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIixcImRpYWxvZ1wiKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoUGkpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5fY29uZmlnLnNjcm9sbCYmIXRoaXMuX2NvbmZpZy5iYWNrZHJvcHx8dGhpcy5fZm9jdXN0cmFwLmFjdGl2YXRlKCksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKE5pKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoUGkpLEkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvd24uYnMub2ZmY2FudmFzXCIse3JlbGF0ZWRUYXJnZXQ6dH0pfSksdGhpcy5fZWxlbWVudCwhMCkpfWhpZGUoKXt0aGlzLl9pc1Nob3duJiYoSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlLmJzLm9mZmNhbnZhc1wiKS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKSx0aGlzLl9lbGVtZW50LmJsdXIoKSx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChqaSksdGhpcy5fYmFja2Ryb3AuaGlkZSgpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKE5pLGppKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiksdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJyb2xlXCIpLHRoaXMuX2NvbmZpZy5zY3JvbGx8fChuZXcgcGkpLnJlc2V0KCksSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsSGkpfSksdGhpcy5fZWxlbWVudCwhMCkpKX1kaXNwb3NlKCl7dGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpLHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCksc3VwZXIuZGlzcG9zZSgpfV9pbml0aWFsaXplQmFja0Ryb3AoKXtjb25zdCB0PUJvb2xlYW4odGhpcy5fY29uZmlnLmJhY2tkcm9wKTtyZXR1cm4gbmV3IHZpKHtjbGFzc05hbWU6XCJvZmZjYW52YXMtYmFja2Ryb3BcIixpc1Zpc2libGU6dCxpc0FuaW1hdGVkOiEwLHJvb3RFbGVtZW50OnRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSxjbGlja0NhbGxiYWNrOnQ/KCk9PntcInN0YXRpY1wiIT09dGhpcy5fY29uZmlnLmJhY2tkcm9wP3RoaXMuaGlkZSgpOkkudHJpZ2dlcih0aGlzLl9lbGVtZW50LEZpKX06bnVsbH0pfV9pbml0aWFsaXplRm9jdXNUcmFwKCl7cmV0dXJuIG5ldyBUaSh7dHJhcEVsZW1lbnQ6dGhpcy5fZWxlbWVudH0pfV9hZGRFdmVudExpc3RlbmVycygpe0kub24odGhpcy5fZWxlbWVudCxcImtleWRvd24uZGlzbWlzcy5icy5vZmZjYW52YXNcIiwodD0+e1wiRXNjYXBlXCI9PT10LmtleSYmKHRoaXMuX2NvbmZpZy5rZXlib2FyZD90aGlzLmhpZGUoKTpJLnRyaWdnZXIodGhpcy5fZWxlbWVudCxGaSkpfSkpfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBlPUJpLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYodm9pZCAwPT09ZVt0XXx8dC5zdGFydHNXaXRoKFwiX1wiKXx8XCJjb25zdHJ1Y3RvclwiPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke3R9XCJgKTtlW3RdKHRoaXMpfX0pKX19SS5vbihkb2N1bWVudCxcImNsaWNrLmJzLm9mZmNhbnZhcy5kYXRhLWFwaVwiLCdbZGF0YS1icy10b2dnbGU9XCJvZmZjYW52YXNcIl0nLChmdW5jdGlvbih0KXtjb25zdCBlPXouZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtpZihbXCJBXCIsXCJBUkVBXCJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkmJnQucHJldmVudERlZmF1bHQoKSxyKHRoaXMpKXJldHVybjtJLm9uZShlLEhpLCgoKT0+e28odGhpcykmJnRoaXMuZm9jdXMoKX0pKTtjb25zdCBpPXouZmluZE9uZShNaSk7aSYmaSE9PWUmJkJpLmdldEluc3RhbmNlKGkpLmhpZGUoKSxCaS5nZXRPckNyZWF0ZUluc3RhbmNlKGUpLnRvZ2dsZSh0aGlzKX0pKSxJLm9uKHdpbmRvdyxcImxvYWQuYnMub2ZmY2FudmFzLmRhdGEtYXBpXCIsKCgpPT57Zm9yKGNvbnN0IHQgb2Ygei5maW5kKE1pKSlCaS5nZXRPckNyZWF0ZUluc3RhbmNlKHQpLnNob3coKX0pKSxJLm9uKHdpbmRvdyxcInJlc2l6ZS5icy5vZmZjYW52YXNcIiwoKCk9Pntmb3IoY29uc3QgdCBvZiB6LmZpbmQoXCJbYXJpYS1tb2RhbF1bY2xhc3MqPXNob3ddW2NsYXNzKj1vZmZjYW52YXMtXVwiKSlcImZpeGVkXCIhPT1nZXRDb21wdXRlZFN0eWxlKHQpLnBvc2l0aW9uJiZCaS5nZXRPckNyZWF0ZUluc3RhbmNlKHQpLmhpZGUoKX0pKSxSKEJpKSxmKEJpKTtjb25zdCB6aT1uZXcgU2V0KFtcImJhY2tncm91bmRcIixcImNpdGVcIixcImhyZWZcIixcIml0ZW10eXBlXCIsXCJsb25nZGVzY1wiLFwicG9zdGVyXCIsXCJzcmNcIixcInhsaW5rOmhyZWZcIl0pLFJpPS9eKD86KD86aHR0cHM/fG1haWx0b3xmdHB8dGVsfGZpbGV8c21zKTp8W14jJi86P10qKD86WyMvP118JCkpL2kscWk9L15kYXRhOig/OmltYWdlXFwvKD86Ym1wfGdpZnxqcGVnfGpwZ3xwbmd8dGlmZnx3ZWJwKXx2aWRlb1xcLyg/Om1wZWd8bXA0fG9nZ3x3ZWJtKXxhdWRpb1xcLyg/Om1wM3xvZ2F8b2dnfG9wdXMpKTtiYXNlNjQsW1xcZCsvYS16XSs9KiQvaSxWaT0odCxlKT0+e2NvbnN0IGk9dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBlLmluY2x1ZGVzKGkpPyF6aS5oYXMoaSl8fEJvb2xlYW4oUmkudGVzdCh0Lm5vZGVWYWx1ZSl8fHFpLnRlc3QodC5ub2RlVmFsdWUpKTplLmZpbHRlcigodD0+dCBpbnN0YW5jZW9mIFJlZ0V4cCkpLnNvbWUoKHQ9PnQudGVzdChpKSkpfSxLaT17XCIqXCI6W1wiY2xhc3NcIixcImRpclwiLFwiaWRcIixcImxhbmdcIixcInJvbGVcIiwvXmFyaWEtW1xcdy1dKiQvaV0sYTpbXCJ0YXJnZXRcIixcImhyZWZcIixcInRpdGxlXCIsXCJyZWxcIl0sYXJlYTpbXSxiOltdLGJyOltdLGNvbDpbXSxjb2RlOltdLGRpdjpbXSxlbTpbXSxocjpbXSxoMTpbXSxoMjpbXSxoMzpbXSxoNDpbXSxoNTpbXSxoNjpbXSxpOltdLGltZzpbXCJzcmNcIixcInNyY3NldFwiLFwiYWx0XCIsXCJ0aXRsZVwiLFwid2lkdGhcIixcImhlaWdodFwiXSxsaTpbXSxvbDpbXSxwOltdLHByZTpbXSxzOltdLHNtYWxsOltdLHNwYW46W10sc3ViOltdLHN1cDpbXSxzdHJvbmc6W10sdTpbXSx1bDpbXX0sUWk9e2FsbG93TGlzdDpLaSxjb250ZW50Ont9LGV4dHJhQ2xhc3M6XCJcIixodG1sOiExLHNhbml0aXplOiEwLHNhbml0aXplRm46bnVsbCx0ZW1wbGF0ZTpcIjxkaXY+PC9kaXY+XCJ9LFhpPXthbGxvd0xpc3Q6XCJvYmplY3RcIixjb250ZW50Olwib2JqZWN0XCIsZXh0cmFDbGFzczpcIihzdHJpbmd8ZnVuY3Rpb24pXCIsaHRtbDpcImJvb2xlYW5cIixzYW5pdGl6ZTpcImJvb2xlYW5cIixzYW5pdGl6ZUZuOlwiKG51bGx8ZnVuY3Rpb24pXCIsdGVtcGxhdGU6XCJzdHJpbmdcIn0sWWk9e2VudHJ5OlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9ufG51bGwpXCIsc2VsZWN0b3I6XCIoc3RyaW5nfGVsZW1lbnQpXCJ9O2NsYXNzIFVpIGV4dGVuZHMgJHtjb25zdHJ1Y3Rvcih0KXtzdXBlcigpLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcodCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIFFpfXN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKXtyZXR1cm4gWGl9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJUZW1wbGF0ZUZhY3RvcnlcIn1nZXRDb250ZW50KCl7cmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5fY29uZmlnLmNvbnRlbnQpLm1hcCgodD0+dGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odCkpKS5maWx0ZXIoQm9vbGVhbil9aGFzQ29udGVudCgpe3JldHVybiB0aGlzLmdldENvbnRlbnQoKS5sZW5ndGg+MH1jaGFuZ2VDb250ZW50KHQpe3JldHVybiB0aGlzLl9jaGVja0NvbnRlbnQodCksdGhpcy5fY29uZmlnLmNvbnRlbnQ9ey4uLnRoaXMuX2NvbmZpZy5jb250ZW50LC4uLnR9LHRoaXN9dG9IdG1sKCl7Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuaW5uZXJIVE1MPXRoaXMuX21heWJlU2FuaXRpemUodGhpcy5fY29uZmlnLnRlbXBsYXRlKTtmb3IoY29uc3RbZSxpXW9mIE9iamVjdC5lbnRyaWVzKHRoaXMuX2NvbmZpZy5jb250ZW50KSl0aGlzLl9zZXRDb250ZW50KHQsaSxlKTtjb25zdCBlPXQuY2hpbGRyZW5bMF0saT10aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuZXh0cmFDbGFzcyk7cmV0dXJuIGkmJmUuY2xhc3NMaXN0LmFkZCguLi5pLnNwbGl0KFwiIFwiKSksZX1fdHlwZUNoZWNrQ29uZmlnKHQpe3N1cGVyLl90eXBlQ2hlY2tDb25maWcodCksdGhpcy5fY2hlY2tDb250ZW50KHQuY29udGVudCl9X2NoZWNrQ29udGVudCh0KXtmb3IoY29uc3RbZSxpXW9mIE9iamVjdC5lbnRyaWVzKHQpKXN1cGVyLl90eXBlQ2hlY2tDb25maWcoe3NlbGVjdG9yOmUsZW50cnk6aX0sWWkpfV9zZXRDb250ZW50KHQsZSxpKXtjb25zdCBvPXouZmluZE9uZShpLHQpO28mJigoZT10aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbihlKSk/bihlKT90aGlzLl9wdXRFbGVtZW50SW5UZW1wbGF0ZShzKGUpLG8pOnRoaXMuX2NvbmZpZy5odG1sP28uaW5uZXJIVE1MPXRoaXMuX21heWJlU2FuaXRpemUoZSk6by50ZXh0Q29udGVudD1lOm8ucmVtb3ZlKCkpfV9tYXliZVNhbml0aXplKHQpe3JldHVybiB0aGlzLl9jb25maWcuc2FuaXRpemU/ZnVuY3Rpb24odCxlLGkpe2lmKCF0Lmxlbmd0aClyZXR1cm4gdDtpZihpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpKXJldHVybiBpKHQpO2NvbnN0IG49KG5ldyB3aW5kb3cuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodCxcInRleHQvaHRtbFwiKSxzPVtdLmNvbmNhdCguLi5uLmJvZHkucXVlcnlTZWxlY3RvckFsbChcIipcIikpO2Zvcihjb25zdCB0IG9mIHMpe2NvbnN0IGk9dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKCFPYmplY3Qua2V5cyhlKS5pbmNsdWRlcyhpKSl7dC5yZW1vdmUoKTtjb250aW51ZX1jb25zdCBuPVtdLmNvbmNhdCguLi50LmF0dHJpYnV0ZXMpLHM9W10uY29uY2F0KGVbXCIqXCJdfHxbXSxlW2ldfHxbXSk7Zm9yKGNvbnN0IGUgb2YgbilWaShlLHMpfHx0LnJlbW92ZUF0dHJpYnV0ZShlLm5vZGVOYW1lKX1yZXR1cm4gbi5ib2R5LmlubmVySFRNTH0odCx0aGlzLl9jb25maWcuYWxsb3dMaXN0LHRoaXMuX2NvbmZpZy5zYW5pdGl6ZUZuKTp0fV9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0KXtyZXR1cm4gcCh0LFt0aGlzXSl9X3B1dEVsZW1lbnRJblRlbXBsYXRlKHQsZSl7aWYodGhpcy5fY29uZmlnLmh0bWwpcmV0dXJuIGUuaW5uZXJIVE1MPVwiXCIsdm9pZCBlLmFwcGVuZCh0KTtlLnRleHRDb250ZW50PXQudGV4dENvbnRlbnR9fWNvbnN0IEdpPW5ldyBTZXQoW1wic2FuaXRpemVcIixcImFsbG93TGlzdFwiLFwic2FuaXRpemVGblwiXSksSmk9XCJmYWRlXCIsWmk9XCJzaG93XCIsdG49XCIubW9kYWxcIixlbj1cImhpZGUuYnMubW9kYWxcIixubj1cImhvdmVyXCIsc249XCJmb2N1c1wiLG9uPXtBVVRPOlwiYXV0b1wiLFRPUDpcInRvcFwiLFJJR0hUOnUoKT9cImxlZnRcIjpcInJpZ2h0XCIsQk9UVE9NOlwiYm90dG9tXCIsTEVGVDp1KCk/XCJyaWdodFwiOlwibGVmdFwifSxybj17YWxsb3dMaXN0OktpLGFuaW1hdGlvbjohMCxib3VuZGFyeTpcImNsaXBwaW5nUGFyZW50c1wiLGNvbnRhaW5lcjohMSxjdXN0b21DbGFzczpcIlwiLGRlbGF5OjAsZmFsbGJhY2tQbGFjZW1lbnRzOltcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiLFwibGVmdFwiXSxodG1sOiExLG9mZnNldDpbMCwwXSxwbGFjZW1lbnQ6XCJ0b3BcIixwb3BwZXJDb25maWc6bnVsbCxzYW5pdGl6ZTohMCxzYW5pdGl6ZUZuOm51bGwsc2VsZWN0b3I6ITEsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+Jyx0aXRsZTpcIlwiLHRyaWdnZXI6XCJob3ZlciBmb2N1c1wifSxhbj17YWxsb3dMaXN0Olwib2JqZWN0XCIsYW5pbWF0aW9uOlwiYm9vbGVhblwiLGJvdW5kYXJ5OlwiKHN0cmluZ3xlbGVtZW50KVwiLGNvbnRhaW5lcjpcIihzdHJpbmd8ZWxlbWVudHxib29sZWFuKVwiLGN1c3RvbUNsYXNzOlwiKHN0cmluZ3xmdW5jdGlvbilcIixkZWxheTpcIihudW1iZXJ8b2JqZWN0KVwiLGZhbGxiYWNrUGxhY2VtZW50czpcImFycmF5XCIsaHRtbDpcImJvb2xlYW5cIixvZmZzZXQ6XCIoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKVwiLHBsYWNlbWVudDpcIihzdHJpbmd8ZnVuY3Rpb24pXCIscG9wcGVyQ29uZmlnOlwiKG51bGx8b2JqZWN0fGZ1bmN0aW9uKVwiLHNhbml0aXplOlwiYm9vbGVhblwiLHNhbml0aXplRm46XCIobnVsbHxmdW5jdGlvbilcIixzZWxlY3RvcjpcIihzdHJpbmd8Ym9vbGVhbilcIix0ZW1wbGF0ZTpcInN0cmluZ1wiLHRpdGxlOlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwiLHRyaWdnZXI6XCJzdHJpbmdcIn07Y2xhc3MgbG4gZXh0ZW5kcyBXe2NvbnN0cnVjdG9yKHQsZSl7aWYodm9pZCAwPT09VmUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJvb3RzdHJhcCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO3N1cGVyKHQsZSksdGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9pc0hvdmVyZWQ9bnVsbCx0aGlzLl9hY3RpdmVUcmlnZ2VyPXt9LHRoaXMuX3BvcHBlcj1udWxsLHRoaXMuX3RlbXBsYXRlRmFjdG9yeT1udWxsLHRoaXMuX25ld0NvbnRlbnQ9bnVsbCx0aGlzLnRpcD1udWxsLHRoaXMuX3NldExpc3RlbmVycygpLHRoaXMuX2NvbmZpZy5zZWxlY3Rvcnx8dGhpcy5fZml4VGl0bGUoKX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gcm59c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBhbn1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cInRvb2x0aXBcIn1lbmFibGUoKXt0aGlzLl9pc0VuYWJsZWQ9ITB9ZGlzYWJsZSgpe3RoaXMuX2lzRW5hYmxlZD0hMX10b2dnbGVFbmFibGVkKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9dG9nZ2xlKCl7dGhpcy5faXNFbmFibGVkJiYodGhpcy5fYWN0aXZlVHJpZ2dlci5jbGljaz0hdGhpcy5fYWN0aXZlVHJpZ2dlci5jbGljayx0aGlzLl9pc1Nob3duKCk/dGhpcy5fbGVhdmUoKTp0aGlzLl9lbnRlcigpKX1kaXNwb3NlKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLEkub2ZmKHRoaXMuX2VsZW1lbnQuY2xvc2VzdCh0biksZW4sdGhpcy5faGlkZU1vZGFsSGFuZGxlciksdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpJiZ0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpKSx0aGlzLl9kaXNwb3NlUG9wcGVyKCksc3VwZXIuZGlzcG9zZSgpfXNob3coKXtpZihcIm5vbmVcIj09PXRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTtpZighdGhpcy5faXNXaXRoQ29udGVudCgpfHwhdGhpcy5faXNFbmFibGVkKXJldHVybjtjb25zdCB0PUkudHJpZ2dlcih0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKFwic2hvd1wiKSksZT0oYSh0aGlzLl9lbGVtZW50KXx8dGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuY29udGFpbnModGhpcy5fZWxlbWVudCk7aWYodC5kZWZhdWx0UHJldmVudGVkfHwhZSlyZXR1cm47dGhpcy5fZGlzcG9zZVBvcHBlcigpO2NvbnN0IGk9dGhpcy5fZ2V0VGlwRWxlbWVudCgpO3RoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiLGkuZ2V0QXR0cmlidXRlKFwiaWRcIikpO2NvbnN0e2NvbnRhaW5lcjpufT10aGlzLl9jb25maWc7aWYodGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCl8fChuLmFwcGVuZChpKSxJLnRyaWdnZXIodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShcImluc2VydGVkXCIpKSksdGhpcy5fcG9wcGVyPXRoaXMuX2NyZWF0ZVBvcHBlcihpKSxpLmNsYXNzTGlzdC5hZGQoWmkpLFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpZm9yKGNvbnN0IHQgb2ZbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikpSS5vbih0LFwibW91c2VvdmVyXCIsbCk7dGhpcy5fcXVldWVDYWxsYmFjaygoKCk9PntJLnRyaWdnZXIodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShcInNob3duXCIpKSwhMT09PXRoaXMuX2lzSG92ZXJlZCYmdGhpcy5fbGVhdmUoKSx0aGlzLl9pc0hvdmVyZWQ9ITF9KSx0aGlzLnRpcCx0aGlzLl9pc0FuaW1hdGVkKCkpfWhpZGUoKXtpZih0aGlzLl9pc1Nob3duKCkmJiFJLnRyaWdnZXIodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShcImhpZGVcIikpLmRlZmF1bHRQcmV2ZW50ZWQpe2lmKHRoaXMuX2dldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKFppKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KWZvcihjb25zdCB0IG9mW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pKUkub2ZmKHQsXCJtb3VzZW92ZXJcIixsKTt0aGlzLl9hY3RpdmVUcmlnZ2VyLmNsaWNrPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXIuZm9jdXM9ITEsdGhpcy5fYWN0aXZlVHJpZ2dlci5ob3Zlcj0hMSx0aGlzLl9pc0hvdmVyZWQ9bnVsbCx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+e3RoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKXx8KHRoaXMuX2lzSG92ZXJlZHx8dGhpcy5fZGlzcG9zZVBvcHBlcigpLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiKSxJLnRyaWdnZXIodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShcImhpZGRlblwiKSkpfSksdGhpcy50aXAsdGhpcy5faXNBbmltYXRlZCgpKX19dXBkYXRlKCl7dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIudXBkYXRlKCl9X2lzV2l0aENvbnRlbnQoKXtyZXR1cm4gQm9vbGVhbih0aGlzLl9nZXRUaXRsZSgpKX1fZ2V0VGlwRWxlbWVudCgpe3JldHVybiB0aGlzLnRpcHx8KHRoaXMudGlwPXRoaXMuX2NyZWF0ZVRpcEVsZW1lbnQodGhpcy5fbmV3Q29udGVudHx8dGhpcy5fZ2V0Q29udGVudEZvclRlbXBsYXRlKCkpKSx0aGlzLnRpcH1fY3JlYXRlVGlwRWxlbWVudCh0KXtjb25zdCBlPXRoaXMuX2dldFRlbXBsYXRlRmFjdG9yeSh0KS50b0h0bWwoKTtpZighZSlyZXR1cm4gbnVsbDtlLmNsYXNzTGlzdC5yZW1vdmUoSmksWmkpLGUuY2xhc3NMaXN0LmFkZChgYnMtJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9LWF1dG9gKTtjb25zdCBpPSh0PT57ZG97dCs9TWF0aC5mbG9vcigxZTYqTWF0aC5yYW5kb20oKSl9d2hpbGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCkpO3JldHVybiB0fSkodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKS50b1N0cmluZygpO3JldHVybiBlLnNldEF0dHJpYnV0ZShcImlkXCIsaSksdGhpcy5faXNBbmltYXRlZCgpJiZlLmNsYXNzTGlzdC5hZGQoSmkpLGV9c2V0Q29udGVudCh0KXt0aGlzLl9uZXdDb250ZW50PXQsdGhpcy5faXNTaG93bigpJiYodGhpcy5fZGlzcG9zZVBvcHBlcigpLHRoaXMuc2hvdygpKX1fZ2V0VGVtcGxhdGVGYWN0b3J5KHQpe3JldHVybiB0aGlzLl90ZW1wbGF0ZUZhY3Rvcnk/dGhpcy5fdGVtcGxhdGVGYWN0b3J5LmNoYW5nZUNvbnRlbnQodCk6dGhpcy5fdGVtcGxhdGVGYWN0b3J5PW5ldyBVaSh7Li4udGhpcy5fY29uZmlnLGNvbnRlbnQ6dCxleHRyYUNsYXNzOnRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy5jdXN0b21DbGFzcyl9KSx0aGlzLl90ZW1wbGF0ZUZhY3Rvcnl9X2dldENvbnRlbnRGb3JUZW1wbGF0ZSgpe3JldHVybntcIi50b29sdGlwLWlubmVyXCI6dGhpcy5fZ2V0VGl0bGUoKX19X2dldFRpdGxlKCl7cmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy50aXRsZSl8fHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1vcmlnaW5hbC10aXRsZVwiKX1faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLmdldE9yQ3JlYXRlSW5zdGFuY2UodC5kZWxlZ2F0ZVRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKX1faXNBbmltYXRlZCgpe3JldHVybiB0aGlzLl9jb25maWcuYW5pbWF0aW9ufHx0aGlzLnRpcCYmdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKEppKX1faXNTaG93bigpe3JldHVybiB0aGlzLnRpcCYmdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKFppKX1fY3JlYXRlUG9wcGVyKHQpe2NvbnN0IGU9cCh0aGlzLl9jb25maWcucGxhY2VtZW50LFt0aGlzLHQsdGhpcy5fZWxlbWVudF0pLGk9b25bZS50b1VwcGVyQ2FzZSgpXTtyZXR1cm4gcWUodGhpcy5fZWxlbWVudCx0LHRoaXMuX2dldFBvcHBlckNvbmZpZyhpKSl9X2dldE9mZnNldCgpe2NvbnN0e29mZnNldDp0fT10aGlzLl9jb25maWc7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dC5zcGxpdChcIixcIikubWFwKCh0PT5OdW1iZXIucGFyc2VJbnQodCwxMCkpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P2U9PnQoZSx0aGlzLl9lbGVtZW50KTp0fV9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0KXtyZXR1cm4gcCh0LFt0aGlzLl9lbGVtZW50XSl9X2dldFBvcHBlckNvbmZpZyh0KXtjb25zdCBlPXtwbGFjZW1lbnQ6dCxtb2RpZmllcnM6W3tuYW1lOlwiZmxpcFwiLG9wdGlvbnM6e2ZhbGxiYWNrUGxhY2VtZW50czp0aGlzLl9jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRzfX0se25hbWU6XCJvZmZzZXRcIixvcHRpb25zOntvZmZzZXQ6dGhpcy5fZ2V0T2Zmc2V0KCl9fSx7bmFtZTpcInByZXZlbnRPdmVyZmxvd1wiLG9wdGlvbnM6e2JvdW5kYXJ5OnRoaXMuX2NvbmZpZy5ib3VuZGFyeX19LHtuYW1lOlwiYXJyb3dcIixvcHRpb25zOntlbGVtZW50OmAuJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9LWFycm93YH19LHtuYW1lOlwicHJlU2V0UGxhY2VtZW50XCIsZW5hYmxlZDohMCxwaGFzZTpcImJlZm9yZU1haW5cIixmbjp0PT57dGhpcy5fZ2V0VGlwRWxlbWVudCgpLnNldEF0dHJpYnV0ZShcImRhdGEtcG9wcGVyLXBsYWNlbWVudFwiLHQuc3RhdGUucGxhY2VtZW50KX19XX07cmV0dXJuey4uLmUsLi4ucCh0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnLFtlXSl9fV9zZXRMaXN0ZW5lcnMoKXtjb25zdCB0PXRoaXMuX2NvbmZpZy50cmlnZ2VyLnNwbGl0KFwiIFwiKTtmb3IoY29uc3QgZSBvZiB0KWlmKFwiY2xpY2tcIj09PWUpSS5vbih0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKFwiY2xpY2tcIiksdGhpcy5fY29uZmlnLnNlbGVjdG9yLCh0PT57dGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQpLnRvZ2dsZSgpfSkpO2Vsc2UgaWYoXCJtYW51YWxcIiE9PWUpe2NvbnN0IHQ9ZT09PW5uP3RoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKFwibW91c2VlbnRlclwiKTp0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShcImZvY3VzaW5cIiksaT1lPT09bm4/dGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoXCJtb3VzZWxlYXZlXCIpOnRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKFwiZm9jdXNvdXRcIik7SS5vbih0aGlzLl9lbGVtZW50LHQsdGhpcy5fY29uZmlnLnNlbGVjdG9yLCh0PT57Y29uc3QgZT10aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQodCk7ZS5fYWN0aXZlVHJpZ2dlcltcImZvY3VzaW5cIj09PXQudHlwZT9zbjpubl09ITAsZS5fZW50ZXIoKX0pKSxJLm9uKHRoaXMuX2VsZW1lbnQsaSx0aGlzLl9jb25maWcuc2VsZWN0b3IsKHQ9Pntjb25zdCBlPXRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCh0KTtlLl9hY3RpdmVUcmlnZ2VyW1wiZm9jdXNvdXRcIj09PXQudHlwZT9zbjpubl09ZS5fZWxlbWVudC5jb250YWlucyh0LnJlbGF0ZWRUYXJnZXQpLGUuX2xlYXZlKCl9KSl9dGhpcy5faGlkZU1vZGFsSGFuZGxlcj0oKT0+e3RoaXMuX2VsZW1lbnQmJnRoaXMuaGlkZSgpfSxJLm9uKHRoaXMuX2VsZW1lbnQuY2xvc2VzdCh0biksZW4sdGhpcy5faGlkZU1vZGFsSGFuZGxlcil9X2ZpeFRpdGxlKCl7Y29uc3QgdD10aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpO3QmJih0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIil8fHRoaXMuX2VsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpfHx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIix0KSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtYnMtb3JpZ2luYWwtdGl0bGVcIix0KSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInRpdGxlXCIpKX1fZW50ZXIoKXt0aGlzLl9pc1Nob3duKCl8fHRoaXMuX2lzSG92ZXJlZD90aGlzLl9pc0hvdmVyZWQ9ITA6KHRoaXMuX2lzSG92ZXJlZD0hMCx0aGlzLl9zZXRUaW1lb3V0KCgoKT0+e3RoaXMuX2lzSG92ZXJlZCYmdGhpcy5zaG93KCl9KSx0aGlzLl9jb25maWcuZGVsYXkuc2hvdykpfV9sZWF2ZSgpe3RoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKXx8KHRoaXMuX2lzSG92ZXJlZD0hMSx0aGlzLl9zZXRUaW1lb3V0KCgoKT0+e3RoaXMuX2lzSG92ZXJlZHx8dGhpcy5oaWRlKCl9KSx0aGlzLl9jb25maWcuZGVsYXkuaGlkZSkpfV9zZXRUaW1lb3V0KHQsZSl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLHRoaXMuX3RpbWVvdXQ9c2V0VGltZW91dCh0LGUpfV9pc1dpdGhBY3RpdmVUcmlnZ2VyKCl7cmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5fYWN0aXZlVHJpZ2dlcikuaW5jbHVkZXMoITApfV9nZXRDb25maWcodCl7Y29uc3QgZT1ILmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpO2Zvcihjb25zdCB0IG9mIE9iamVjdC5rZXlzKGUpKUdpLmhhcyh0KSYmZGVsZXRlIGVbdF07cmV0dXJuIHQ9ey4uLmUsLi4uXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fX0sdD10aGlzLl9tZXJnZUNvbmZpZ09iaih0KSx0PXRoaXMuX2NvbmZpZ0FmdGVyTWVyZ2UodCksdGhpcy5fdHlwZUNoZWNrQ29uZmlnKHQpLHR9X2NvbmZpZ0FmdGVyTWVyZ2UodCl7cmV0dXJuIHQuY29udGFpbmVyPSExPT09dC5jb250YWluZXI/ZG9jdW1lbnQuYm9keTpzKHQuY29udGFpbmVyKSxcIm51bWJlclwiPT10eXBlb2YgdC5kZWxheSYmKHQuZGVsYXk9e3Nob3c6dC5kZWxheSxoaWRlOnQuZGVsYXl9KSxcIm51bWJlclwiPT10eXBlb2YgdC50aXRsZSYmKHQudGl0bGU9dC50aXRsZS50b1N0cmluZygpKSxcIm51bWJlclwiPT10eXBlb2YgdC5jb250ZW50JiYodC5jb250ZW50PXQuY29udGVudC50b1N0cmluZygpKSx0fV9nZXREZWxlZ2F0ZUNvbmZpZygpe2NvbnN0IHQ9e307Zm9yKGNvbnN0W2UsaV1vZiBPYmplY3QuZW50cmllcyh0aGlzLl9jb25maWcpKXRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtlXSE9PWkmJih0W2VdPWkpO3JldHVybiB0LnNlbGVjdG9yPSExLHQudHJpZ2dlcj1cIm1hbnVhbFwiLHR9X2Rpc3Bvc2VQb3BwZXIoKXt0aGlzLl9wb3BwZXImJih0aGlzLl9wb3BwZXIuZGVzdHJveSgpLHRoaXMuX3BvcHBlcj1udWxsKSx0aGlzLnRpcCYmKHRoaXMudGlwLnJlbW92ZSgpLHRoaXMudGlwPW51bGwpfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBlPWxuLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYodm9pZCAwPT09ZVt0XSl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke3R9XCJgKTtlW3RdKCl9fSkpfX1mKGxuKTtjb25zdCBjbj17Li4ubG4uRGVmYXVsdCxjb250ZW50OlwiXCIsb2Zmc2V0OlswLDhdLHBsYWNlbWVudDpcInJpZ2h0XCIsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwicG9wb3Zlci1hcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+Jyx0cmlnZ2VyOlwiY2xpY2tcIn0saG49ey4uLmxuLkRlZmF1bHRUeXBlLGNvbnRlbnQ6XCIobnVsbHxzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbilcIn07Y2xhc3MgZG4gZXh0ZW5kcyBsbntzdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gY259c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBobn1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cInBvcG92ZXJcIn1faXNXaXRoQ29udGVudCgpe3JldHVybiB0aGlzLl9nZXRUaXRsZSgpfHx0aGlzLl9nZXRDb250ZW50KCl9X2dldENvbnRlbnRGb3JUZW1wbGF0ZSgpe3JldHVybntcIi5wb3BvdmVyLWhlYWRlclwiOnRoaXMuX2dldFRpdGxlKCksXCIucG9wb3Zlci1ib2R5XCI6dGhpcy5fZ2V0Q29udGVudCgpfX1fZ2V0Q29udGVudCgpe3JldHVybiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY29udGVudCl9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9ZG4uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0oKX19KSl9fWYoZG4pO2NvbnN0IHVuPVwiY2xpY2suYnMuc2Nyb2xsc3B5XCIsZm49XCJhY3RpdmVcIixwbj1cIltocmVmXVwiLG1uPXtvZmZzZXQ6bnVsbCxyb290TWFyZ2luOlwiMHB4IDBweCAtMjUlXCIsc21vb3RoU2Nyb2xsOiExLHRhcmdldDpudWxsLHRocmVzaG9sZDpbLjEsLjUsMV19LGduPXtvZmZzZXQ6XCIobnVtYmVyfG51bGwpXCIscm9vdE1hcmdpbjpcInN0cmluZ1wiLHNtb290aFNjcm9sbDpcImJvb2xlYW5cIix0YXJnZXQ6XCJlbGVtZW50XCIsdGhyZXNob2xkOlwiYXJyYXlcIn07Y2xhc3MgX24gZXh0ZW5kcyBXe2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIodCxlKSx0aGlzLl90YXJnZXRMaW5rcz1uZXcgTWFwLHRoaXMuX29ic2VydmFibGVTZWN0aW9ucz1uZXcgTWFwLHRoaXMuX3Jvb3RFbGVtZW50PVwidmlzaWJsZVwiPT09Z2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl9lbGVtZW50KS5vdmVyZmxvd1k/bnVsbDp0aGlzLl9lbGVtZW50LHRoaXMuX2FjdGl2ZVRhcmdldD1udWxsLHRoaXMuX29ic2VydmVyPW51bGwsdGhpcy5fcHJldmlvdXNTY3JvbGxEYXRhPXt2aXNpYmxlRW50cnlUb3A6MCxwYXJlbnRTY3JvbGxUb3A6MH0sdGhpcy5yZWZyZXNoKCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIG1ufXN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKXtyZXR1cm4gZ259c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJzY3JvbGxzcHlcIn1yZWZyZXNoKCl7dGhpcy5faW5pdGlhbGl6ZVRhcmdldHNBbmRPYnNlcnZhYmxlcygpLHRoaXMuX21heWJlRW5hYmxlU21vb3RoU2Nyb2xsKCksdGhpcy5fb2JzZXJ2ZXI/dGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpOnRoaXMuX29ic2VydmVyPXRoaXMuX2dldE5ld09ic2VydmVyKCk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5fb2JzZXJ2YWJsZVNlY3Rpb25zLnZhbHVlcygpKXRoaXMuX29ic2VydmVyLm9ic2VydmUodCl9ZGlzcG9zZSgpe3RoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKSxzdXBlci5kaXNwb3NlKCl9X2NvbmZpZ0FmdGVyTWVyZ2UodCl7cmV0dXJuIHQudGFyZ2V0PXModC50YXJnZXQpfHxkb2N1bWVudC5ib2R5LHQucm9vdE1hcmdpbj10Lm9mZnNldD9gJHt0Lm9mZnNldH1weCAwcHggLTMwJWA6dC5yb290TWFyZ2luLFwic3RyaW5nXCI9PXR5cGVvZiB0LnRocmVzaG9sZCYmKHQudGhyZXNob2xkPXQudGhyZXNob2xkLnNwbGl0KFwiLFwiKS5tYXAoKHQ9Pk51bWJlci5wYXJzZUZsb2F0KHQpKSkpLHR9X21heWJlRW5hYmxlU21vb3RoU2Nyb2xsKCl7dGhpcy5fY29uZmlnLnNtb290aFNjcm9sbCYmKEkub2ZmKHRoaXMuX2NvbmZpZy50YXJnZXQsdW4pLEkub24odGhpcy5fY29uZmlnLnRhcmdldCx1bixwbiwodD0+e2NvbnN0IGU9dGhpcy5fb2JzZXJ2YWJsZVNlY3Rpb25zLmdldCh0LnRhcmdldC5oYXNoKTtpZihlKXt0LnByZXZlbnREZWZhdWx0KCk7Y29uc3QgaT10aGlzLl9yb290RWxlbWVudHx8d2luZG93LG49ZS5vZmZzZXRUb3AtdGhpcy5fZWxlbWVudC5vZmZzZXRUb3A7aWYoaS5zY3JvbGxUbylyZXR1cm4gdm9pZCBpLnNjcm9sbFRvKHt0b3A6bixiZWhhdmlvcjpcInNtb290aFwifSk7aS5zY3JvbGxUb3A9bn19KSkpfV9nZXROZXdPYnNlcnZlcigpe2NvbnN0IHQ9e3Jvb3Q6dGhpcy5fcm9vdEVsZW1lbnQsdGhyZXNob2xkOnRoaXMuX2NvbmZpZy50aHJlc2hvbGQscm9vdE1hcmdpbjp0aGlzLl9jb25maWcucm9vdE1hcmdpbn07cmV0dXJuIG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigodD0+dGhpcy5fb2JzZXJ2ZXJDYWxsYmFjayh0KSksdCl9X29ic2VydmVyQ2FsbGJhY2sodCl7Y29uc3QgZT10PT50aGlzLl90YXJnZXRMaW5rcy5nZXQoYCMke3QudGFyZ2V0LmlkfWApLGk9dD0+e3RoaXMuX3ByZXZpb3VzU2Nyb2xsRGF0YS52aXNpYmxlRW50cnlUb3A9dC50YXJnZXQub2Zmc2V0VG9wLHRoaXMuX3Byb2Nlc3MoZSh0KSl9LG49KHRoaXMuX3Jvb3RFbGVtZW50fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnNjcm9sbFRvcCxzPW4+PXRoaXMuX3ByZXZpb3VzU2Nyb2xsRGF0YS5wYXJlbnRTY3JvbGxUb3A7dGhpcy5fcHJldmlvdXNTY3JvbGxEYXRhLnBhcmVudFNjcm9sbFRvcD1uO2Zvcihjb25zdCBvIG9mIHQpe2lmKCFvLmlzSW50ZXJzZWN0aW5nKXt0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLl9jbGVhckFjdGl2ZUNsYXNzKGUobykpO2NvbnRpbnVlfWNvbnN0IHQ9by50YXJnZXQub2Zmc2V0VG9wPj10aGlzLl9wcmV2aW91c1Njcm9sbERhdGEudmlzaWJsZUVudHJ5VG9wO2lmKHMmJnQpe2lmKGkobyksIW4pcmV0dXJufWVsc2Ugc3x8dHx8aShvKX19X2luaXRpYWxpemVUYXJnZXRzQW5kT2JzZXJ2YWJsZXMoKXt0aGlzLl90YXJnZXRMaW5rcz1uZXcgTWFwLHRoaXMuX29ic2VydmFibGVTZWN0aW9ucz1uZXcgTWFwO2NvbnN0IHQ9ei5maW5kKHBuLHRoaXMuX2NvbmZpZy50YXJnZXQpO2Zvcihjb25zdCBlIG9mIHQpe2lmKCFlLmhhc2h8fHIoZSkpY29udGludWU7Y29uc3QgdD16LmZpbmRPbmUoZS5oYXNoLHRoaXMuX2VsZW1lbnQpO28odCkmJih0aGlzLl90YXJnZXRMaW5rcy5zZXQoZS5oYXNoLGUpLHRoaXMuX29ic2VydmFibGVTZWN0aW9ucy5zZXQoZS5oYXNoLHQpKX19X3Byb2Nlc3ModCl7dGhpcy5fYWN0aXZlVGFyZ2V0IT09dCYmKHRoaXMuX2NsZWFyQWN0aXZlQ2xhc3ModGhpcy5fY29uZmlnLnRhcmdldCksdGhpcy5fYWN0aXZlVGFyZ2V0PXQsdC5jbGFzc0xpc3QuYWRkKGZuKSx0aGlzLl9hY3RpdmF0ZVBhcmVudHModCksSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJhY3RpdmF0ZS5icy5zY3JvbGxzcHlcIix7cmVsYXRlZFRhcmdldDp0fSkpfV9hY3RpdmF0ZVBhcmVudHModCl7aWYodC5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wZG93bi1pdGVtXCIpKXouZmluZE9uZShcIi5kcm9wZG93bi10b2dnbGVcIix0LmNsb3Nlc3QoXCIuZHJvcGRvd25cIikpLmNsYXNzTGlzdC5hZGQoZm4pO2Vsc2UgZm9yKGNvbnN0IGUgb2Ygei5wYXJlbnRzKHQsXCIubmF2LCAubGlzdC1ncm91cFwiKSlmb3IoY29uc3QgdCBvZiB6LnByZXYoZSxcIi5uYXYtbGluaywgLm5hdi1pdGVtID4gLm5hdi1saW5rLCAubGlzdC1ncm91cC1pdGVtXCIpKXQuY2xhc3NMaXN0LmFkZChmbil9X2NsZWFyQWN0aXZlQ2xhc3ModCl7dC5jbGFzc0xpc3QucmVtb3ZlKGZuKTtjb25zdCBlPXouZmluZChcIltocmVmXS5hY3RpdmVcIix0KTtmb3IoY29uc3QgdCBvZiBlKXQuY2xhc3NMaXN0LnJlbW92ZShmbil9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9X24uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdfHx0LnN0YXJ0c1dpdGgoXCJfXCIpfHxcImNvbnN0cnVjdG9yXCI9PT10KXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0oKX19KSl9fUkub24od2luZG93LFwibG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGlcIiwoKCk9Pntmb3IoY29uc3QgdCBvZiB6LmZpbmQoJ1tkYXRhLWJzLXNweT1cInNjcm9sbFwiXScpKV9uLmdldE9yQ3JlYXRlSW5zdGFuY2UodCl9KSksZihfbik7Y29uc3QgYm49XCJBcnJvd0xlZnRcIix2bj1cIkFycm93UmlnaHRcIix5bj1cIkFycm93VXBcIix3bj1cIkFycm93RG93blwiLEFuPVwiYWN0aXZlXCIsRW49XCJmYWRlXCIsVG49XCJzaG93XCIsQ249J1tkYXRhLWJzLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwibGlzdFwiXScsT249YC5uYXYtbGluazpub3QoLmRyb3Bkb3duLXRvZ2dsZSksIC5saXN0LWdyb3VwLWl0ZW06bm90KC5kcm9wZG93bi10b2dnbGUpLCBbcm9sZT1cInRhYlwiXTpub3QoLmRyb3Bkb3duLXRvZ2dsZSksICR7Q259YDtjbGFzcyB4biBleHRlbmRzIFd7Y29uc3RydWN0b3IodCl7c3VwZXIodCksdGhpcy5fcGFyZW50PXRoaXMuX2VsZW1lbnQuY2xvc2VzdCgnLmxpc3QtZ3JvdXAsIC5uYXYsIFtyb2xlPVwidGFibGlzdFwiXScpLHRoaXMuX3BhcmVudCYmKHRoaXMuX3NldEluaXRpYWxBdHRyaWJ1dGVzKHRoaXMuX3BhcmVudCx0aGlzLl9nZXRDaGlsZHJlbigpKSxJLm9uKHRoaXMuX2VsZW1lbnQsXCJrZXlkb3duLmJzLnRhYlwiLCh0PT50aGlzLl9rZXlkb3duKHQpKSkpfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwidGFiXCJ9c2hvdygpe2NvbnN0IHQ9dGhpcy5fZWxlbWVudDtpZih0aGlzLl9lbGVtSXNBY3RpdmUodCkpcmV0dXJuO2NvbnN0IGU9dGhpcy5fZ2V0QWN0aXZlRWxlbSgpLGk9ZT9JLnRyaWdnZXIoZSxcImhpZGUuYnMudGFiXCIse3JlbGF0ZWRUYXJnZXQ6dH0pOm51bGw7SS50cmlnZ2VyKHQsXCJzaG93LmJzLnRhYlwiLHtyZWxhdGVkVGFyZ2V0OmV9KS5kZWZhdWx0UHJldmVudGVkfHxpJiZpLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLl9kZWFjdGl2YXRlKGUsdCksdGhpcy5fYWN0aXZhdGUodCxlKSl9X2FjdGl2YXRlKHQsZSl7dCYmKHQuY2xhc3NMaXN0LmFkZChBbiksdGhpcy5fYWN0aXZhdGUoei5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHQpKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+e1widGFiXCI9PT10LmdldEF0dHJpYnV0ZShcInJvbGVcIik/KHQucmVtb3ZlQXR0cmlidXRlKFwidGFiaW5kZXhcIiksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsITApLHRoaXMuX3RvZ2dsZURyb3BEb3duKHQsITApLEkudHJpZ2dlcih0LFwic2hvd24uYnMudGFiXCIse3JlbGF0ZWRUYXJnZXQ6ZX0pKTp0LmNsYXNzTGlzdC5hZGQoVG4pfSksdCx0LmNsYXNzTGlzdC5jb250YWlucyhFbikpKX1fZGVhY3RpdmF0ZSh0LGUpe3QmJih0LmNsYXNzTGlzdC5yZW1vdmUoQW4pLHQuYmx1cigpLHRoaXMuX2RlYWN0aXZhdGUoei5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHQpKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+e1widGFiXCI9PT10LmdldEF0dHJpYnV0ZShcInJvbGVcIik/KHQuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCExKSx0LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCItMVwiKSx0aGlzLl90b2dnbGVEcm9wRG93bih0LCExKSxJLnRyaWdnZXIodCxcImhpZGRlbi5icy50YWJcIix7cmVsYXRlZFRhcmdldDplfSkpOnQuY2xhc3NMaXN0LnJlbW92ZShUbil9KSx0LHQuY2xhc3NMaXN0LmNvbnRhaW5zKEVuKSkpfV9rZXlkb3duKHQpe2lmKCFbYm4sdm4seW4sd25dLmluY2x1ZGVzKHQua2V5KSlyZXR1cm47dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCk7Y29uc3QgZT1bdm4sd25dLmluY2x1ZGVzKHQua2V5KSxpPWcodGhpcy5fZ2V0Q2hpbGRyZW4oKS5maWx0ZXIoKHQ9PiFyKHQpKSksdC50YXJnZXQsZSwhMCk7aSYmKGkuZm9jdXMoe3ByZXZlbnRTY3JvbGw6ITB9KSx4bi5nZXRPckNyZWF0ZUluc3RhbmNlKGkpLnNob3coKSl9X2dldENoaWxkcmVuKCl7cmV0dXJuIHouZmluZChPbix0aGlzLl9wYXJlbnQpfV9nZXRBY3RpdmVFbGVtKCl7cmV0dXJuIHRoaXMuX2dldENoaWxkcmVuKCkuZmluZCgodD0+dGhpcy5fZWxlbUlzQWN0aXZlKHQpKSl8fG51bGx9X3NldEluaXRpYWxBdHRyaWJ1dGVzKHQsZSl7dGhpcy5fc2V0QXR0cmlidXRlSWZOb3RFeGlzdHModCxcInJvbGVcIixcInRhYmxpc3RcIik7Zm9yKGNvbnN0IHQgb2YgZSl0aGlzLl9zZXRJbml0aWFsQXR0cmlidXRlc09uQ2hpbGQodCl9X3NldEluaXRpYWxBdHRyaWJ1dGVzT25DaGlsZCh0KXt0PXRoaXMuX2dldElubmVyRWxlbWVudCh0KTtjb25zdCBlPXRoaXMuX2VsZW1Jc0FjdGl2ZSh0KSxpPXRoaXMuX2dldE91dGVyRWxlbWVudCh0KTt0LnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIixlKSxpIT09dCYmdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMoaSxcInJvbGVcIixcInByZXNlbnRhdGlvblwiKSxlfHx0LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCItMVwiKSx0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyh0LFwicm9sZVwiLFwidGFiXCIpLHRoaXMuX3NldEluaXRpYWxBdHRyaWJ1dGVzT25UYXJnZXRQYW5lbCh0KX1fc2V0SW5pdGlhbEF0dHJpYnV0ZXNPblRhcmdldFBhbmVsKHQpe2NvbnN0IGU9ei5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHQpO2UmJih0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyhlLFwicm9sZVwiLFwidGFicGFuZWxcIiksdC5pZCYmdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMoZSxcImFyaWEtbGFiZWxsZWRieVwiLGAke3QuaWR9YCkpfV90b2dnbGVEcm9wRG93bih0LGUpe2NvbnN0IGk9dGhpcy5fZ2V0T3V0ZXJFbGVtZW50KHQpO2lmKCFpLmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duXCIpKXJldHVybjtjb25zdCBuPSh0LG4pPT57Y29uc3Qgcz16LmZpbmRPbmUodCxpKTtzJiZzLmNsYXNzTGlzdC50b2dnbGUobixlKX07bihcIi5kcm9wZG93bi10b2dnbGVcIixBbiksbihcIi5kcm9wZG93bi1tZW51XCIsVG4pLGkuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLGUpfV9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyh0LGUsaSl7dC5oYXNBdHRyaWJ1dGUoZSl8fHQuc2V0QXR0cmlidXRlKGUsaSl9X2VsZW1Jc0FjdGl2ZSh0KXtyZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoQW4pfV9nZXRJbm5lckVsZW1lbnQodCl7cmV0dXJuIHQubWF0Y2hlcyhPbik/dDp6LmZpbmRPbmUoT24sdCl9X2dldE91dGVyRWxlbWVudCh0KXtyZXR1cm4gdC5jbG9zZXN0KFwiLm5hdi1pdGVtLCAubGlzdC1ncm91cC1pdGVtXCIpfHx0fXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBlPXhuLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF18fHQuc3RhcnRzV2l0aChcIl9cIil8fFwiY29uc3RydWN0b3JcIj09PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSgpfX0pKX19SS5vbihkb2N1bWVudCxcImNsaWNrLmJzLnRhYlwiLENuLChmdW5jdGlvbih0KXtbXCJBXCIsXCJBUkVBXCJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkmJnQucHJldmVudERlZmF1bHQoKSxyKHRoaXMpfHx4bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnNob3coKX0pKSxJLm9uKHdpbmRvdyxcImxvYWQuYnMudGFiXCIsKCgpPT57Zm9yKGNvbnN0IHQgb2Ygei5maW5kKCcuYWN0aXZlW2RhdGEtYnMtdG9nZ2xlPVwidGFiXCJdLCAuYWN0aXZlW2RhdGEtYnMtdG9nZ2xlPVwicGlsbFwiXSwgLmFjdGl2ZVtkYXRhLWJzLXRvZ2dsZT1cImxpc3RcIl0nKSl4bi5nZXRPckNyZWF0ZUluc3RhbmNlKHQpfSkpLGYoeG4pO2NvbnN0IGtuPVwiaGlkZVwiLExuPVwic2hvd1wiLFNuPVwic2hvd2luZ1wiLERuPXthbmltYXRpb246XCJib29sZWFuXCIsYXV0b2hpZGU6XCJib29sZWFuXCIsZGVsYXk6XCJudW1iZXJcIn0sSW49e2FuaW1hdGlvbjohMCxhdXRvaGlkZTohMCxkZWxheTo1ZTN9O2NsYXNzIE5uIGV4dGVuZHMgV3tjb25zdHJ1Y3Rvcih0LGUpe3N1cGVyKHQsZSksdGhpcy5fdGltZW91dD1udWxsLHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb249ITEsdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbj0hMSx0aGlzLl9zZXRMaXN0ZW5lcnMoKX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gSW59c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBEbn1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cInRvYXN0XCJ9c2hvdygpe0kudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy50b2FzdFwiKS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5fY2xlYXJUaW1lb3V0KCksdGhpcy5fY29uZmlnLmFuaW1hdGlvbiYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZmFkZVwiKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoa24pLGModGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKExuLFNuKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+e3RoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShTbiksSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy50b2FzdFwiKSx0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpfSksdGhpcy5fZWxlbWVudCx0aGlzLl9jb25maWcuYW5pbWF0aW9uKSl9aGlkZSgpe3RoaXMuaXNTaG93bigpJiYoSS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlLmJzLnRvYXN0XCIpLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoU24pLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGtuKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoU24sTG4pLEkudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZGVuLmJzLnRvYXN0XCIpfSksdGhpcy5fZWxlbWVudCx0aGlzLl9jb25maWcuYW5pbWF0aW9uKSkpfWRpc3Bvc2UoKXt0aGlzLl9jbGVhclRpbWVvdXQoKSx0aGlzLmlzU2hvd24oKSYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKExuKSxzdXBlci5kaXNwb3NlKCl9aXNTaG93bigpe3JldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhMbil9X21heWJlU2NoZWR1bGVIaWRlKCl7dGhpcy5fY29uZmlnLmF1dG9oaWRlJiYodGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbnx8dGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbnx8KHRoaXMuX3RpbWVvdXQ9c2V0VGltZW91dCgoKCk9Pnt0aGlzLmhpZGUoKX0pLHRoaXMuX2NvbmZpZy5kZWxheSkpKX1fb25JbnRlcmFjdGlvbih0LGUpe3N3aXRjaCh0LnR5cGUpe2Nhc2VcIm1vdXNlb3ZlclwiOmNhc2VcIm1vdXNlb3V0XCI6dGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbj1lO2JyZWFrO2Nhc2VcImZvY3VzaW5cIjpjYXNlXCJmb2N1c291dFwiOnRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb249ZX1pZihlKXJldHVybiB2b2lkIHRoaXMuX2NsZWFyVGltZW91dCgpO2NvbnN0IGk9dC5yZWxhdGVkVGFyZ2V0O3RoaXMuX2VsZW1lbnQ9PT1pfHx0aGlzLl9lbGVtZW50LmNvbnRhaW5zKGkpfHx0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpfV9zZXRMaXN0ZW5lcnMoKXtJLm9uKHRoaXMuX2VsZW1lbnQsXCJtb3VzZW92ZXIuYnMudG9hc3RcIiwodD0+dGhpcy5fb25JbnRlcmFjdGlvbih0LCEwKSkpLEkub24odGhpcy5fZWxlbWVudCxcIm1vdXNlb3V0LmJzLnRvYXN0XCIsKHQ9PnRoaXMuX29uSW50ZXJhY3Rpb24odCwhMSkpKSxJLm9uKHRoaXMuX2VsZW1lbnQsXCJmb2N1c2luLmJzLnRvYXN0XCIsKHQ9PnRoaXMuX29uSW50ZXJhY3Rpb24odCwhMCkpKSxJLm9uKHRoaXMuX2VsZW1lbnQsXCJmb2N1c291dC5icy50b2FzdFwiLCh0PT50aGlzLl9vbkludGVyYWN0aW9uKHQsITEpKSl9X2NsZWFyVGltZW91dCgpe2NsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KSx0aGlzLl90aW1lb3V0PW51bGx9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9Tm4uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0odGhpcyl9fSkpfX1yZXR1cm4gUihObiksZihObikse0FsZXJ0OnEsQnV0dG9uOkssQ2Fyb3VzZWw6cnQsQ29sbGFwc2U6ZnQsRHJvcGRvd246Y2ksTW9kYWw6SWksT2ZmY2FudmFzOkJpLFBvcG92ZXI6ZG4sU2Nyb2xsU3B5Ol9uLFRhYjp4bixUb2FzdDpObixUb29sdGlwOmxufX0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb3RzdHJhcC5idW5kbGUubWluLmpzLm1hcCJdLCJuYW1lcyI6WyJ0IiwiZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJnbG9iYWxUaGlzIiwic2VsZiIsImJvb3RzdHJhcCIsIndpbmRvdyIsIkNTUyIsImVzY2FwZSIsInJlcGxhY2UiLCJpIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwibiIsImpxdWVyeSIsIm5vZGVUeXBlIiwicyIsImxlbmd0aCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm8iLCJnZXRDbGllbnRSZWN0cyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY2xvc2VzdCIsInBhcmVudE5vZGUiLCJyIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZGlzYWJsZWQiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJhIiwiZG9jdW1lbnRFbGVtZW50IiwiYXR0YWNoU2hhZG93IiwiZ2V0Um9vdE5vZGUiLCJTaGFkb3dSb290IiwibCIsImMiLCJvZmZzZXRIZWlnaHQiLCJoIiwialF1ZXJ5IiwiYm9keSIsImQiLCJ1IiwiZGlyIiwiZiIsIk5BTUUiLCJmbiIsImpRdWVyeUludGVyZmFjZSIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwicHVzaCIsInAiLCJtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwiTnVtYmVyIiwicGFyc2VGbG9hdCIsInNwbGl0IiwidGFyZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJnIiwiaW5kZXhPZiIsIk1hdGgiLCJtYXgiLCJtaW4iLCJfIiwiYiIsInYiLCJ5IiwidyIsIkEiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIkUiLCJTZXQiLCJUIiwidWlkRXZlbnQiLCJDIiwiTyIsIk9iamVjdCIsInZhbHVlcyIsImZpbmQiLCJjYWxsYWJsZSIsImRlbGVnYXRpb25TZWxlY3RvciIsIngiLCJEIiwiaGFzIiwiayIsInJlbGF0ZWRUYXJnZXQiLCJkZWxlZ2F0ZVRhcmdldCIsImNhbGwiLCJvbmVPZmYiLCJxdWVyeVNlbGVjdG9yQWxsIiwiTiIsIkkiLCJvZmYiLCJ0eXBlIiwiYXBwbHkiLCJMIiwiQm9vbGVhbiIsIlMiLCJlbnRyaWVzIiwiaW5jbHVkZXMiLCJvbiIsIm9uZSIsInN0YXJ0c1dpdGgiLCJrZXlzIiwic2xpY2UiLCJ0cmlnZ2VyIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJnZXQiLCJQIiwiTWFwIiwiaiIsInNldCIsInNpemUiLCJjb25zb2xlIiwiZXJyb3IiLCJBcnJheSIsImZyb20iLCJyZW1vdmUiLCJkZWxldGUiLCJNIiwidG9TdHJpbmciLCJKU09OIiwicGFyc2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJGIiwidG9Mb3dlckNhc2UiLCJIIiwic2V0RGF0YUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZURhdGFBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJnZXREYXRhQXR0cmlidXRlcyIsImRhdGFzZXQiLCJmaWx0ZXIiLCJjaGFyQXQiLCJnZXREYXRhQXR0cmlidXRlIiwiJCIsIkRlZmF1bHQiLCJEZWZhdWx0VHlwZSIsIkVycm9yIiwiX2dldENvbmZpZyIsIl9tZXJnZUNvbmZpZ09iaiIsIl9jb25maWdBZnRlck1lcmdlIiwiX3R5cGVDaGVja0NvbmZpZyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwibWF0Y2giLCJSZWdFeHAiLCJ0ZXN0IiwiVHlwZUVycm9yIiwidG9VcHBlckNhc2UiLCJXIiwiX2VsZW1lbnQiLCJfY29uZmlnIiwiREFUQV9LRVkiLCJkaXNwb3NlIiwiRVZFTlRfS0VZIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9xdWV1ZUNhbGxiYWNrIiwiZ2V0SW5zdGFuY2UiLCJnZXRPckNyZWF0ZUluc3RhbmNlIiwiVkVSU0lPTiIsImV2ZW50TmFtZSIsIkIiLCJ0cmltIiwieiIsImNvbmNhdCIsIkVsZW1lbnQiLCJmaW5kT25lIiwiY2hpbGRyZW4iLCJtYXRjaGVzIiwicGFyZW50cyIsInByZXYiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsImZvY3VzYWJsZUNoaWxkcmVuIiwibWFwIiwiam9pbiIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJnZXRFbGVtZW50RnJvbVNlbGVjdG9yIiwiZ2V0TXVsdGlwbGVFbGVtZW50c0Zyb21TZWxlY3RvciIsIlIiLCJ0YWdOYW1lIiwicSIsImNsb3NlIiwiX2Rlc3Ryb3lFbGVtZW50IiwiZWFjaCIsIlYiLCJLIiwidG9nZ2xlIiwiUSIsImVuZENhbGxiYWNrIiwibGVmdENhbGxiYWNrIiwicmlnaHRDYWxsYmFjayIsIlgiLCJZIiwiaXNTdXBwb3J0ZWQiLCJfZGVsdGFYIiwiX3N1cHBvcnRQb2ludGVyRXZlbnRzIiwiUG9pbnRlckV2ZW50IiwiX2luaXRFdmVudHMiLCJfc3RhcnQiLCJfZXZlbnRJc1BvaW50ZXJQZW5Ub3VjaCIsImNsaWVudFgiLCJ0b3VjaGVzIiwiX2VuZCIsIl9oYW5kbGVTd2lwZSIsIl9tb3ZlIiwiYWJzIiwiYWRkIiwicG9pbnRlclR5cGUiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsIlUiLCJHIiwiSiIsIloiLCJ0dCIsImV0IiwiaXQiLCJudCIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJzdCIsImludGVydmFsIiwia2V5Ym9hcmQiLCJwYXVzZSIsInJpZGUiLCJ0b3VjaCIsIndyYXAiLCJvdCIsInJ0IiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwiX3N3aXBlSGVscGVyIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiY3ljbGUiLCJfc2xpZGUiLCJuZXh0V2hlblZpc2libGUiLCJoaWRkZW4iLCJfY2xlYXJJbnRlcnZhbCIsIl91cGRhdGVJbnRlcnZhbCIsInNldEludGVydmFsIiwiX21heWJlRW5hYmxlQ3ljbGUiLCJ0byIsIl9nZXRJdGVtcyIsIl9nZXRJdGVtSW5kZXgiLCJfZ2V0QWN0aXZlIiwiZGVmYXVsdEludGVydmFsIiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsIl9kaXJlY3Rpb25Ub09yZGVyIiwiY2xlYXJUaW1lb3V0Iiwia2V5IiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJwYXJzZUludCIsImRpcmVjdGlvbiIsIl9vcmRlclRvRGlyZWN0aW9uIiwiX2lzQW5pbWF0ZWQiLCJjbGVhckludGVydmFsIiwiYXQiLCJsdCIsImN0IiwiaHQiLCJkdCIsInBhcmVudCIsInV0IiwiZnQiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsIl9pbml0aWFsaXplQ2hpbGRyZW4iLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiX2lzU2hvd24iLCJoaWRlIiwic2hvdyIsIl9nZXRGaXJzdExldmVsQ2hpbGRyZW4iLCJfZ2V0RGltZW5zaW9uIiwic3R5bGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwdCIsIm10IiwiZ3QiLCJfdCIsImJ0IiwidnQiLCJ5dCIsInd0IiwiQXQiLCJFdCIsIlR0IiwiQ3QiLCJPdCIsInJlZHVjZSIsInh0Iiwia3QiLCJMdCIsIlN0IiwiRHQiLCJJdCIsIk50IiwiUHQiLCJqdCIsIk10IiwiRnQiLCJIdCIsIm5vZGVOYW1lIiwiJHQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJXdCIsIkJ0IiwiSFRNTEVsZW1lbnQiLCJ6dCIsIlJ0IiwibmFtZSIsImVuYWJsZWQiLCJwaGFzZSIsInN0YXRlIiwiZWxlbWVudHMiLCJmb3JFYWNoIiwic3R5bGVzIiwiYXR0cmlidXRlcyIsImFzc2lnbiIsImVmZmVjdCIsInBvcHBlciIsInBvc2l0aW9uIiwib3B0aW9ucyIsInN0cmF0ZWd5IiwibGVmdCIsInRvcCIsIm1hcmdpbiIsImFycm93IiwicmVmZXJlbmNlIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlcyIsInF0IiwiVnQiLCJLdCIsIlF0Iiwicm91bmQiLCJYdCIsInVzZXJBZ2VudERhdGEiLCJicmFuZHMiLCJicmFuZCIsInZlcnNpb24iLCJ1c2VyQWdlbnQiLCJZdCIsIlV0Iiwib2Zmc2V0V2lkdGgiLCJ3aWR0aCIsImhlaWdodCIsInZpc3VhbFZpZXdwb3J0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInJpZ2h0IiwiYm90dG9tIiwiR3QiLCJKdCIsImlzU2FtZU5vZGUiLCJob3N0IiwiWnQiLCJ0ZSIsImVlIiwiaWUiLCJhc3NpZ25lZFNsb3QiLCJuZSIsIm9mZnNldFBhcmVudCIsInNlIiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsIm9lIiwicmUiLCJhZSIsImxlIiwiY2UiLCJtb2RpZmllcnNEYXRhIiwicG9wcGVyT2Zmc2V0cyIsInBsYWNlbWVudCIsInJlY3RzIiwicGFkZGluZyIsImNsaWVudEhlaWdodCIsImNsaWVudFdpZHRoIiwiY2VudGVyT2Zmc2V0IiwiZWxlbWVudCIsInJlcXVpcmVzSWZFeGlzdHMiLCJoZSIsImRlIiwidWUiLCJwb3BwZXJSZWN0IiwidmFyaWF0aW9uIiwib2Zmc2V0cyIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwicm91bmRPZmZzZXRzIiwiaXNGaXhlZCIsImRldmljZVBpeGVsUmF0aW8iLCJmZSIsImRhdGEiLCJwZSIsInBhc3NpdmUiLCJtZSIsImluc3RhbmNlIiwic2Nyb2xsIiwicmVzaXplIiwic2Nyb2xsUGFyZW50cyIsInVwZGF0ZSIsImdlIiwiX2UiLCJiZSIsInN0YXJ0IiwiZW5kIiwidmUiLCJ5ZSIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0Iiwid2UiLCJBZSIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiRWUiLCJUZSIsIkNlIiwiT2UiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJ4ZSIsImtlIiwiYm91bmRhcnkiLCJyb290Qm91bmRhcnkiLCJlbGVtZW50Q29udGV4dCIsImFsdEJvdW5kYXJ5IiwiY29udGV4dEVsZW1lbnQiLCJvZmZzZXQiLCJMZSIsImZsaXBWYXJpYXRpb25zIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwic29ydCIsIlNlIiwiX3NraXAiLCJtYWluQXhpcyIsImFsdEF4aXMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJldmVyeSIsInJlc2V0IiwiRGUiLCJJZSIsInNvbWUiLCJOZSIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJQZSIsImplIiwiTWUiLCJ0ZXRoZXIiLCJ0ZXRoZXJPZmZzZXQiLCJGZSIsIkhlIiwiJGUiLCJtb2RpZmllcnMiLCJXZSIsImFyZ3VtZW50cyIsIkJlIiwiZGVmYXVsdE1vZGlmaWVycyIsImRlZmF1bHRPcHRpb25zIiwib3JkZXJlZE1vZGlmaWVycyIsInNldE9wdGlvbnMiLCJmb3JjZVVwZGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwiemUiLCJSZSIsInFlIiwiVmUiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJhZnRlck1haW4iLCJhZnRlclJlYWQiLCJhZnRlcldyaXRlIiwiYXBwbHlTdHlsZXMiLCJhdXRvIiwiYmFzZVBsYWNlbWVudHMiLCJiZWZvcmVNYWluIiwiYmVmb3JlUmVhZCIsImJlZm9yZVdyaXRlIiwiY2xpcHBpbmdQYXJlbnRzIiwiY29tcHV0ZVN0eWxlcyIsImNyZWF0ZVBvcHBlciIsImNyZWF0ZVBvcHBlckJhc2UiLCJjcmVhdGVQb3BwZXJMaXRlIiwiZGV0ZWN0T3ZlcmZsb3ciLCJldmVudExpc3RlbmVycyIsImZsaXAiLCJtYWluIiwibW9kaWZpZXJQaGFzZXMiLCJwbGFjZW1lbnRzIiwicG9wcGVyR2VuZXJhdG9yIiwicmVhZCIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJ2aWV3cG9ydCIsIndyaXRlIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIktlIiwiUWUiLCJYZSIsIlllIiwiVWUiLCJHZSIsIkplIiwiWmUiLCJ0aSIsImVpIiwiaWkiLCJuaSIsInNpIiwib2kiLCJyaSIsImFpIiwiYXV0b0Nsb3NlIiwiZGlzcGxheSIsInBvcHBlckNvbmZpZyIsImxpIiwiY2kiLCJfcG9wcGVyIiwiX3BhcmVudCIsIl9tZW51IiwiX2luTmF2YmFyIiwiX2RldGVjdE5hdmJhciIsIl9jcmVhdGVQb3BwZXIiLCJmb2N1cyIsIl9jb21wbGV0ZUhpZGUiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiX2dldFBsYWNlbWVudCIsIl9nZXRPZmZzZXQiLCJfc2VsZWN0TWVudUl0ZW0iLCJjbGVhck1lbnVzIiwiYnV0dG9uIiwiY29tcG9zZWRQYXRoIiwiY2xpY2tFdmVudCIsImRhdGFBcGlLZXlkb3duSGFuZGxlciIsInN0b3BQcm9wYWdhdGlvbiIsImhpIiwiZGkiLCJ1aSIsImZpIiwicGkiLCJnZXRXaWR0aCIsImlubmVyV2lkdGgiLCJfZGlzYWJsZU92ZXJGbG93IiwiX3NldEVsZW1lbnRBdHRyaWJ1dGVzIiwiX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMiLCJpc092ZXJmbG93aW5nIiwiX3NhdmVJbml0aWFsQXR0cmlidXRlIiwiX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2siLCJzZXRQcm9wZXJ0eSIsInJlbW92ZVByb3BlcnR5IiwibWkiLCJnaSIsIl9pIiwiY2xhc3NOYW1lIiwiY2xpY2tDYWxsYmFjayIsImlzQW5pbWF0ZWQiLCJpc1Zpc2libGUiLCJyb290RWxlbWVudCIsImJpIiwidmkiLCJfaXNBcHBlbmRlZCIsIl9hcHBlbmQiLCJfZ2V0RWxlbWVudCIsIl9lbXVsYXRlQW5pbWF0aW9uIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsInlpIiwid2kiLCJBaSIsImF1dG9mb2N1cyIsInRyYXBFbGVtZW50IiwiRWkiLCJUaSIsIl9pc0FjdGl2ZSIsIl9sYXN0VGFiTmF2RGlyZWN0aW9uIiwiYWN0aXZhdGUiLCJfaGFuZGxlRm9jdXNpbiIsIl9oYW5kbGVLZXlkb3duIiwiZGVhY3RpdmF0ZSIsInNoaWZ0S2V5IiwiQ2kiLCJPaSIsInhpIiwia2kiLCJMaSIsIlNpIiwiYmFja2Ryb3AiLCJEaSIsIklpIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pbml0aWFsaXplQmFja0Ryb3AiLCJfZm9jdXN0cmFwIiwiX2luaXRpYWxpemVGb2N1c1RyYXAiLCJfc2Nyb2xsQmFyIiwiX2FkanVzdERpYWxvZyIsIl9zaG93RWxlbWVudCIsIl9oaWRlTW9kYWwiLCJoYW5kbGVVcGRhdGUiLCJfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbiIsIl9yZXNldEFkanVzdG1lbnRzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJOaSIsIlBpIiwiamkiLCJNaSIsIkZpIiwiSGkiLCIkaSIsIldpIiwiQmkiLCJibHVyIiwiemkiLCJSaSIsInFpIiwiVmkiLCJub2RlVmFsdWUiLCJLaSIsImFyZWEiLCJiciIsImNvbCIsImNvZGUiLCJkaXYiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaW1nIiwib2wiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1bCIsIlFpIiwiYWxsb3dMaXN0IiwiY29udGVudCIsImV4dHJhQ2xhc3MiLCJodG1sIiwic2FuaXRpemUiLCJzYW5pdGl6ZUZuIiwidGVtcGxhdGUiLCJYaSIsIllpIiwiZW50cnkiLCJzZWxlY3RvciIsIlVpIiwiZ2V0Q29udGVudCIsIl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbiIsImhhc0NvbnRlbnQiLCJjaGFuZ2VDb250ZW50IiwiX2NoZWNrQ29udGVudCIsInRvSHRtbCIsImlubmVySFRNTCIsIl9tYXliZVNhbml0aXplIiwiX3NldENvbnRlbnQiLCJfcHV0RWxlbWVudEluVGVtcGxhdGUiLCJ0ZXh0Q29udGVudCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsIkdpIiwiSmkiLCJaaSIsInRuIiwiZW4iLCJubiIsInNuIiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsInJuIiwiYW5pbWF0aW9uIiwiY29udGFpbmVyIiwiY3VzdG9tQ2xhc3MiLCJkZWxheSIsInRpdGxlIiwiYW4iLCJsbiIsIl9pc0VuYWJsZWQiLCJfdGltZW91dCIsIl9pc0hvdmVyZWQiLCJfYWN0aXZlVHJpZ2dlciIsIl90ZW1wbGF0ZUZhY3RvcnkiLCJfbmV3Q29udGVudCIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJfZml4VGl0bGUiLCJlbmFibGUiLCJkaXNhYmxlIiwidG9nZ2xlRW5hYmxlZCIsImNsaWNrIiwiX2xlYXZlIiwiX2VudGVyIiwiX2hpZGVNb2RhbEhhbmRsZXIiLCJfZGlzcG9zZVBvcHBlciIsIl9pc1dpdGhDb250ZW50IiwiX2dldFRpcEVsZW1lbnQiLCJob3ZlciIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2dldFRpdGxlIiwiX2NyZWF0ZVRpcEVsZW1lbnQiLCJfZ2V0Q29udGVudEZvclRlbXBsYXRlIiwiX2dldFRlbXBsYXRlRmFjdG9yeSIsImZsb29yIiwicmFuZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXRDb250ZW50IiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsIl9zZXRUaW1lb3V0IiwiY24iLCJobiIsImRuIiwiX2dldENvbnRlbnQiLCJ1biIsInBuIiwibW4iLCJyb290TWFyZ2luIiwic21vb3RoU2Nyb2xsIiwidGhyZXNob2xkIiwiZ24iLCJfbiIsIl90YXJnZXRMaW5rcyIsIl9vYnNlcnZhYmxlU2VjdGlvbnMiLCJfcm9vdEVsZW1lbnQiLCJfYWN0aXZlVGFyZ2V0IiwiX29ic2VydmVyIiwiX3ByZXZpb3VzU2Nyb2xsRGF0YSIsInZpc2libGVFbnRyeVRvcCIsInBhcmVudFNjcm9sbFRvcCIsInJlZnJlc2giLCJfaW5pdGlhbGl6ZVRhcmdldHNBbmRPYnNlcnZhYmxlcyIsIl9tYXliZUVuYWJsZVNtb290aFNjcm9sbCIsImRpc2Nvbm5lY3QiLCJfZ2V0TmV3T2JzZXJ2ZXIiLCJvYnNlcnZlIiwiaGFzaCIsInNjcm9sbFRvIiwiYmVoYXZpb3IiLCJyb290IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJfb2JzZXJ2ZXJDYWxsYmFjayIsImlkIiwiX3Byb2Nlc3MiLCJpc0ludGVyc2VjdGluZyIsIl9jbGVhckFjdGl2ZUNsYXNzIiwiX2FjdGl2YXRlUGFyZW50cyIsImJuIiwidm4iLCJ5biIsInduIiwiQW4iLCJFbiIsIlRuIiwiQ24iLCJPbiIsInhuIiwiX3NldEluaXRpYWxBdHRyaWJ1dGVzIiwiX2dldENoaWxkcmVuIiwiX2VsZW1Jc0FjdGl2ZSIsIl9nZXRBY3RpdmVFbGVtIiwiX2RlYWN0aXZhdGUiLCJfYWN0aXZhdGUiLCJfdG9nZ2xlRHJvcERvd24iLCJwcmV2ZW50U2Nyb2xsIiwiX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzIiwiX3NldEluaXRpYWxBdHRyaWJ1dGVzT25DaGlsZCIsIl9nZXRJbm5lckVsZW1lbnQiLCJfZ2V0T3V0ZXJFbGVtZW50IiwiX3NldEluaXRpYWxBdHRyaWJ1dGVzT25UYXJnZXRQYW5lbCIsImtuIiwiTG4iLCJTbiIsIkRuIiwiYXV0b2hpZGUiLCJJbiIsIk5uIiwiX2hhc01vdXNlSW50ZXJhY3Rpb24iLCJfaGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiIsIl9jbGVhclRpbWVvdXQiLCJfbWF5YmVTY2hlZHVsZUhpZGUiLCJpc1Nob3duIiwiX29uSW50ZXJhY3Rpb24iLCJBbGVydCIsIkJ1dHRvbiIsIkNhcm91c2VsIiwiQ29sbGFwc2UiLCJEcm9wZG93biIsIk1vZGFsIiwiT2ZmY2FudmFzIiwiUG9wb3ZlciIsIlNjcm9sbFNweSIsIlRhYiIsIlRvYXN0IiwiVG9vbHRpcCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./public/assets/js/bootstrap.min.js\n");

/***/ })

};
;